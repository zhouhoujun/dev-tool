{"version":3,"sources":["loaderFactory.js","loaderFactory.ts"],"names":["DirLoader_1","require","ModuleLoader_1","DynamicLoader_1","CustomLoader_1","_","LoaderFactory","option","isString","loader","module","ModuleLoader","isFunction","CustomLoader","isArray","dynamicTasks","DynamicLoader","DirLoader","loderOption","type","exports"],"mappings":"AAAA;;;;;;ACCA,IAAAA,cAAAC,QAA0B,qBAA1B,CAAA;AAEA,IAAAC,iBAAAD,QAA6B,wBAA7B,CAAA;AACA,IAAAE,kBAAAF,QAA8B,yBAA9B,CAAA;AACA,IAAAG,iBAAAH,QAA6B,wBAA7B,CAAA;AACA,IAAYI,IAACJ,QAAM,QAAN,CAAb;AAYA;;;;;;;;IAOAK,a;AAEI,6BAAA;AAAA;AACC;;;;+BACMC,M,EAAmB;AAEtB,gBAAIF,EAAEG,QAAF,CAAWD,OAAOE,MAAlB,CAAJ,EAA+B;AAC3BF,uBAAOE,MAAP,GAAgB;AACZC,4BAAQH,OAAOE;AADH,iBAAhB;AAGA,uBAAO,IAAIP,eAAAS,YAAJ,CAAiBJ,MAAjB,CAAP;AACH,aALD,MAKO,IAAIF,EAAEO,UAAF,CAAaL,OAAOE,MAApB,CAAJ,EAAiC;AACpC,uBAAO,IAAIL,eAAAS,YAAJ,CAAiBN,MAAjB,EAAyBA,OAAOE,MAAhC,CAAP;AACH,aAFM,MAEA,IAAIJ,EAAES,OAAF,CAAUP,OAAOE,MAAjB,CAAJ,EAA8B;AACjCF,uBAAOE,MAAP,GAAsC;AAClCM,kCAAcR,OAAOE;AADa,iBAAtC;AAGA,uBAAO,IAAIN,gBAAAa,aAAJ,CAAkBT,MAAlB,CAAP;AACH,aALM,MAKA;AACH;AACA,oBAAIA,OAAOE,MAAP,CAAc,KAAd,CAAJ,EAA0B;AACtB,2BAAO,IAAIT,YAAAiB,SAAJ,CAAcV,MAAd,CAAP;AACH;AAED;AACA,oBAAIF,EAAEG,QAAF,CAAWD,OAAOE,MAAP,CAAc,MAAd,CAAX,CAAJ,EAAuC;AACnCF,2BAAOE,MAAP,GAAsC;AAClCM,sCAAcR,OAAOE;AADa,qBAAtC;AAGA,2BAAO,IAAIN,gBAAAa,aAAJ,CAAkBT,MAAlB,CAAP;AACH;AAED;AACA,oBAAIA,OAAOE,MAAP,CAAc,cAAd,CAAJ,EAAmC;AAC/B,2BAAO,IAAIN,gBAAAa,aAAJ,CAAkBT,MAAlB,CAAP;AACH;AAED,oBAAIE,SAAsB,IAA1B;AACA,oBAAIS,cAA6BX,OAAOE,MAAxC;AACA,wBAAQS,YAAYC,IAApB;AACI,yBAAK,KAAL;AACIV,iCAAS,IAAIT,YAAAiB,SAAJ,CAAcV,MAAd,CAAT;AACA;AAEJ,yBAAK,SAAL;AACIE,iCAAS,IAAIN,gBAAAa,aAAJ,CAAkBT,MAAlB,CAAT;AACA;AAEJ,yBAAK,QAAL;AACA;AACIE,iCAAS,IAAIP,eAAAS,YAAJ,CAAiBJ,MAAjB,CAAT;AACA;AAZR;AAcA,uBAAOE,MAAP;AACH;AACJ;;;;;;AAvDQW,QAAAd,aAAA,GAAaA,aAAb","file":"../loaderFactory.js","sourcesContent":["\"use strict\";\nconst DirLoader_1 = require('./loaders/DirLoader');\nconst ModuleLoader_1 = require('./loaders/ModuleLoader');\nconst DynamicLoader_1 = require('./loaders/DynamicLoader');\nconst CustomLoader_1 = require('./loaders/CustomLoader');\nconst _ = require('lodash');\n/**\n * loader factory.\n *\n * @export\n * @class LoaderFactory\n * @implements {ILoaderFactory}\n */\nclass LoaderFactory {\n    constructor() {\n    }\n    create(option) {\n        if (_.isString(option.loader)) {\n            option.loader = {\n                module: option.loader\n            };\n            return new ModuleLoader_1.ModuleLoader(option);\n        }\n        else if (_.isFunction(option.loader)) {\n            return new CustomLoader_1.CustomLoader(option, option.loader);\n        }\n        else if (_.isArray(option.loader)) {\n            option.loader = {\n                dynamicTasks: option.loader\n            };\n            return new DynamicLoader_1.DynamicLoader(option);\n        }\n        else {\n            // if config dir.\n            if (option.loader['dir']) {\n                return new DirLoader_1.DirLoader(option);\n            }\n            // dynamic task name.\n            if (_.isString(option.loader['name'])) {\n                option.loader = {\n                    dynamicTasks: option.loader\n                };\n                return new DynamicLoader_1.DynamicLoader(option);\n            }\n            // if config pipe and taskName.\n            if (option.loader['dynamicTasks']) {\n                return new DynamicLoader_1.DynamicLoader(option);\n            }\n            let loader = null;\n            let loderOption = option.loader;\n            switch (loderOption.type) {\n                case 'dir':\n                    loader = new DirLoader_1.DirLoader(option);\n                    break;\n                case 'dynamic':\n                    loader = new DynamicLoader_1.DynamicLoader(option);\n                    break;\n                case 'module':\n                default:\n                    loader = new ModuleLoader_1.ModuleLoader(option);\n                    break;\n            }\n            return loader;\n        }\n    }\n}\nexports.LoaderFactory = LoaderFactory;\n","import { ITaskLoader } from './ITaskLoader';\r\nimport { DirLoader } from './loaders/DirLoader';\r\nimport { ITaskOption, ILoaderOption, IDynamicLoaderOption } from 'development-core';\r\nimport { ModuleLoader } from './loaders/ModuleLoader';\r\nimport { DynamicLoader } from './loaders/DynamicLoader';\r\nimport { CustomLoader } from './loaders/CustomLoader';\r\nimport * as _ from 'lodash';\r\n/**\r\n * loader factory.\r\n * \r\n * @export\r\n * @interface ILoaderFactory\r\n */\r\nexport interface ILoaderFactory {\r\n    create(option: ITaskOption): ITaskLoader;\r\n}\r\n\r\n\r\n/**\r\n * loader factory.\r\n * \r\n * @export\r\n * @class LoaderFactory\r\n * @implements {ILoaderFactory}\r\n */\r\nexport class LoaderFactory implements ILoaderFactory {\r\n\r\n    constructor() {\r\n    }\r\n    create(option: ITaskOption): ITaskLoader {\r\n\r\n        if (_.isString(option.loader)) {\r\n            option.loader = {\r\n                module: option.loader\r\n            };\r\n            return new ModuleLoader(option);\r\n        } else if (_.isFunction(option.loader)) {\r\n            return new CustomLoader(option, option.loader);\r\n        } else if (_.isArray(option.loader)) {\r\n            option.loader = <IDynamicLoaderOption>{\r\n                dynamicTasks: option.loader\r\n            };\r\n            return new DynamicLoader(option);\r\n        } else {\r\n            // if config dir.\r\n            if (option.loader['dir']) {\r\n                return new DirLoader(option);\r\n            }\r\n\r\n            // dynamic task name.\r\n            if (_.isString(option.loader['name'])) {\r\n                option.loader = <IDynamicLoaderOption>{\r\n                    dynamicTasks: option.loader\r\n                };\r\n                return new DynamicLoader(option);\r\n            }\r\n\r\n            // if config pipe and taskName.\r\n            if (option.loader['dynamicTasks']) {\r\n                return new DynamicLoader(option);\r\n            }\r\n\r\n            let loader: ITaskLoader = null;\r\n            let loderOption: ILoaderOption = option.loader;\r\n            switch (loderOption.type) {\r\n                case 'dir':\r\n                    loader = new DirLoader(option);\r\n                    break;\r\n\r\n                case 'dynamic':\r\n                    loader = new DynamicLoader(option);\r\n                    break;\r\n\r\n                case 'module':\r\n                default:\r\n                    loader = new ModuleLoader(option);\r\n                    break;\r\n            }\r\n            return loader;\r\n        }\r\n    }\r\n}\r\n"]}