{"version":3,"sources":["tools.js","tools.ts"],"names":["__export","m","p","exports","hasOwnProperty","_","require","minimist","LoaderFactory_1","development_core_1","chalk","Development","dirname","option","globals","gulp","env","root","help","console","log","grey","printHelp","loadTasks","tasks","then","tseq","runSequence","catch","error","err","process","exit","cfg","Promise","all","map","isArray","optask","dist","loader","createLoader","loadConfg","green","isString","bindingConfig","loadSubTask","load","loadAssertTasks","setup","subtask","flatten","tsq","config","assertsTask","subGroupTask","resolve","toSequence","runTasks","tsqs","addToSequence","each","subopt","name","subTaskName","src","subseq","length","first","last","frn","lsn","subName","task","order","subTaskOrder","taskName","asserts","keys","op","aop","pipes","watchTasks","some","isFunction","isNull","isUndefined","getSrc","getDist","push","sq","assertSeq","t","assertsOrder","loaderFactory","factory","LoaderFactory","opt","create","setting","devtool","setupTask","callback","options","argv","slice","string","default","NODE_ENV","run","start"],"mappings":"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","file":"../tools.js","sourcesContent":["\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nconst _ = require('lodash');\nconst minimist = require('minimist');\nconst LoaderFactory_1 = require('./LoaderFactory');\nconst development_core_1 = require('development-core');\nconst chalk = require('chalk');\n// export * from 'development-core';\n__export(require('./LoaderFactory'));\n__export(require('./loaders/BaseLoader'));\nclass Development {\n    constructor(dirname, option) {\n        this.dirname = dirname;\n        this.option = option;\n        /**\n         * global data.\n         *\n         *\n         * @private\n         * @type {*}\n         * @memberOf Development\n         */\n        this.globals = {};\n    }\n    /**\n     * create development tool.\n     *\n     * @static\n     * @param {Gulp} gulp\n     * @param {string} dirname\n     * @param {(DevelopConfig | ITaskOption[])} setting\n     * @returns {Development}\n     *\n     * @memberOf Development\n     */\n    static create(gulp, dirname, setting) {\n        let option = _.isArray(setting) ? { tasks: setting } : setting;\n        let devtool = new Development(dirname, option);\n        option.setupTask = option.setupTask || 'build';\n        gulp.task(option.setupTask, (callback) => {\n            var options = minimist(process.argv.slice(2), {\n                string: 'env',\n                default: { env: process.env.NODE_ENV || 'development' }\n            });\n            return devtool.run(gulp, options);\n        });\n        gulp.task('default', () => {\n            gulp.start(option.setupTask);\n        });\n        return devtool;\n    }\n    run(gulp, env) {\n        if (!env.root) {\n            env.root = this.dirname;\n        }\n        if (env.help) {\n            console.log(chalk.grey('... main help  ...'));\n            this.printHelp(env.help);\n        }\n        return this.loadTasks(gulp, this.option.tasks, env)\n            .then(tseq => {\n            console.log(chalk.grey('run sequenec tasks:'), tseq);\n            return development_core_1.runSequence(gulp, tseq);\n        })\n            .catch(err => {\n            console.error(err);\n            process.exit(1);\n        });\n    }\n    bindingConfig(cfg) {\n        // cfg.env = cfg.env || this.env;\n        cfg.globals = this.globals;\n        return cfg;\n    }\n    loadTasks(gulp, tasks, env) {\n        return Promise.all(_.map(_.isArray(tasks) ? tasks : [tasks], optask => {\n            optask.dist = optask.dist || 'dist';\n            console.log(chalk.grey('begin load task via loader:'), optask.loader);\n            let loader = this.createLoader(optask);\n            return loader.loadConfg(env)\n                .then(cfg => {\n                console.log(chalk.green('task config loaded.'));\n                if (cfg.env.help) {\n                    if (cfg.printHelp) {\n                        console.log(chalk.grey('...development default help...'));\n                        cfg.printHelp(_.isString(cfg.env.help) ? cfg.env.help : '');\n                    }\n                    return [];\n                }\n                else {\n                    cfg = this.bindingConfig(cfg);\n                    return this.loadSubTask(gulp, cfg)\n                        .then(subtask => {\n                        return Promise.all([\n                            loader.load(cfg),\n                            this.loadAssertTasks(gulp, cfg)\n                        ])\n                            .then(tasks => {\n                            console.log(chalk.green('tasks loaded.'));\n                            return this.setup(gulp, cfg, tasks[0], tasks[1], subtask);\n                        });\n                    });\n                }\n            });\n        })).then(tsq => {\n            return _.flatten(tsq);\n        });\n    }\n    setup(gulp, config, tasks, assertsTask, subGroupTask) {\n        return Promise.resolve(development_core_1.toSequence(gulp, tasks, config))\n            .then(tsqs => {\n            // if (_.isFunction(config.option['runTasks'])) {\n            //     return config.option['runTasks'](config.oper, tsqs, subGroupTask, assertsTask);\n            // } else if (_.isArray(config.option['runTasks'])) {\n            //     tsqs = config.option['runTasks'];\n            // } else \n            if (config.runTasks) {\n                return config.runTasks(tsqs, assertsTask, subGroupTask);\n            }\n            console.log(assertsTask);\n            config.addToSequence(tsqs, assertsTask);\n            config.addToSequence(tsqs, subGroupTask);\n            return tsqs;\n        });\n    }\n    /**\n     * load sub tasks as group task.\n     *\n     * @protected\n     * @param {Gulp} gulp\n     * @param {ITaskConfig} config\n     * @returns {Promise<Src>}\n     *\n     * @memberOf Development\n     */\n    loadSubTask(gulp, config) {\n        if (config['tasks']) {\n            let optask = config.option;\n            _.each(_.isArray(optask.tasks) ? optask.tasks : [optask.tasks], subopt => {\n                subopt.name = config.subTaskName(subopt.name);\n                subopt.src = subopt.src || optask.src;\n                subopt.dist = subopt.dist || optask.dist;\n            });\n            return this.loadTasks(gulp, optask.tasks, config.env)\n                .then(subseq => {\n                if (subseq && subseq.length > 0) {\n                    let first = _.first(subseq);\n                    let last = _.last(subseq);\n                    let frn = _.isArray(first) ? _.first(first) : first;\n                    let lsn = _.isArray(last) ? _.last(last) : last;\n                    let subName = config.subTaskName(`${frn}-${lsn}`, '-sub');\n                    gulp.task(subName, () => {\n                        return development_core_1.runSequence(gulp, subseq);\n                    });\n                    return {\n                        order: optask.subTaskOrder,\n                        taskName: subName\n                    };\n                }\n                else {\n                    return null;\n                }\n            });\n        }\n        else {\n            return Promise.resolve(null);\n        }\n    }\n    /**\n     * load asserts tasks.\n     *\n     * @protected\n     * @param {Gulp} gulp\n     * @param {ITaskConfig} config\n     * @returns {Promise<Src>}\n     *\n     * @memberOf Development\n     */\n    loadAssertTasks(gulp, config) {\n        let optask = config.option;\n        if (config.option.asserts) {\n            let tasks = [];\n            _.each(_.keys(optask.asserts), name => {\n                let op;\n                let aop = optask.asserts[name];\n                if (_.isString(aop)) {\n                    op = { src: aop, loader: [{ name: name, pipes: [] }, { name: `${name}-watch`, watchTasks: [name] }] };\n                }\n                else if (_.isArray(aop)) {\n                    if (_.some(aop, it => _.isString(aop))) {\n                        op = { src: aop, loader: [{ name: name, pipes: [] }, { name: `${name}-watch`, watchTasks: [name] }] };\n                    }\n                    else {\n                        op = { loader: aop };\n                    }\n                }\n                else if (_.isFunction(aop)) {\n                    op = { loader: aop };\n                }\n                else {\n                    op = aop;\n                }\n                ;\n                if (_.isNull(op) || _.isUndefined(op)) {\n                    return;\n                }\n                op.name = config.subTaskName(name, '-assert');\n                op.src = op.src || (config.getSrc() + '/**/*.' + name);\n                op.dist = op.dist || config.getDist();\n                tasks.push(op);\n            });\n            return Promise.all(_.map(tasks, task => {\n                return this.loadTasks(gulp, task, config.env)\n                    .then(sq => {\n                    return {\n                        task: task,\n                        sq: sq\n                    };\n                });\n            }))\n                .then(tseq => {\n                // asserts tasks run mutil.\n                let assertSeq = _.map(tseq, t => {\n                    let subseq = t.sq;\n                    let name;\n                    if (subseq && subseq.length > 0) {\n                        if (subseq.length === 1) {\n                            return subseq[0];\n                        }\n                        name = config.subTaskName(t.task);\n                        gulp.task(name, () => {\n                            return development_core_1.runSequence(gulp, subseq);\n                        });\n                    }\n                    else {\n                        name = config.subTaskName(t.sq);\n                    }\n                    return name;\n                });\n                return {\n                    order: config.option.assertsOrder,\n                    taskName: assertSeq\n                };\n            });\n        }\n        else {\n            return Promise.resolve(null);\n        }\n    }\n    createLoader(option) {\n        let loader = null;\n        if (!_.isFunction(this.option.loaderFactory)) {\n            let factory = new LoaderFactory_1.LoaderFactory();\n            this.option.loaderFactory = (opt) => {\n                return factory.create(opt);\n            };\n        }\n        loader = this.option.loaderFactory(option);\n        return loader;\n    }\n    printHelp(help) {\n        if (help === 'en') {\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--config name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env  development or production;\r\n                 *  --config app setting\r\n                 *  --root path, set relative path of the development tool root.\r\n                 *  --watch  watch src file change or not. if changed will auto update to node service. \r\n                 *  --release release web app or not. if [--env production], default to release. \r\n                 *  --test  need auto load test file to node service.\r\n                 *  --deploy run deploy tasks to deploy project.  \r\n                 *  --serve start node web service or not.\r\n                 *  --task taskname  spruce task taskname\r\n                 **/`);\n        }\n        else {\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--config name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env 发布环境 默认开发环境development;\r\n                 *  --config 设置配置文件;\r\n                 *  --root path, 设置编译环境相对路径\r\n                 *  --watch  是否需要动态监听文件变化\r\n                 *  --release 是否release编译, [--env production] 默认release \r\n                 *  --test  启动自动化测试\r\n                 *  --deploy 运行加载deploy tasks, 编译发布项目。  \r\n                 *  --serve  是否在开发模式下 开启node web服务\r\n                 *  --task taskname  运行单独任务taskname\r\n                 **/`);\n        }\n    }\n}\nexports.Development = Development;\n","import * as _ from 'lodash';\r\nimport { Gulp, TaskCallback } from 'gulp';\r\n\r\nimport * as minimist from 'minimist';\r\nimport { ITaskLoader } from './ITaskLoader';\r\nimport { LoaderFactory } from './LoaderFactory';\r\nimport {\r\n    Src, currentOperation, toSequence, runSequence\r\n    , IAsserts, ITaskInfo, ITask, ITaskOption, Operation, IEnvOption, ITaskConfig\r\n} from 'development-core';\r\nimport { DevelopConfig } from './DevelopConfig';\r\nimport * as chalk from 'chalk';\r\n\r\nexport * from './DevelopConfig';\r\n// export * from 'development-core';\r\nexport * from './ITaskLoader';\r\nexport * from './LoaderFactory';\r\nexport * from './loaders/BaseLoader';\r\n\r\nexport class Development {\r\n    /**\r\n     * global data.\r\n     * \r\n     * \r\n     * @private\r\n     * @type {*}\r\n     * @memberOf Development\r\n     */\r\n    private globals: any = {};\r\n    /**\r\n     * create development tool.\r\n     * \r\n     * @static\r\n     * @param {Gulp} gulp\r\n     * @param {string} dirname\r\n     * @param {(DevelopConfig | ITaskOption[])} setting\r\n     * @returns {Development}\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    static create(gulp: Gulp, dirname: string, setting: DevelopConfig | ITaskOption[]): Development {\r\n        let option = _.isArray(setting) ? { tasks: setting } : setting;\r\n        let devtool = new Development(dirname, option);\r\n        option.setupTask = option.setupTask || 'build';\r\n        gulp.task(option.setupTask, (callback: TaskCallback) => {\r\n            var options: IEnvOption = minimist(process.argv.slice(2), {\r\n                string: 'env',\r\n                default: { env: process.env.NODE_ENV || 'development' }\r\n            });\r\n            return devtool.run(gulp, options);\r\n        });\r\n\r\n        gulp.task('default', () => {\r\n            gulp.start(option.setupTask);\r\n        });\r\n        return devtool;\r\n    }\r\n\r\n    private constructor(private dirname: string, protected option: DevelopConfig) {\r\n\r\n    }\r\n\r\n    run(gulp: Gulp, env: IEnvOption): Promise<any> {\r\n        if (!env.root) {\r\n            env.root = this.dirname;\r\n        }\r\n\r\n        if (env.help) {\r\n            console.log(chalk.grey('... main help  ...'));\r\n            this.printHelp(env.help);\r\n        }\r\n\r\n        return this.loadTasks(gulp, this.option.tasks, env)\r\n            .then(tseq => {\r\n                console.log(chalk.grey('run sequenec tasks:'), tseq);\r\n                return runSequence(gulp, tseq);\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                process.exit(1);\r\n            });\r\n    }\r\n\r\n    private bindingConfig(cfg: ITaskConfig): ITaskConfig {\r\n        // cfg.env = cfg.env || this.env;\r\n        cfg.globals = this.globals;\r\n        return cfg;\r\n    }\r\n\r\n    protected loadTasks(gulp: Gulp, tasks: ITaskOption | ITaskOption[], env: IEnvOption): Promise<Src[]> {\r\n        return Promise.all<Src[]>(\r\n            _.map(_.isArray(tasks) ? <ITaskOption[]>tasks : [<ITaskOption>tasks], optask => {\r\n                optask.dist = optask.dist || 'dist';\r\n\r\n                console.log(chalk.grey('begin load task via loader:'), optask.loader);\r\n                let loader = this.createLoader(optask);\r\n\r\n                return loader.loadConfg(env)\r\n                    .then(cfg => {\r\n                        console.log(chalk.green('task config loaded.'));\r\n                        if (cfg.env.help) {\r\n                            if (cfg.printHelp) {\r\n                                console.log(chalk.grey('...development default help...'));\r\n                                cfg.printHelp(_.isString(cfg.env.help) ? cfg.env.help : '');\r\n                            }\r\n                            return [];\r\n                        } else {\r\n                            cfg = this.bindingConfig(cfg);\r\n                            return this.loadSubTask(gulp, cfg)\r\n                                .then(subtask => {\r\n                                    return Promise.all([\r\n                                        loader.load(cfg),\r\n                                        this.loadAssertTasks(gulp, cfg)\r\n                                    ])\r\n                                        .then(tasks => {\r\n                                            console.log(chalk.green('tasks loaded.'));\r\n                                            return this.setup(gulp, cfg, tasks[0], tasks[1], subtask)\r\n                                        });\r\n                                });\r\n                        }\r\n                    });\r\n            })\r\n        ).then(tsq => {\r\n            return _.flatten(tsq);\r\n        });\r\n    }\r\n\r\n    protected setup(gulp: Gulp, config: ITaskConfig, tasks: ITask[], assertsTask: ITaskInfo, subGroupTask: ITaskInfo): Promise<Src[]> {\r\n        return Promise.resolve(toSequence(gulp, tasks, config))\r\n            .then(tsqs => {\r\n                // if (_.isFunction(config.option['runTasks'])) {\r\n                //     return config.option['runTasks'](config.oper, tsqs, subGroupTask, assertsTask);\r\n                // } else if (_.isArray(config.option['runTasks'])) {\r\n                //     tsqs = config.option['runTasks'];\r\n                // } else \r\n                if (config.runTasks) {\r\n                    return config.runTasks(tsqs, assertsTask, subGroupTask);\r\n                }\r\n\r\n                console.log(assertsTask);\r\n                config.addToSequence(tsqs, assertsTask);\r\n                config.addToSequence(tsqs, subGroupTask);\r\n\r\n                return tsqs;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * load sub tasks as group task.\r\n     * \r\n     * @protected\r\n     * @param {Gulp} gulp\r\n     * @param {ITaskConfig} config\r\n     * @returns {Promise<Src>}\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    protected loadSubTask(gulp: Gulp, config: ITaskConfig): Promise<ITaskInfo> {\r\n\r\n        if (config['tasks']) {\r\n            let optask = <ITaskOption>config.option;\r\n            _.each(_.isArray(optask.tasks) ? optask.tasks : [optask.tasks], subopt => {\r\n                subopt.name = config.subTaskName(subopt.name);\r\n                subopt.src = subopt.src || optask.src;\r\n                subopt.dist = subopt.dist || optask.dist;\r\n            });\r\n            return this.loadTasks(gulp, optask.tasks, config.env)\r\n                .then(subseq => {\r\n                    if (subseq && subseq.length > 0) {\r\n                        let first = _.first(subseq);\r\n                        let last = _.last(subseq);\r\n                        let frn = _.isArray(first) ? _.first(first) : first;\r\n                        let lsn = _.isArray(last) ? _.last(last) : last;\r\n\r\n                        let subName = config.subTaskName(`${frn}-${lsn}`, '-sub');\r\n                        gulp.task(subName, () => {\r\n                            return runSequence(gulp, subseq);\r\n                        });\r\n\r\n                        return <ITaskInfo>{\r\n                            order: optask.subTaskOrder,\r\n                            taskName: subName\r\n                        };\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                });\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * load asserts tasks.\r\n     * \r\n     * @protected\r\n     * @param {Gulp} gulp\r\n     * @param {ITaskConfig} config\r\n     * @returns {Promise<Src>}\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    protected loadAssertTasks(gulp: Gulp, config: ITaskConfig): Promise<ITaskInfo> {\r\n        let optask = config.option;\r\n        if (config.option.asserts) {\r\n            let tasks: IAsserts[] = [];\r\n            _.each(_.keys(optask.asserts), name => {\r\n                let op: IAsserts;\r\n                let aop = optask.asserts[name];\r\n                if (_.isString(aop)) {\r\n                    op = <IAsserts>{ src: aop, loader: [{ name: name, pipes: [] }, { name: `${name}-watch`, watchTasks: [name] }] };\r\n                } else if (_.isArray(aop)) {\r\n                    if (_.some(aop, it => _.isString(aop))) {\r\n                        op = <IAsserts>{ src: aop, loader: [{ name: name, pipes: [] }, { name: `${name}-watch`, watchTasks: [name] }] };\r\n                    } else {\r\n                        op = <IAsserts>{ loader: aop };\r\n                    }\r\n                } else if (_.isFunction(aop)) {\r\n                    op = { loader: aop };\r\n                } else {\r\n                    op = aop;\r\n                };\r\n                if (_.isNull(op) || _.isUndefined(op)) {\r\n                    return;\r\n                }\r\n                op.name = config.subTaskName(name, '-assert');\r\n                op.src = op.src || (config.getSrc() + '/**/*.' + name);\r\n                op.dist = op.dist || config.getDist();\r\n                tasks.push(op);\r\n            });\r\n\r\n            return Promise.all(_.map(tasks, task => {\r\n                return this.loadTasks(gulp, <ITaskOption>task, config.env)\r\n                    .then(sq => {\r\n                        return {\r\n                            task: task,\r\n                            sq: sq\r\n                        }\r\n                    });\r\n            }))\r\n                .then(tseq => {\r\n                    // asserts tasks run mutil.\r\n                    let assertSeq = _.map(tseq, t => {\r\n                        let subseq = t.sq;\r\n                        let name;\r\n                        if (subseq && subseq.length > 0) {\r\n                            if (subseq.length === 1) {\r\n                                return subseq[0];\r\n                            }\r\n\r\n                            name = config.subTaskName(t.task)\r\n                            gulp.task(name, () => {\r\n                                return runSequence(gulp, subseq);\r\n                            });\r\n                        } else {\r\n                            name = config.subTaskName(t.sq);\r\n                        }\r\n\r\n                        return name;\r\n                    });\r\n\r\n\r\n                    return <ITaskInfo>{\r\n                        order: config.option.assertsOrder,\r\n                        taskName: assertSeq\r\n                    }\r\n                });\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    protected createLoader(option: ITaskOption): ITaskLoader {\r\n        let loader = null;\r\n        if (!_.isFunction(this.option.loaderFactory)) {\r\n            let factory = new LoaderFactory();\r\n            this.option.loaderFactory = (opt: ITaskOption) => {\r\n                return factory.create(opt);\r\n            }\r\n        }\r\n        loader = this.option.loaderFactory(option);\r\n        return loader;\r\n    }\r\n\r\n\r\n    protected printHelp(help: boolean | string) {\r\n        if (help === 'en') {\r\n\r\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--config name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env  development or production;\r\n                 *  --config app setting\r\n                 *  --root path, set relative path of the development tool root.\r\n                 *  --watch  watch src file change or not. if changed will auto update to node service. \r\n                 *  --release release web app or not. if [--env production], default to release. \r\n                 *  --test  need auto load test file to node service.\r\n                 *  --deploy run deploy tasks to deploy project.  \r\n                 *  --serve start node web service or not.\r\n                 *  --task taskname  spruce task taskname\r\n                 **/`);\r\n\r\n        } else {\r\n\r\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--config name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env 发布环境 默认开发环境development;\r\n                 *  --config 设置配置文件;\r\n                 *  --root path, 设置编译环境相对路径\r\n                 *  --watch  是否需要动态监听文件变化\r\n                 *  --release 是否release编译, [--env production] 默认release \r\n                 *  --test  启动自动化测试\r\n                 *  --deploy 运行加载deploy tasks, 编译发布项目。  \r\n                 *  --serve  是否在开发模式下 开启node web服务\r\n                 *  --task taskname  运行单独任务taskname\r\n                 **/`);\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n"]}