{"version":3,"sources":["loaders/DynamicLoader.js","loaders/DynamicLoader.ts"],"names":["dynamicTaskDefine_1","require","BaseLoader_1","DynamicLoader","option","tsdef","loader","taskDefine","default","getTaskModule","Promise","resolve","BaseLoader","exports"],"mappings":"AAAA;;;;;;;;;;ACCA,IAAAA,sBAAAC,QAA8B,qBAA9B,CAAA;AACA,IAAAC,eAAAD,QAA2B,cAA3B,CAAA;;IAEAE,a;;;AAEI,2BAAYC,MAAZ,EAA+B;AAAA;;AAAA,6HACrBA,MADqB;AAE9B;;;;wCAGsB;AACnB,gBAAIC,QAAqB,IAAzB;AACA,gBAAIC,SAA+B,KAAKF,MAAL,CAAYE,MAA/C;AACA,gBAAIA,OAAOC,UAAX,EAAuB;AACnBF,wBAAQC,OAAOC,UAAf;AACH,aAFD,MAEO;AACHF,wBAAQL,oBAAAQ,OAAA,CAAkB,KAAKC,aAAL,EAAlB,CAAR;AACH;AAED,mBAAOC,QAAQC,OAAR,CAAgBN,KAAhB,CAAP;AACH;;;;EAjB8BH,aAAAU,U;;AAAtBC,QAAAV,aAAA,GAAaA,aAAb","file":"../../loaders/DynamicLoader.js","sourcesContent":["\"use strict\";\nconst dynamicTaskDefine_1 = require('./dynamicTaskDefine');\nconst BaseLoader_1 = require('./BaseLoader');\nclass DynamicLoader extends BaseLoader_1.BaseLoader {\n    constructor(option) {\n        super(option);\n    }\n    getTaskDefine() {\n        let tsdef = null;\n        let loader = this.option.loader;\n        if (loader.taskDefine) {\n            tsdef = loader.taskDefine;\n        }\n        else {\n            tsdef = dynamicTaskDefine_1.default(this.getTaskModule());\n        }\n        return Promise.resolve(tsdef);\n    }\n}\nexports.DynamicLoader = DynamicLoader;\n","import { ITaskOption, ITaskDefine, IDynamicLoaderOption } from 'development-core';\r\nimport dynamicTaskDefine from './dynamicTaskDefine';\r\nimport { BaseLoader } from './BaseLoader';\r\n\r\nexport class DynamicLoader extends BaseLoader {\r\n\r\n    constructor(option: ITaskOption) {\r\n        super(option);\r\n    }\r\n\r\n\r\n    protected getTaskDefine(): Promise<ITaskDefine> {\r\n        let tsdef: ITaskDefine = null;\r\n        let loader: IDynamicLoaderOption = this.option.loader;\r\n        if (loader.taskDefine) {\r\n            tsdef = loader.taskDefine;\r\n        } else {\r\n            tsdef = dynamicTaskDefine(this.getTaskModule())\r\n        }\r\n\r\n        return Promise.resolve(tsdef);\r\n    }\r\n}\r\n\r\n\r\n"]}