{"version":3,"sources":["loaders/DirLoader.js","loaders/DirLoader.ts"],"names":["development_core_1","require","BaseLoader_1","DirLoader","option","cfg","loader","dir","findTasksInDir","taskSourceVal","configModule","module","findTaskDefineInDir","BaseLoader","exports"],"mappings":"AAAA;;;;;;;;;;;;ACCA,IAAAA,qBAAAC,QAAmH,kBAAnH,CAAA;AACA,IAAAC,eAAAD,QAA2B,cAA3B,CAAA;;IAEAE,S;;;AAEI,uBAAYC,MAAZ,EAA+B;AAAA;;AAAA,qHACrBA,MADqB;AAE9B;;;;6BAEIC,G,EAAgB;AACjB,gBAAIC,SAA2B,KAAKF,MAAL,CAAYE,MAA3C;AACA,gBAAIA,OAAOC,GAAX,EAAgB;AACZ,uBAAOF,IAAIG,cAAJ,CAAmBR,mBAAAS,aAAA,CAAcH,OAAOC,GAArB,CAAnB,CAAP;AACH,aAFD,MAEO;AACH,kIAAkBF,GAAlB;AACH;AACJ;;;wCAEsB;AACnB,gBAAIC,SAA2B,KAAKF,MAAL,CAAYE,MAA3C;AACA,gBAAI,CAACA,OAAOI,YAAR,IACG,CAACJ,OAAOK,MADX,IACqBL,OAAOC,GADhC,EACqC;AACjC,uBAAOP,mBAAAY,mBAAA,CAAoBZ,mBAAAS,aAAA,CAAcH,OAAOC,GAArB,CAApB,CAAP;AACH,aAHD,MAGO;AACH;AACH;AACJ;;;;EAvB0BL,aAAAW,U;;AAAlBC,QAAAX,SAAA,GAASA,SAAT","file":"../../loaders/DirLoader.js","sourcesContent":["\"use strict\";\nconst development_core_1 = require('development-core');\nconst BaseLoader_1 = require('./BaseLoader');\nclass DirLoader extends BaseLoader_1.BaseLoader {\n    constructor(option) {\n        super(option);\n    }\n    load(cfg) {\n        let loader = this.option.loader;\n        if (loader.dir) {\n            return cfg.findTasksInDir(development_core_1.taskSourceVal(loader.dir));\n        }\n        else {\n            return super.load(cfg);\n        }\n    }\n    getTaskDefine() {\n        let loader = this.option.loader;\n        if (!loader.configModule\n            && !loader.module && loader.dir) {\n            return development_core_1.findTaskDefineInDir(development_core_1.taskSourceVal(loader.dir));\n        }\n        else {\n            return super.getTaskDefine();\n        }\n    }\n}\nexports.DirLoader = DirLoader;\n","import * as _ from 'lodash';\r\nimport { ITask, ITaskDefine, IDirLoaderOption, ITaskOption, ITaskConfig, findTaskDefineInDir, taskSourceVal } from 'development-core';\r\nimport { BaseLoader } from './BaseLoader';\r\n\r\nexport class DirLoader extends BaseLoader {\r\n\r\n    constructor(option: ITaskOption) {\r\n        super(option);\r\n    }\r\n\r\n    load(cfg: ITaskConfig): Promise<ITask[]> {\r\n        let loader: IDirLoaderOption = this.option.loader;\r\n        if (loader.dir) {\r\n            return cfg.findTasksInDir(taskSourceVal(loader.dir));\r\n        } else {\r\n            return super.load(cfg);\r\n        }\r\n    }\r\n\r\n    protected getTaskDefine(): Promise<ITaskDefine> {\r\n        let loader: IDirLoaderOption = this.option.loader;\r\n        if (!loader.configModule\r\n            && !loader.module && loader.dir) {\r\n            return findTaskDefineInDir(taskSourceVal(loader.dir))\r\n        } else {\r\n            return super.getTaskDefine();\r\n        }\r\n    }\r\n}\r\n"]}