{"version":3,"sources":["loaders/dynamicTaskDefine.js","loaders/dynamicTaskDefine.ts"],"names":["Object","defineProperty","exports","value","default","modules","loadConfig","option","env","loadTasks","config","lderOption","loader","dtask","dynamicTasks","generateTask","console","log","findTasks","then","tasks","concat","Promise","resolve","reject"],"mappings":"AAAA;;ACEAA,OAAAC,cAAA,CAAAC,OAAA,EAAA,YAAA,EAAA,EAAAC,OAAA,IAAA,EAAA;ADAAD,QAAQE,OAAR,GCAe,UAACC,OAAD,EAAQ;AACnB,WAAoB;AAChBC,kBADgB,sBACLC,MADK,EACgBC,GADhB,EAC+B;AAC3C,mBAAO;AACHA,qBAAKA,GADF;AAEHD,wBAAQA;AAFL,aAAP;AAIH,SANe;AAQhBE,iBARgB,qBAQNC,MARM,EAQa;AACzB,gBAAIC,aAAmCD,OAAOH,MAAP,CAAcK,MAArD;AACA,gBAAIC,QAAiB,EAArB;AACA,gBAAIF,WAAWG,YAAf,EAA6B;AACzBD,wBAAQH,OAAOK,YAAP,CAAoBJ,WAAWG,YAA/B,CAAR;AACH;AACD,gBAAIT,OAAJ,EAAa;AACTW,wBAAQC,GAAR,CAAYZ,OAAZ;AACA,uBAAOK,OAAOQ,SAAP,CAAiBb,OAAjB,EACFc,IADE,CACG,iBAAK;AACPC,4BAAQA,SAAS,EAAjB;AACA,wBAAIP,KAAJ,EAAW;AACPO,gCAAQA,MAAMC,MAAN,CAAaR,KAAb,CAAR;AACH;AACD,2BAAOO,KAAP;AACH,iBAPE,CAAP;AAQH,aAVD,MAUO,IAAIP,KAAJ,EAAW;AACd,uBAAOS,QAAQC,OAAR,CAAgBV,KAAhB,CAAP;AACH,aAFM,MAEA;AACH,uBAAOS,QAAQE,MAAR,CAAe,qBAAf,CAAP;AACH;AACJ;AA7Be,KAApB;AA+BH,CDhCD","file":"../../loaders/dynamicTaskDefine.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = (modules) => {\n    return {\n        loadConfig(option, env) {\n            return {\n                env: env,\n                option: option\n            };\n        },\n        loadTasks(config) {\n            let lderOption = config.option.loader;\n            let dtask = [];\n            if (lderOption.dynamicTasks) {\n                dtask = config.generateTask(lderOption.dynamicTasks);\n            }\n            if (modules) {\n                console.log(modules);\n                return config.findTasks(modules)\n                    .then(tasks => {\n                    tasks = tasks || [];\n                    if (dtask) {\n                        tasks = tasks.concat(dtask);\n                    }\n                    return tasks;\n                });\n            }\n            else if (dtask) {\n                return Promise.resolve(dtask);\n            }\n            else {\n                return Promise.reject('can not find tasks!');\n            }\n        }\n    };\n};\n","import { ITask, IEnvOption, ITaskOption, ITaskConfig, ITaskDefine, IDynamicLoaderOption } from 'development-core';\r\n\r\nexport default (modules) => {\r\n    return <ITaskDefine>{\r\n        loadConfig(option: ITaskOption, env: IEnvOption): ITaskConfig {\r\n            return {\r\n                env: env,\r\n                option: option\r\n            }\r\n        },\r\n\r\n        loadTasks(config: ITaskConfig): Promise<ITask[]> {\r\n            let lderOption: IDynamicLoaderOption = config.option.loader;\r\n            let dtask: ITask[] = [];\r\n            if (lderOption.dynamicTasks) {\r\n                dtask = config.generateTask(lderOption.dynamicTasks);\r\n            }\r\n            if (modules) {\r\n                console.log(modules);\r\n                return config.findTasks(modules)\r\n                    .then(tasks => {\r\n                        tasks = tasks || [];\r\n                        if (dtask) {\r\n                            tasks = tasks.concat(dtask);\r\n                        }\r\n                        return tasks;\r\n                    });\r\n            } else if (dtask) {\r\n                return Promise.resolve(dtask);\r\n            } else {\r\n                return Promise.reject('can not find tasks!');\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}