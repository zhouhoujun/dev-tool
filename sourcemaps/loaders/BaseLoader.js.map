{"version":3,"sources":["loaders/BaseLoader.js","loaders/BaseLoader.ts"],"names":["development_core_1","require","dynamicTaskDefine_1","BaseLoader","option","cfg","getTaskDefine","then","def","loadTasks","mdl","getTaskModule","findTasks","catch","console","error","err","env","loadConfig","bindingConfig","config","Promise","resolve","reject","loader","taskDefine","getConfigModule","findTaskDefineInModule","default","configModule","module","taskModule","exports"],"mappings":"AAAA;;;;;;ACCA,IAAAA,qBAAAC,QAIO,kBAJP,CAAA;AAMA;AACA,IAAAC,sBAAAD,QAA8B,qBAA9B,CAAA;;IACAE,U;AAGI,wBAAYC,MAAZ,EAA+B;AAAA;;AAC3B,aAAKA,MAAL,GAAcA,MAAd;AACH;;;;6BAEIC,G,EAAgB;AAAA;;AACjB,mBAAO,KAAKC,aAAL,GACFC,IADE,CACG,eAAG;AACL,oBAAIC,IAAIC,SAAR,EAAmB;AACf,2BAAOD,IAAIC,SAAJ,CAAcJ,GAAd,CAAP;AACH,iBAFD,MAEO;AACH,wBAAIK,MAAM,MAAKC,aAAL,EAAV;AACA,2BAAON,IAAIO,SAAJ,CAAcF,GAAd,CAAP;AACH;AACJ,aARE,EASFG,KATE,CASI,eAAG;AACNC,wBAAQC,KAAR,CAAcC,GAAd;AACH,aAXE,CAAP;AAYH;;;kCAESC,G,EAAe;AAAA;;AAErB,mBAAO,KAAKX,aAAL,GACFC,IADE,CACG,eAAG;AACL,uBAAOC,IAAIU,UAAJ,CAAe,OAAKd,MAApB,EAA4Ba,GAA5B,CAAP;AACH,aAHE,EAIFV,IAJE,CAIG,kBAAM;AACR,uBAAO,OAAKY,aAAL,CAAmBC,MAAnB,CAAP;AACH,aANE,EAOFP,KAPE,CAOI,eAAG;AACNC,wBAAQC,KAAR,CAAcC,GAAd;AACH,aATE,CAAP;AAUH;;;sCAEuBX,G,EAAgB;AACpCA,kBAAML,mBAAAmB,aAAA,CAAcd,GAAd,CAAN;AACA,mBAAOA,GAAP;AACH;;;wCAEsB;AAAA;;AACnB,mBAAO,IAAIgB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;AAC/B,oBAAIC,SAAwB,OAAKpB,MAAL,CAAYoB,MAAxC;AAEA,oBAAIA,OAAOC,UAAX,EAAuB;AACnBH,4BAAQE,OAAOC,UAAf;AACH,iBAFD,MAEO;AAAA;AACH,4BAAIf,MAAM,OAAKgB,eAAL,EAAV;AACA1B,2CAAA2B,sBAAA,CAAuBjB,GAAvB,EACKH,IADL,CACU,eAAG;AACLe,oCAAQd,GAAR;AACH,yBAHL,EAIKK,KAJL,CAIW,eAAG;AACNS,oCAAQpB,oBAAA0B,OAAA,CAAkBlB,GAAlB,CAAR;AACH,yBANL;AAFG;AASN;AACJ,aAfM,CAAP;AAgBH;;;0CAEwB;AACrB,gBAAIc,SAAwB,KAAKpB,MAAL,CAAYoB,MAAxC;AACA,mBAAOA,OAAOK,YAAP,IAAuBL,OAAOM,MAArC;AACH;;;wCAEsB;AACnB,gBAAIN,SAAwB,KAAKpB,MAAL,CAAYoB,MAAxC;AACA,mBAAOA,OAAOO,UAAP,IAAqBP,OAAOM,MAAnC;AACH;;;;;;AApEiBE,QAAA7B,UAAA,GAAUA,UAAV","file":"../../loaders/BaseLoader.js","sourcesContent":["\"use strict\";\nconst development_core_1 = require('development-core');\n// import * as chalk from 'chalk';\nconst dynamicTaskDefine_1 = require('./dynamicTaskDefine');\nclass BaseLoader {\n    constructor(option) {\n        this.option = option;\n    }\n    load(cfg) {\n        return this.getTaskDefine()\n            .then(def => {\n            if (def.loadTasks) {\n                return def.loadTasks(cfg);\n            }\n            else {\n                let mdl = this.getTaskModule();\n                return cfg.findTasks(mdl);\n            }\n        })\n            .catch(err => {\n            console.error(err);\n        });\n    }\n    loadConfg(env) {\n        return this.getTaskDefine()\n            .then(def => {\n            return def.loadConfig(this.option, env);\n        })\n            .then(config => {\n            return this.bindingConfig(config);\n        })\n            .catch(err => {\n            console.error(err);\n        });\n    }\n    bindingConfig(cfg) {\n        cfg = development_core_1.bindingConfig(cfg);\n        return cfg;\n    }\n    getTaskDefine() {\n        return new Promise((resolve, reject) => {\n            let loader = this.option.loader;\n            if (loader.taskDefine) {\n                resolve(loader.taskDefine);\n            }\n            else {\n                let mdl = this.getConfigModule();\n                development_core_1.findTaskDefineInModule(mdl)\n                    .then(def => {\n                    resolve(def);\n                })\n                    .catch(err => {\n                    resolve(dynamicTaskDefine_1.default(mdl));\n                });\n            }\n        });\n    }\n    getConfigModule() {\n        let loader = this.option.loader;\n        return loader.configModule || loader.module;\n    }\n    getTaskModule() {\n        let loader = this.option.loader;\n        return loader.taskModule || loader.module;\n    }\n}\nexports.BaseLoader = BaseLoader;\n","import * as _ from 'lodash';\r\nimport {\r\n    bindingConfig, ITask, IEnvOption\r\n    , ITaskOption, ILoaderOption, ITaskConfig, ITaskDefine\r\n    , findTaskDefineInModule\r\n} from 'development-core';\r\nimport { ITaskLoader } from '../ITaskLoader';\r\n// import * as chalk from 'chalk';\r\nimport dynamicTaskDefine from './dynamicTaskDefine';\r\nexport abstract class BaseLoader implements ITaskLoader {\r\n\r\n    protected option: ITaskOption;\r\n    constructor(option: ITaskOption) {\r\n        this.option = option;\r\n    }\r\n\r\n    load(cfg: ITaskConfig): Promise<ITask[]> {\r\n        return this.getTaskDefine()\r\n            .then(def => {\r\n                if (def.loadTasks) {\r\n                    return def.loadTasks(cfg);\r\n                } else {\r\n                    let mdl = this.getTaskModule();\r\n                    return cfg.findTasks(mdl);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n            });\r\n    }\r\n\r\n    loadConfg(env: IEnvOption): Promise<ITaskConfig> {\r\n\r\n        return this.getTaskDefine()\r\n            .then(def => {\r\n                return def.loadConfig(this.option, env);\r\n            })\r\n            .then(config => {\r\n                return this.bindingConfig(config);\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n            });\r\n    }\r\n\r\n    protected bindingConfig(cfg: ITaskConfig): ITaskConfig {\r\n        cfg = bindingConfig(cfg);\r\n        return cfg;\r\n    }\r\n\r\n    protected getTaskDefine(): Promise<ITaskDefine> {\r\n        return new Promise((resolve, reject) => {\r\n            let loader: ILoaderOption = this.option.loader;\r\n\r\n            if (loader.taskDefine) {\r\n                resolve(loader.taskDefine);\r\n            } else {\r\n                let mdl = this.getConfigModule();\r\n                findTaskDefineInModule(mdl)\r\n                    .then(def => {\r\n                        resolve(def);\r\n                    })\r\n                    .catch(err => {\r\n                        resolve(dynamicTaskDefine(mdl));\r\n                    });\r\n            }\r\n        });\r\n    }\r\n\r\n    protected getConfigModule(): string | Object {\r\n        let loader: ILoaderOption = this.option.loader;\r\n        return loader.configModule || loader.module;\r\n    }\r\n\r\n    protected getTaskModule(): string | Object {\r\n        let loader: ILoaderOption = this.option.loader;\r\n        return loader.taskModule || loader.module;\r\n    }\r\n}\r\n"]}