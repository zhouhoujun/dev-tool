{"version":3,"sources":["loaders/CustomLoader.js","loaders/CustomLoader.ts"],"names":["development_core_1","require","CustomLoader","option","loader","cfg","Promise","resolve","env","self","then","bindingConfig","config","tsdef","loadConfig","exports"],"mappings":"AAAA;;;;;;ACAA,IAAAA,qBAAAC,QAAsG,kBAAtG,CAAA;;IAGAC,Y;AAEI,0BAAoBC,MAApB,EAAiDC,MAAjD,EAAqE;AAAA;;AAAjD,aAAAD,MAAA,GAAAA,MAAA;AAA6B,aAAAC,MAAA,GAAAA,MAAA;AAChD;;;;6BAEIC,G,EAAgB;AACjB,mBAAOC,QAAQC,OAAR,CAAgB,KAAKH,MAAL,CAAYC,GAAZ,CAAhB,CAAP;AACH;;;kCAESG,G,EAAe;AACrB,gBAAIC,OAAO,IAAX;AACA,mBAAOH,QAAQC,OAAR,CAAgB;AACnBJ,wBAAQM,KAAKN,MADM;AAEnBK,qBAAKA;AAFc,aAAhB,EAIFE,IAJE,CAIG,kBAAM;AACR,uBAAOV,mBAAAW,aAAA,CAAcC,MAAd,CAAP;AACH,aANE,CAAP;AAOH;;;wCACsB;AACnB,gBAAIC,QAAqB;AACrBC,0BADqB,sBACVX,MADU,EACWK,GADX,EAC0B;AAC3C,2BAAO;AACHA,6BAAKA,GADF;AAEHL,gCAAQA;AAFL,qBAAP;AAIH;AANoB,aAAzB;AASA,mBAAOG,QAAQC,OAAR,CAAgBM,KAAhB,CAAP;AACH;;;;;;AA9BQE,QAAAb,YAAA,GAAYA,YAAZ","file":"../../loaders/CustomLoader.js","sourcesContent":["\"use strict\";\nconst development_core_1 = require('development-core');\nclass CustomLoader {\n    constructor(option, loader) {\n        this.option = option;\n        this.loader = loader;\n    }\n    load(cfg) {\n        return Promise.resolve(this.loader(cfg));\n    }\n    loadConfg(env) {\n        let self = this;\n        return Promise.resolve({\n            option: self.option,\n            env: env\n        })\n            .then(config => {\n            return development_core_1.bindingConfig(config);\n        });\n    }\n    getTaskDefine() {\n        let tsdef = {\n            loadConfig(option, env) {\n                return {\n                    env: env,\n                    option: option\n                };\n            },\n        };\n        return Promise.resolve(tsdef);\n    }\n}\nexports.CustomLoader = CustomLoader;\n","import { ITask, customLoader, IEnvOption, ITaskOption, ITaskDefine, bindingConfig, ITaskConfig } from 'development-core';\r\nimport { ITaskLoader } from '../ITaskLoader';\r\n\r\nexport class CustomLoader implements ITaskLoader {\r\n\r\n    constructor(private option: ITaskOption, private loader: customLoader) {\r\n    }\r\n\r\n    load(cfg: ITaskConfig): Promise<ITask[]> {\r\n        return Promise.resolve(this.loader(cfg))\r\n    }\r\n\r\n    loadConfg(env: IEnvOption): Promise<ITaskConfig> {\r\n        let self = this;\r\n        return Promise.resolve({\r\n            option: self.option,\r\n            env: env\r\n        })\r\n            .then(config => {\r\n                return bindingConfig(config);\r\n            });\r\n    }\r\n    protected getTaskDefine(): Promise<ITaskDefine> {\r\n        let tsdef: ITaskDefine = {\r\n            loadConfig(option: ITaskOption, env: IEnvOption): ITaskConfig {\r\n                return {\r\n                    env: env,\r\n                    option: option\r\n                }\r\n            },\r\n        }\r\n\r\n        return Promise.resolve(tsdef);\r\n    }\r\n}\r\n\r\n\r\n"]}