{"version":3,"sources":["Context.ts"],"names":[],"mappings":";;;;;;AAAA,qDAA6F;AAK7F;;;;;;;GAOG;AACH;IAA6B,2BAAW;IAEpC,qCAAqC;IACrC,iBAAY,GAAgB,EAAE,MAAqB;eAC/C,kBAAM,GAAG,EAAE,MAAM,CAAC;IACtB,CAAC;IA2IL,cAAC;AAAD,CAhJA,AAgJC,CAhJ4B,8BAAW,GAgJvC;AAhJY,0BAAO","file":"../Context.js","sourcesContent":["import { TaskContext, ITaskConfig, ITaskContext, ITask, TaskResult } from 'development-core';\r\nimport { IContext } from './IContext';\r\nimport * as _ from 'lodash';\r\nimport { Gulp } from 'gulp';\r\n\r\n/**\r\n * Context.\r\n * \r\n * @export\r\n * @class Context\r\n * @extends {TaskContext}\r\n * @implements {IContext}\r\n */\r\nexport class Context extends TaskContext implements IContext {\r\n\r\n    // private children: IContext[] = [];\r\n    constructor(cfg: ITaskConfig, parent?: ITaskContext) {\r\n        super(cfg, parent);\r\n    }\r\n\r\n    // /**\r\n    //  * add sub IContext\r\n    //  * \r\n    //  * @param {IContext} context\r\n    //  * \r\n    //  * @memberOf IContext\r\n    //  */\r\n    // add(context: IContext): void {\r\n    //     context.parent = this;\r\n    //     this.children.push(context);\r\n    // }\r\n    // /**\r\n    //  * remove sub IContext.\r\n    //  * \r\n    //  * @param {IContext} [context]\r\n    //  * \r\n    //  * @memberOf IContext\r\n    //  */\r\n    // remove(context?: IContext): IContext[] {\r\n    //     let items = _.remove(this.children, context);\r\n    //     _.each(items, i => {\r\n    //         if (i) {\r\n    //             i.parent = null;\r\n    //         }\r\n    //     });\r\n    //     return items;\r\n    // }\r\n\r\n    // /**\r\n    //  * find sub context via express.\r\n    //  * \r\n    //  * @param {(IContext | ((item: IContext) => boolean))} express\r\n    //  * @param {string} [mode] {enum:['route','children', traverse']} default traverse.\r\n    //  * @returns {IContext}\r\n    //  * \r\n    //  * @memberOf IContext\r\n    //  */\r\n    // find(express: IContext | ((item: IContext) => boolean), mode?: string): IContext {\r\n    //     let context: IContext;\r\n    //     this.each(item => {\r\n    //         if (context) {\r\n    //             return false;\r\n    //         }\r\n    //         let isFinded = _.isFunction(express) ? express(item) : (<IContext>express) === item;\r\n    //         if (isFinded) {\r\n    //             context = item;\r\n    //             return false;\r\n    //         }\r\n    //         return true;\r\n    //     }, mode);\r\n    //     return context;\r\n    // }\r\n\r\n    // /**\r\n    //  * filter items.\r\n    //  * \r\n    //  * @param {(((item: IContext) => void | boolean))} express\r\n    //  * @param {string} [mode] {enum:['route','children', traverse']} default traverse.\r\n    //  * @returns {IContext[]}\r\n    //  * \r\n    //  * @memberOf IContext\r\n    //  */\r\n    // filter(express: ((item: IContext) => void | boolean), mode?: string): IContext[] {\r\n    //     let contexts: IContext[] = [];\r\n    //     this.each(item => {\r\n    //         if (express(item)) {\r\n    //             contexts.push(item);\r\n    //         }\r\n    //     }, mode);\r\n    //     return contexts;\r\n    // }\r\n    // /**\r\n    //  * find parent context via express.\r\n    //  * \r\n    //  * @param {(IContext | ((item: IContext) => boolean))} express\r\n    //  * @param {string} [mode] {enum:['route','children', traverse']} default traverse.\r\n    //  * \r\n    //  * @memberOf IContext\r\n    //  */\r\n    // each(express: ((item: IContext) => void | boolean), mode?: string) {\r\n    //     mode = mode || '';\r\n    //     let r;\r\n    //     switch (mode) {\r\n    //         case 'route':\r\n    //             r = this.route(express);\r\n    //             break;\r\n    //         case 'children':\r\n    //             r = this.eachChildren(express);\r\n    //             break;\r\n\r\n    //         case 'traverse':\r\n    //             r = this.trans(express);\r\n    //             break;\r\n    //         default:\r\n    //             r = this.trans(express);\r\n    //             break;\r\n    //     }\r\n    //     return r;\r\n    // }\r\n\r\n    // eachChildren(express: ((item: IContext) => void | boolean)) {\r\n    //     _.each(this.children, item => {\r\n    //         return express(item);\r\n    //     });\r\n    // }\r\n\r\n    // /**\r\n    //  * do express work in routing.\r\n    //  * \r\n    //  * @param {(((item: IContext) => void | boolean))} express\r\n    //  * \r\n    //  * @memberOf IContext\r\n    //  */\r\n    // route(express: ((item: IContext) => void | boolean)) {\r\n    //     if (!express(this)) {\r\n    //         return false;\r\n    //     };\r\n    //     if (this.parent && this.parent['route']) {\r\n    //         return (<IContext>this.parent).route(express);\r\n    //     }\r\n    // }\r\n    // /**\r\n    //  * translate all sub context to do express work.\r\n    //  * \r\n    //  * @param {(((item: IContext) => void | boolean))} express\r\n    //  * \r\n    //  * @memberOf IContext\r\n    //  */\r\n    // trans(express: ((item: IContext) => void | boolean)) {\r\n    //     if (express(this) === false) {\r\n    //         return false;\r\n    //     }\r\n    //     _.each(this.children, item => {\r\n    //         return item.trans(express);\r\n    //     });\r\n    //     return true;\r\n    // }\r\n}\r\n"]}