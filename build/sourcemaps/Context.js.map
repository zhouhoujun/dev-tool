{"version":3,"sources":["Context.js","Context.ts"],"names":["development_core_1","require","_","Context","cfg","parent","children","context","push","items","remove","each","i","express","mode","isFinded","isFunction","item","contexts","r","route","eachChildren","trans","TaskContext","exports"],"mappings":"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","file":"../Context.js","sourcesContent":["\"use strict\";\nconst development_core_1 = require('development-core');\nconst _ = require('lodash');\n/**\n * Context.\n *\n * @export\n * @class Context\n * @extends {TaskContext}\n * @implements {IContext}\n */\nclass Context extends development_core_1.TaskContext {\n    constructor(cfg, parent) {\n        super(cfg, parent);\n        this.children = [];\n    }\n    /**\n     * add sub IContext\n     *\n     * @param {IContext} context\n     *\n     * @memberOf IContext\n     */\n    add(context) {\n        context.parent = this;\n        this.children.push(context);\n    }\n    /**\n     * remove sub IContext.\n     *\n     * @param {IContext} [context]\n     *\n     * @memberOf IContext\n     */\n    remove(context) {\n        let items = _.remove(this.children, context);\n        _.each(items, i => {\n            if (i) {\n                i.parent = null;\n            }\n        });\n        return items;\n    }\n    /**\n     * find sub context via express.\n     *\n     * @param {(IContext | ((item: IContext) => boolean))} express\n     * @param {string} [mode] {enum:['route','children', traverse']} default traverse.\n     * @returns {IContext}\n     *\n     * @memberOf IContext\n     */\n    find(express, mode) {\n        let context;\n        this.each(item => {\n            if (context) {\n                return false;\n            }\n            let isFinded = _.isFunction(express) ? express(item) : express === item;\n            if (isFinded) {\n                context = item;\n                return false;\n            }\n            return true;\n        }, mode);\n        return context;\n    }\n    /**\n     * filter items.\n     *\n     * @param {(((item: IContext) => void | boolean))} express\n     * @param {string} [mode] {enum:['route','children', traverse']} default traverse.\n     * @returns {IContext[]}\n     *\n     * @memberOf IContext\n     */\n    filter(express, mode) {\n        let contexts = [];\n        this.each(item => {\n            if (express(item)) {\n                contexts.push(item);\n            }\n        }, mode);\n        return contexts;\n    }\n    /**\n     * find parent context via express.\n     *\n     * @param {(IContext | ((item: IContext) => boolean))} express\n     * @param {string} [mode] {enum:['route','children', traverse']} default traverse.\n     *\n     * @memberOf IContext\n     */\n    each(express, mode) {\n        mode = mode || '';\n        let r;\n        switch (mode) {\n            case 'route':\n                r = this.route(express);\n                break;\n            case 'children':\n                r = this.eachChildren(express);\n                break;\n            case 'traverse':\n                r = this.trans(express);\n                break;\n            default:\n                r = this.trans(express);\n                break;\n        }\n        return r;\n    }\n    eachChildren(express) {\n        _.each(this.children, item => {\n            return express(item);\n        });\n    }\n    /**\n     * do express work in routing.\n     *\n     * @param {(((item: IContext) => void | boolean))} express\n     *\n     * @memberOf IContext\n     */\n    route(express) {\n        if (!express(this)) {\n            return false;\n        }\n        ;\n        if (this.parent && this.parent['route']) {\n            return this.parent.route(express);\n        }\n    }\n    /**\n     * translate all sub context to do express work.\n     *\n     * @param {(((item: IContext) => void | boolean))} express\n     *\n     * @memberOf IContext\n     */\n    trans(express) {\n        if (express(this) === false) {\n            return false;\n        }\n        _.each(this.children, item => {\n            return item.trans(express);\n        });\n        return true;\n    }\n}\nexports.Context = Context;\n","import { TaskContext, ITaskConfig, ITaskContext } from 'development-core';\r\nimport { IContext } from './IContext';\r\nimport * as _ from 'lodash';\r\n\r\n/**\r\n * Context.\r\n * \r\n * @export\r\n * @class Context\r\n * @extends {TaskContext}\r\n * @implements {IContext}\r\n */\r\nexport class Context extends TaskContext implements IContext {\r\n\r\n    private children: IContext[] = [];\r\n    constructor(cfg: ITaskConfig, parent?: ITaskContext) {\r\n        super(cfg, parent);\r\n    }\r\n\r\n    /**\r\n     * add sub IContext\r\n     * \r\n     * @param {IContext} context\r\n     * \r\n     * @memberOf IContext\r\n     */\r\n    add(context: IContext): void {\r\n        context.parent = this;\r\n        this.children.push(context);\r\n    }\r\n    /**\r\n     * remove sub IContext.\r\n     * \r\n     * @param {IContext} [context]\r\n     * \r\n     * @memberOf IContext\r\n     */\r\n    remove(context?: IContext): IContext[] {\r\n        let items = _.remove(this.children, context);\r\n        _.each(items, i => {\r\n            if (i) {\r\n                i.parent = null;\r\n            }\r\n        });\r\n        return items;\r\n    }\r\n\r\n    /**\r\n     * find sub context via express.\r\n     * \r\n     * @param {(IContext | ((item: IContext) => boolean))} express\r\n     * @param {string} [mode] {enum:['route','children', traverse']} default traverse.\r\n     * @returns {IContext}\r\n     * \r\n     * @memberOf IContext\r\n     */\r\n    find(express: IContext | ((item: IContext) => boolean), mode?: string): IContext {\r\n        let context: IContext;\r\n        this.each(item => {\r\n            if (context) {\r\n                return false;\r\n            }\r\n            let isFinded = _.isFunction(express) ? express(item) : (<IContext>express) === item;\r\n            if (isFinded) {\r\n                context = item;\r\n                return false;\r\n            }\r\n            return true;\r\n        }, mode);\r\n        return context;\r\n    }\r\n\r\n    /**\r\n     * filter items.\r\n     * \r\n     * @param {(((item: IContext) => void | boolean))} express\r\n     * @param {string} [mode] {enum:['route','children', traverse']} default traverse.\r\n     * @returns {IContext[]}\r\n     * \r\n     * @memberOf IContext\r\n     */\r\n    filter(express: ((item: IContext) => void | boolean), mode?: string): IContext[] {\r\n        let contexts: IContext[] = [];\r\n        this.each(item => {\r\n            if (express(item)) {\r\n                contexts.push(item);\r\n            }\r\n        }, mode);\r\n        return contexts;\r\n    }\r\n    /**\r\n     * find parent context via express.\r\n     * \r\n     * @param {(IContext | ((item: IContext) => boolean))} express\r\n     * @param {string} [mode] {enum:['route','children', traverse']} default traverse.\r\n     * \r\n     * @memberOf IContext\r\n     */\r\n    each(express: ((item: IContext) => void | boolean), mode?: string) {\r\n        mode = mode || '';\r\n        let r;\r\n        switch (mode) {\r\n            case 'route':\r\n                r = this.route(express);\r\n                break;\r\n            case 'children':\r\n                r = this.eachChildren(express);\r\n                break;\r\n\r\n            case 'traverse':\r\n                r = this.trans(express);\r\n                break;\r\n            default:\r\n                r = this.trans(express);\r\n                break;\r\n        }\r\n        return r;\r\n    }\r\n\r\n    eachChildren(express: ((item: IContext) => void | boolean)) {\r\n        _.each(this.children, item => {\r\n            return express(item);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * do express work in routing.\r\n     * \r\n     * @param {(((item: IContext) => void | boolean))} express\r\n     * \r\n     * @memberOf IContext\r\n     */\r\n    route(express: ((item: IContext) => void | boolean)) {\r\n        if (!express(this)) {\r\n            return false;\r\n        };\r\n        if (this.parent && this.parent['route']) {\r\n            return (<IContext>this.parent).route(express);\r\n        }\r\n    }\r\n    /**\r\n     * translate all sub context to do express work.\r\n     * \r\n     * @param {(((item: IContext) => void | boolean))} express\r\n     * \r\n     * @memberOf IContext\r\n     */\r\n    trans(express: ((item: IContext) => void | boolean)) {\r\n        if (express(this) === false) {\r\n            return false;\r\n        }\r\n        _.each(this.children, item => {\r\n            return item.trans(express);\r\n        });\r\n        return true;\r\n    }\r\n}\r\n"]}