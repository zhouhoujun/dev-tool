{"version":3,"sources":["loaderFactory.js","loaderFactory.ts"],"names":["DirLoader_1","require","ModuleLoader_1","DynamicLoader_1","CustomLoader_1","_","chalk","LoaderFactory","option","env","factory","isString","loader","module","ModuleLoader","isFunction","CustomLoader","isArray","dynamicTasks","DynamicLoader","DirLoader","loderOption","type","console","log","cyan","name","yellow","exports"],"mappings":"AAAA;;;;;;ACCA,IAAAA,cAAAC,QAA0B,qBAA1B,CAAA;AAIA,IAAAC,iBAAAD,QAA6B,wBAA7B,CAAA;AACA,IAAAE,kBAAAF,QAA8B,yBAA9B,CAAA;AACA,IAAAG,iBAAAH,QAA6B,wBAA7B,CAAA;AACA,IAAYI,IAACJ,QAAM,QAAN,CAAb;AACA,IAAYK,QAAKL,QAAM,OAAN,CAAjB;AAuBA;;;;;;;;IAOAM,a;AAEI,6BAAA;AAAA;AACC;;;;+BACMC,M,EAAqBC,G,EAAkBC,O,EAAwB;AAElE,gBAAIL,EAAEM,QAAF,CAAWH,OAAOI,MAAlB,CAAJ,EAA+B;AAC3BJ,uBAAOI,MAAP,GAAgB;AACZC,4BAAQL,OAAOI;AADH,iBAAhB;AAGA,uBAAO,IAAIV,eAAAY,YAAJ,CAAiBN,MAAjB,EAAyBC,GAAzB,EAA8BC,OAA9B,CAAP;AACH,aALD,MAKO,IAAIL,EAAEU,UAAF,CAAaP,OAAOI,MAApB,CAAJ,EAAiC;AACpC,uBAAO,IAAIR,eAAAY,YAAJ,CAAiBR,MAAjB,EAAyBA,OAAOI,MAAhC,EAAwCF,OAAxC,CAAP;AACH,aAFM,MAEA,IAAIL,EAAEY,OAAF,CAAUT,OAAOI,MAAjB,CAAJ,EAA8B;AACjCJ,uBAAOI,MAAP,GAAsC;AAClCM,kCAAcV,OAAOI,MAAP,IAAiB;AADG,iBAAtC;AAGA,uBAAO,IAAIT,gBAAAgB,aAAJ,CAAkBX,MAAlB,EAA0BC,GAA1B,EAA+BC,OAA/B,CAAP;AACH,aALM,MAKA,IAAIF,OAAOI,MAAX,EAAmB;AACtB;AACA,oBAAIJ,OAAOI,MAAP,CAAc,KAAd,CAAJ,EAA0B;AACtB,2BAAO,IAAIZ,YAAAoB,SAAJ,CAAcZ,MAAd,EAAsBC,GAAtB,CAAP;AACH;AAED;AACA,oBAAIJ,EAAEM,QAAF,CAAWH,OAAOI,MAAP,CAAc,MAAd,CAAX,CAAJ,EAAuC;AACnCJ,2BAAOI,MAAP,GAAsC;AAClCM,sCAAcV,OAAOI;AADa,qBAAtC;AAGA,2BAAO,IAAIT,gBAAAgB,aAAJ,CAAkBX,MAAlB,EAA0BC,GAA1B,EAA+BC,OAA/B,CAAP;AACH;AAED;AACA,oBAAIF,OAAOI,MAAP,CAAc,cAAd,CAAJ,EAAmC;AAC/B,2BAAO,IAAIT,gBAAAgB,aAAJ,CAAkBX,MAAlB,CAAP;AACH;AAED,oBAAII,SAAsB,IAA1B;AACA,oBAAIS,cAA6Bb,OAAOI,MAAxC;AACA,wBAAQS,YAAYC,IAApB;AACI,yBAAK,KAAL;AACIV,iCAAS,IAAIZ,YAAAoB,SAAJ,CAAcZ,MAAd,EAAsBC,GAAtB,EAA2BC,OAA3B,CAAT;AACA;AAEJ,yBAAK,SAAL;AACIE,iCAAS,IAAIT,gBAAAgB,aAAJ,CAAkBX,MAAlB,EAA0BC,GAA1B,EAA+BC,OAA/B,CAAT;AACA;AAEJ,yBAAK,QAAL;AACA;AACIE,iCAAS,IAAIV,eAAAY,YAAJ,CAAiBN,MAAjB,EAAyBC,GAAzB,EAA8BC,OAA9B,CAAT;AACA;AAZR;AAcA,uBAAOE,MAAP;AACH,aApCM,MAoCA;AACHW,wBAAQC,GAAR,CAAYlB,MAAMmB,IAAN,CAAmBjB,OAAOkB,IAA1B,CAAZ,EAA6CpB,MAAMqB,MAAN,CAAa,yCAAb,CAA7C;AACAnB,uBAAOI,MAAP,GAAsC;AAClCM,kCAAc;AADoB,iBAAtC;AAGA,uBAAO,IAAIf,gBAAAgB,aAAJ,CAAkBX,MAAlB,EAA0BC,GAA1B,EAA+BC,OAA/B,CAAP;AACH;AACJ;;;;;;AA7DQkB,QAAArB,aAAA,GAAaA,aAAb","file":"../loaderFactory.js","sourcesContent":["\"use strict\";\nconst DirLoader_1 = require('./loaders/DirLoader');\nconst ModuleLoader_1 = require('./loaders/ModuleLoader');\nconst DynamicLoader_1 = require('./loaders/DynamicLoader');\nconst CustomLoader_1 = require('./loaders/CustomLoader');\nconst _ = require('lodash');\nconst chalk = require('chalk');\n/**\n * loader factory.\n *\n * @export\n * @class LoaderFactory\n * @implements {ILoaderFactory}\n */\nclass LoaderFactory {\n    constructor() {\n    }\n    create(option, env, factory) {\n        if (_.isString(option.loader)) {\n            option.loader = {\n                module: option.loader\n            };\n            return new ModuleLoader_1.ModuleLoader(option, env, factory);\n        }\n        else if (_.isFunction(option.loader)) {\n            return new CustomLoader_1.CustomLoader(option, option.loader, factory);\n        }\n        else if (_.isArray(option.loader)) {\n            option.loader = {\n                dynamicTasks: option.loader || []\n            };\n            return new DynamicLoader_1.DynamicLoader(option, env, factory);\n        }\n        else if (option.loader) {\n            // if config dir.\n            if (option.loader['dir']) {\n                return new DirLoader_1.DirLoader(option, env);\n            }\n            // dynamic task name.\n            if (_.isString(option.loader['name'])) {\n                option.loader = {\n                    dynamicTasks: option.loader\n                };\n                return new DynamicLoader_1.DynamicLoader(option, env, factory);\n            }\n            // if config pipe and taskName.\n            if (option.loader['dynamicTasks']) {\n                return new DynamicLoader_1.DynamicLoader(option);\n            }\n            let loader = null;\n            let loderOption = option.loader;\n            switch (loderOption.type) {\n                case 'dir':\n                    loader = new DirLoader_1.DirLoader(option, env, factory);\n                    break;\n                case 'dynamic':\n                    loader = new DynamicLoader_1.DynamicLoader(option, env, factory);\n                    break;\n                case 'module':\n                default:\n                    loader = new ModuleLoader_1.ModuleLoader(option, env, factory);\n                    break;\n            }\n            return loader;\n        }\n        else {\n            console.log(chalk.cyan(option.name), chalk.yellow('loader not setting, use dynamic loader.'));\n            option.loader = {\n                dynamicTasks: []\n            };\n            return new DynamicLoader_1.DynamicLoader(option, env, factory);\n        }\n    }\n}\nexports.LoaderFactory = LoaderFactory;\n","import { ITaskLoader } from './ITaskLoader';\r\nimport { DirLoader } from './loaders/DirLoader';\r\nimport { IEnvOption } from 'development-core';\r\n\r\nimport { ITaskOption, ILoaderOption, IDynamicLoaderOption, contextFactory } from './TaskOption'\r\nimport { ModuleLoader } from './loaders/ModuleLoader';\r\nimport { DynamicLoader } from './loaders/DynamicLoader';\r\nimport { CustomLoader } from './loaders/CustomLoader';\r\nimport * as _ from 'lodash';\r\nimport * as chalk from 'chalk';\r\n\r\n/**\r\n * loader factory.\r\n * \r\n * @export\r\n * @interface ILoaderFactory\r\n */\r\nexport interface ILoaderFactory {\r\n    /**\r\n     * create loader.\r\n     * \r\n     * @param {ITaskOption} option\r\n     * @param {IEnvOption} [env]\r\n     * @param {contextFactory} [factory]\r\n     * @returns {ITaskLoader}\r\n     * \r\n     * @memberOf ILoaderFactory\r\n     */\r\n    create(option: ITaskOption, env?: IEnvOption, factory?: contextFactory): ITaskLoader;\r\n}\r\n\r\n\r\n/**\r\n * loader factory.\r\n * \r\n * @export\r\n * @class LoaderFactory\r\n * @implements {ILoaderFactory}\r\n */\r\nexport class LoaderFactory implements ILoaderFactory {\r\n\r\n    constructor() {\r\n    }\r\n    create(option: ITaskOption, env?: IEnvOption, factory?: contextFactory): ITaskLoader {\r\n\r\n        if (_.isString(option.loader)) {\r\n            option.loader = {\r\n                module: option.loader\r\n            };\r\n            return new ModuleLoader(option, env, factory);\r\n        } else if (_.isFunction(option.loader)) {\r\n            return new CustomLoader(option, option.loader, factory);\r\n        } else if (_.isArray(option.loader)) {\r\n            option.loader = <IDynamicLoaderOption>{\r\n                dynamicTasks: option.loader || []\r\n            };\r\n            return new DynamicLoader(option, env, factory);\r\n        } else if (option.loader) {\r\n            // if config dir.\r\n            if (option.loader['dir']) {\r\n                return new DirLoader(option, env);\r\n            }\r\n\r\n            // dynamic task name.\r\n            if (_.isString(option.loader['name'])) {\r\n                option.loader = <IDynamicLoaderOption>{\r\n                    dynamicTasks: option.loader\r\n                };\r\n                return new DynamicLoader(option, env, factory);\r\n            }\r\n\r\n            // if config pipe and taskName.\r\n            if (option.loader['dynamicTasks']) {\r\n                return new DynamicLoader(option);\r\n            }\r\n\r\n            let loader: ITaskLoader = null;\r\n            let loderOption: ILoaderOption = option.loader;\r\n            switch (loderOption.type) {\r\n                case 'dir':\r\n                    loader = new DirLoader(option, env, factory);\r\n                    break;\r\n\r\n                case 'dynamic':\r\n                    loader = new DynamicLoader(option, env, factory);\r\n                    break;\r\n\r\n                case 'module':\r\n                default:\r\n                    loader = new ModuleLoader(option, env, factory);\r\n                    break;\r\n            }\r\n            return loader;\r\n        } else {\r\n            console.log(chalk.cyan(<string>option.name), chalk.yellow('loader not setting, use dynamic loader.'))\r\n            option.loader = <IDynamicLoaderOption>{\r\n                dynamicTasks: []\r\n            };\r\n            return new DynamicLoader(option, env, factory);\r\n        }\r\n    }\r\n}\r\n"]}