{"version":3,"sources":["utils/contextDefine.js","utils/contextDefine.ts"],"names":["development_core_1","require","Object","defineProperty","exports","value","default","modules","getContext","config","bindingConfig","tasks","context","lderOption","option","loader","dtask","dynamicTasks","generateTask","findTasks","then","concat","Promise","resolve","reject"],"mappings":"AAAA;;ACAA,IAAAA,qBAAAC,QAAiF,kBAAjF,CAAA;AAGAC,OAAAC,cAAA,CAAAC,OAAA,EAAA,YAAA,EAAA,EAAAC,OAAA,IAAA,EAAA;ADAAD,QAAQE,OAAR,GCAe,UAACC,OAAD,EAAQ;AACnB,WAAuB;AACnBC,kBADmB,sBACRC,MADQ,EACW;AAC1B,mBAAOT,mBAAAU,aAAA,CAAcD,MAAd,CAAP;AACH,SAHkB;AAKnBE,aALmB,iBAKbC,OALa,EAKQ;AACvB,gBAAIC,aAAmDD,QAAQE,MAAR,CAAgBC,MAAvE;AACA,gBAAIC,QAAiB,EAArB;AACA,gBAAIH,WAAWI,YAAf,EAA6B;AACzBD,wBAAQJ,QAAQM,YAAR,CAAqBL,WAAWI,YAAhC,CAAR;AACH;AACD,gBAAIV,OAAJ,EAAa;AACT;AACA,uBAAOK,QAAQO,SAAR,CAAkBZ,OAAlB,EACFa,IADE,CACG,iBAAK;AACPT,4BAAQA,SAAS,EAAjB;AACA,wBAAIK,KAAJ,EAAW;AACPL,gCAAQA,MAAMU,MAAN,CAAaL,KAAb,CAAR;AACH;AACD,2BAAOL,KAAP;AACH,iBAPE,CAAP;AAQH,aAVD,MAUO,IAAIK,KAAJ,EAAW;AACd,uBAAOM,QAAQC,OAAR,CAAgBP,KAAhB,CAAP;AACH,aAFM,MAEA;AACH,uBAAOM,QAAQE,MAAR,CAAe,qBAAf,CAAP;AACH;AACJ;AA1BkB,KAAvB;AA4BH,CD7BD","file":"../../utils/contextDefine.js","sourcesContent":["\"use strict\";\nconst development_core_1 = require('development-core');\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = (modules) => {\n    return {\n        getContext(config) {\n            return development_core_1.bindingConfig(config);\n        },\n        tasks(context) {\n            let lderOption = context.option.loader;\n            let dtask = [];\n            if (lderOption.dynamicTasks) {\n                dtask = context.generateTask(lderOption.dynamicTasks);\n            }\n            if (modules) {\n                // console.log(modules);\n                return context.findTasks(modules)\n                    .then(tasks => {\n                    tasks = tasks || [];\n                    if (dtask) {\n                        tasks = tasks.concat(dtask);\n                    }\n                    return tasks;\n                });\n            }\n            else if (dtask) {\n                return Promise.resolve(dtask);\n            }\n            else {\n                return Promise.reject('can not find tasks!');\n            }\n        }\n    };\n};\n","import { bindingConfig, ITask, ITaskConfig, ITaskContext, IContextDefine, } from 'development-core';\r\nimport { IDynamicLoaderOption, IAssertOption } from '../TaskOption';\r\n\r\nexport default (modules) => {\r\n    return <IContextDefine>{\r\n        getContext(config: ITaskConfig): ITaskContext {\r\n            return bindingConfig(config);\r\n        },\r\n\r\n        tasks(context: ITaskContext): Promise<ITask[]> {\r\n            let lderOption: IDynamicLoaderOption = (<IAssertOption>context.option).loader;\r\n            let dtask: ITask[] = [];\r\n            if (lderOption.dynamicTasks) {\r\n                dtask = context.generateTask(lderOption.dynamicTasks);\r\n            }\r\n            if (modules) {\r\n                // console.log(modules);\r\n                return context.findTasks(modules)\r\n                    .then(tasks => {\r\n                        tasks = tasks || [];\r\n                        if (dtask) {\r\n                            tasks = tasks.concat(dtask);\r\n                        }\r\n                        return tasks;\r\n                    });\r\n            } else if (dtask) {\r\n                return Promise.resolve(dtask);\r\n            } else {\r\n                return Promise.reject('can not find tasks!');\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}