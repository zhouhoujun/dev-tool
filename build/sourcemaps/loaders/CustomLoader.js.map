{"version":3,"sources":["loaders/CustomLoader.ts"],"names":[],"mappings":";AAAA,qDAA+F;AAK/F;IAEI,sBAAoB,MAAmB,EAAU,MAAoB,EAAU,OAAmE;QAA9H,WAAM,GAAN,MAAM,CAAa;QAAU,WAAM,GAAN,MAAM,CAAc;QAAU,YAAO,GAAP,OAAO,CAA4D;IAElJ,CAAC;IAED,2BAAI,GAAJ,UAAK,OAAqB;QACtB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;IACjD,CAAC;IAGD,kCAAW,GAAX,UAAY,GAAe;QACvB,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,OAAO,CAAC,OAAO,CAC9B,gCAAa,CAAC;YACpB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,GAAG,EAAE,GAAG;YACR,aAAa,EAAE,IAAI,CAAC,OAAO;SAC9B,CAAC,CAAC,CAAC;QAER,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IACL,mBAAC;AAAD,CAtBA,AAsBC,IAAA;AAtBY,oCAAY","file":"../../loaders/CustomLoader.js","sourcesContent":["import { ITask, IEnvOption, ITaskContext, bindingConfig, ITaskConfig } from 'development-core';\r\nimport { ITaskOption, customLoader } from '../TaskOption';\r\nimport { IContext } from '../IContext';\r\nimport { ITaskLoader } from '../ITaskLoader';\r\n\r\nexport class CustomLoader implements ITaskLoader {\r\n\r\n    constructor(private option: ITaskOption, private loader: customLoader, private factory?: (cfg: ITaskConfig, parent?: ITaskContext) => ITaskContext) {\r\n\r\n    }\r\n\r\n    load(context: ITaskContext): Promise<ITask[]> {\r\n        return Promise.resolve(this.loader(context));\r\n    }\r\n\r\n    private condef: Promise<IContext>;\r\n    loadContext(env: IEnvOption): Promise<IContext> {\r\n        let self = this;\r\n        this.condef = this.condef || Promise.resolve(\r\n            <IContext>bindingConfig({\r\n                option: self.option,\r\n                env: env,\r\n                createContext: self.factory\r\n            }));\r\n\r\n        return this.condef;\r\n    }\r\n}\r\n"]}