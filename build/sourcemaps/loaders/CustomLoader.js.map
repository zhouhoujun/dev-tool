{"version":3,"sources":["loaders/CustomLoader.js","loaders/CustomLoader.ts"],"names":["development_core_1","require","CustomLoader","option","loader","factory","context","Promise","resolve","env","self","condef","bindingConfig","createContext","exports"],"mappings":"AAAA;;;;;;ACAA,IAAAA,qBAAAC,QAA4E,kBAA5E,CAAA;;IAKAC,Y;AAEI,0BAAoBC,MAApB,EAAiDC,MAAjD,EAA+EC,OAA/E,EAAkJ;AAAA;;AAA9H,aAAAF,MAAA,GAAAA,MAAA;AAA6B,aAAAC,MAAA,GAAAA,MAAA;AAA8B,aAAAC,OAAA,GAAAA,OAAA;AAE9E;;;;6BAEIC,O,EAAqB;AACtB,mBAAOC,QAAQC,OAAR,CAAgB,KAAKJ,MAAL,CAAYE,OAAZ,CAAhB,CAAP;AACH;;;oCAGWG,G,EAAe;AACvB,gBAAIC,OAAO,IAAX;AACA,iBAAKC,MAAL,GAAc,KAAKA,MAAL,IAAeJ,QAAQC,OAAR,CACfR,mBAAAY,aAAA,CAAc;AACpBT,wBAAQO,KAAKP,MADO;AAEpBM,qBAAKA,GAFe;AAGpBI,+BAAeH,KAAKL;AAHA,aAAd,CADe,CAA7B;AAOA,mBAAO,KAAKM,MAAZ;AACH;;;;;;AArBQG,QAAAZ,YAAA,GAAYA,YAAZ","file":"../../loaders/CustomLoader.js","sourcesContent":["\"use strict\";\nconst development_core_1 = require('development-core');\nclass CustomLoader {\n    constructor(option, loader, factory) {\n        this.option = option;\n        this.loader = loader;\n        this.factory = factory;\n    }\n    load(context) {\n        return Promise.resolve(this.loader(context));\n    }\n    loadContext(env) {\n        let self = this;\n        this.condef = this.condef || Promise.resolve(development_core_1.bindingConfig({\n            option: self.option,\n            env: env,\n            createContext: self.factory\n        }));\n        return this.condef;\n    }\n}\nexports.CustomLoader = CustomLoader;\n","import { ITask, IEnvOption, ITaskContext, bindingConfig, ITaskConfig } from 'development-core';\r\nimport { ITaskOption, customLoader } from '../TaskOption';\r\nimport { IContext } from '../IContext';\r\nimport { ITaskLoader } from '../ITaskLoader';\r\n\r\nexport class CustomLoader implements ITaskLoader {\r\n\r\n    constructor(private option: ITaskOption, private loader: customLoader, private factory?: (cfg: ITaskConfig, parent?: ITaskContext) => ITaskContext) {\r\n\r\n    }\r\n\r\n    load(context: ITaskContext): Promise<ITask[]> {\r\n        return Promise.resolve(this.loader(context));\r\n    }\r\n\r\n    private condef: Promise<IContext>;\r\n    loadContext(env: IEnvOption): Promise<IContext> {\r\n        let self = this;\r\n        this.condef = this.condef || Promise.resolve(\r\n            <IContext>bindingConfig({\r\n                option: self.option,\r\n                env: env,\r\n                createContext: self.factory\r\n            }));\r\n\r\n        return this.condef;\r\n    }\r\n}\r\n"]}