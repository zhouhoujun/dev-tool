{"version":3,"sources":["loaders/BaseLoader.js","loaders/BaseLoader.ts"],"names":["BaseLoader","option","env","factory","context","contextDef","then","loadTasks","def","catch","console","error","err","self","getContext","createContext","tasks","mdl","getTaskModule","findTasks","loader","configModule","module","taskModule","_contextDef","Promise","resolve","getContextDefine","exports"],"mappings":"AAAA;;;;;;ICMAA,U;AAEI,wBAAsBC,MAAtB,EAAqDC,GAArD,EAAiFC,OAAjF,EAAoJ;AAAA;;AAA9H,aAAAF,MAAA,GAAAA,MAAA;AAA+B,aAAAC,GAAA,GAAAA,GAAA;AAA4B,aAAAC,OAAA,GAAAA,OAAA;AAEhF;;;;6BAEIC,O,EAAiB;AAAA;;AAClB,mBAAO,KAAKC,UAAL,CACFC,IADE,CACG,eAAG;AACL,uBAAO,MAAKC,SAAL,CAAeH,OAAf,EAAwBI,GAAxB,CAAP;AACH,aAHE,EAIFC,KAJE,CAII,eAAG;AACNC,wBAAQC,KAAR,CAAcC,GAAd;AACH,aANE,CAAP;AAOH;;;oCAEWV,G,EAAe;AACvB,iBAAKA,GAAL,GAAWA,GAAX;AACA,gBAAIW,OAAO,IAAX;AACA,mBAAO,KAAKR,UAAL,CACFC,IADE,CACG,eAAG;AACL,uBAAiBE,IAAIM,UAAJ,CAAe;AAC5Bb,4BAAQY,KAAKZ,MADe;AAE5BC,yBAAKA,GAFuB;AAG5Ba,mCAAeF,KAAKV;AAHQ,iBAAf,CAAjB;AAKH,aAPE,EAQFM,KARE,CAQI,eAAG;AACNC,wBAAQC,KAAR,CAAcC,GAAd;AACH,aAVE,CAAP;AAWH;;;kCAYmBR,O,EAAuBI,G,EAAmB;AAC1D,gBAAIA,IAAIQ,KAAR,EAAe;AACX,uBAAOR,IAAIQ,KAAJ,CAAUZ,OAAV,CAAP;AACH,aAFD,MAEO;AACH,oBAAIa,MAAM,KAAKC,aAAL,EAAV;AACA,uBAAOd,QAAQe,SAAR,CAAkBF,GAAlB,CAAP;AACH;AACJ;;;0CAIwB;AACrB,gBAAIG,SAAwB,KAAKnB,MAAL,CAAYmB,MAAxC;AACA,mBAAOA,OAAOC,YAAP,IAAuBD,OAAOE,MAArC;AACH;;;wCAEsB;AACnB,gBAAIF,SAAwB,KAAKnB,MAAL,CAAYmB,MAAxC;AACA,mBAAOA,OAAOG,UAAP,IAAqBH,OAAOE,MAAnC;AACH;;;4BA5BuB;AACpB,gBAAI,CAAC,KAAKE,WAAV,EAAuB;AACnB,qBAAKA,WAAL,GAAmBC,QAAQC,OAAR,CAAgB,KAAKC,gBAAL,EAAhB,CAAnB;AACH;AAED,mBAAO,KAAKH,WAAZ;AACH;;;;;;AAvCiBI,QAAA5B,UAAA,GAAUA,UAAV","file":"../../loaders/BaseLoader.js","sourcesContent":["\"use strict\";\nclass BaseLoader {\n    constructor(option, env, factory) {\n        this.option = option;\n        this.env = env;\n        this.factory = factory;\n    }\n    load(context) {\n        return this.contextDef\n            .then(def => {\n            return this.loadTasks(context, def);\n        })\n            .catch(err => {\n            console.error(err);\n        });\n    }\n    loadContext(env) {\n        this.env = env;\n        let self = this;\n        return this.contextDef\n            .then(def => {\n            return def.getContext({\n                option: self.option,\n                env: env,\n                createContext: self.factory\n            });\n        })\n            .catch(err => {\n            console.error(err);\n        });\n    }\n    get contextDef() {\n        if (!this._contextDef) {\n            this._contextDef = Promise.resolve(this.getContextDefine());\n        }\n        return this._contextDef;\n    }\n    loadTasks(context, def) {\n        if (def.tasks) {\n            return def.tasks(context);\n        }\n        else {\n            let mdl = this.getTaskModule();\n            return context.findTasks(mdl);\n        }\n    }\n    getConfigModule() {\n        let loader = this.option.loader;\n        return loader.configModule || loader.module;\n    }\n    getTaskModule() {\n        let loader = this.option.loader;\n        return loader.taskModule || loader.module;\n    }\n}\nexports.BaseLoader = BaseLoader;\n","import { ITask, IEnvOption, IContextDefine, ITaskContext, ITaskConfig } from 'development-core';\r\nimport { ITaskOption, ILoaderOption } from '../TaskOption';\r\nimport { IContext } from '../IContext';\r\nimport { ITaskLoader } from '../ITaskLoader';\r\n\r\n\r\nexport abstract class BaseLoader implements ITaskLoader {\r\n\r\n    constructor(protected option: ITaskOption, protected env?: IEnvOption, protected factory?: (cfg: ITaskConfig, parent?: ITaskContext) => ITaskContext) {\r\n\r\n    }\r\n\r\n    load(context: IContext): Promise<ITask[]> {\r\n        return this.contextDef\r\n            .then(def => {\r\n                return this.loadTasks(context, def);\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n            });\r\n    }\r\n\r\n    loadContext(env: IEnvOption): Promise<IContext> {\r\n        this.env = env;\r\n        let self = this;\r\n        return this.contextDef\r\n            .then(def => {\r\n                return <IContext>def.getContext({\r\n                    option: self.option,\r\n                    env: env,\r\n                    createContext: self.factory\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n            });\r\n    }\r\n\r\n    private _contextDef: Promise<IContextDefine>;\r\n    protected get contextDef(): Promise<IContextDefine> {\r\n        if (!this._contextDef) {\r\n            this._contextDef = Promise.resolve(this.getContextDefine());\r\n        }\r\n\r\n        return this._contextDef;\r\n    }\r\n\r\n\r\n    protected loadTasks(context: ITaskContext, def: IContextDefine): Promise<ITask[]> {\r\n        if (def.tasks) {\r\n            return def.tasks(context);\r\n        } else {\r\n            let mdl = this.getTaskModule();\r\n            return context.findTasks(mdl);\r\n        }\r\n    }\r\n\r\n    protected abstract getContextDefine(): IContextDefine | Promise<IContextDefine>;\r\n\r\n    protected getConfigModule(): string | Object {\r\n        let loader: ILoaderOption = this.option.loader;\r\n        return loader.configModule || loader.module;\r\n    }\r\n\r\n    protected getTaskModule(): string | Object {\r\n        let loader: ILoaderOption = this.option.loader;\r\n        return loader.taskModule || loader.module;\r\n    }\r\n}\r\n"]}