{"version":3,"sources":["loaders/BaseLoader.ts"],"names":[],"mappings":";AAMA;IAEI,oBAAsB,MAAmB,EAAY,GAAgB,EAAY,OAAmE;QAA9H,WAAM,GAAN,MAAM,CAAa;QAAY,QAAG,GAAH,GAAG,CAAa;QAAY,YAAO,GAAP,OAAO,CAA4D;IAEpJ,CAAC;IAED,yBAAI,GAAJ,UAAK,OAAiB;QAAtB,iBAQC;QAPG,MAAM,CAAC,IAAI,CAAC,UAAU;aACjB,IAAI,CAAC,UAAA,GAAG;YACL,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;QACxC,CAAC,CAAC;aACD,KAAK,CAAC,UAAA,GAAG;YACN,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;IACX,CAAC;IAED,gCAAW,GAAX,UAAY,GAAe;QACvB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,MAAM,CAAC,IAAI,CAAC,UAAU;aACjB,IAAI,CAAC,UAAA,GAAG;YACL,MAAM,CAAW,GAAG,CAAC,UAAU,CAAC;gBAC5B,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,GAAG,EAAE,GAAG;gBACR,aAAa,EAAE,IAAI,CAAC,OAAO;aAC9B,CAAC,CAAC;QACP,CAAC,CAAC;aACD,KAAK,CAAC,UAAA,GAAG;YACN,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;IACX,CAAC;IAGD,sBAAc,kCAAU;aAAxB;YACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBACpB,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC;YAChE,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;QAC5B,CAAC;;;OAAA;IAGS,8BAAS,GAAnB,UAAoB,OAAqB,EAAE,GAAmB;QAC1D,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC9B,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,GAAG,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;YAC/B,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QAClC,CAAC;IACL,CAAC;IAIS,oCAAe,GAAzB;QACI,IAAI,MAAM,GAAkB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QAC/C,MAAM,CAAC,MAAM,CAAC,YAAY,IAAI,MAAM,CAAC,MAAM,CAAC;IAChD,CAAC;IAES,kCAAa,GAAvB;QACI,IAAI,MAAM,GAAkB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QAC/C,MAAM,CAAC,MAAM,CAAC,UAAU,IAAI,MAAM,CAAC,MAAM,CAAC;IAC9C,CAAC;IACL,iBAAC;AAAD,CA9DA,AA8DC,IAAA;AA9DqB,gCAAU","file":"../../loaders/BaseLoader.js","sourcesContent":["import { ITask, IEnvOption, IContextDefine, ITaskContext, ITaskConfig } from 'development-core';\r\nimport { ITaskOption, ILoaderOption } from '../TaskOption';\r\nimport { IContext } from '../IContext';\r\nimport { ITaskLoader } from '../ITaskLoader';\r\n\r\n\r\nexport abstract class BaseLoader implements ITaskLoader {\r\n\r\n    constructor(protected option: ITaskOption, protected env?: IEnvOption, protected factory?: (cfg: ITaskConfig, parent?: ITaskContext) => ITaskContext) {\r\n\r\n    }\r\n\r\n    load(context: IContext): Promise<ITask[]> {\r\n        return this.contextDef\r\n            .then(def => {\r\n                return this.loadTasks(context, def);\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n            });\r\n    }\r\n\r\n    loadContext(env: IEnvOption): Promise<IContext> {\r\n        this.env = env;\r\n        let self = this;\r\n        return this.contextDef\r\n            .then(def => {\r\n                return <IContext>def.getContext({\r\n                    option: self.option,\r\n                    env: env,\r\n                    createContext: self.factory\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n            });\r\n    }\r\n\r\n    private _contextDef: Promise<IContextDefine>;\r\n    protected get contextDef(): Promise<IContextDefine> {\r\n        if (!this._contextDef) {\r\n            this._contextDef = Promise.resolve(this.getContextDefine());\r\n        }\r\n\r\n        return this._contextDef;\r\n    }\r\n\r\n\r\n    protected loadTasks(context: ITaskContext, def: IContextDefine): Promise<ITask[]> {\r\n        if (def.tasks) {\r\n            return def.tasks(context);\r\n        } else {\r\n            let mdl = this.getTaskModule();\r\n            return context.findTasks(mdl);\r\n        }\r\n    }\r\n\r\n    protected abstract getContextDefine(): IContextDefine | Promise<IContextDefine>;\r\n\r\n    protected getConfigModule(): string | Object {\r\n        let loader: ILoaderOption = this.option.loader;\r\n        return loader.configModule || loader.module;\r\n    }\r\n\r\n    protected getTaskModule(): string | Object {\r\n        let loader: ILoaderOption = this.option.loader;\r\n        return loader.taskModule || loader.module;\r\n    }\r\n}\r\n"]}