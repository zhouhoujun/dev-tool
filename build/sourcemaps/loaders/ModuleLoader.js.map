{"version":3,"sources":["loaders/ModuleLoader.js","loaders/ModuleLoader.ts"],"names":["development_core_1","require","BaseLoader_1","contextDefine_1","chalk","ModuleLoader","option","env","factory","Promise","resolve","reject","loader","contextDefine","taskDefine","taskDefine2Context","mdl","getConfigModule","findTaskDefineInModule","then","def","default","getTaskModule","catch","console","error","red","err","BaseLoader","exports"],"mappings":"AAAA;;;;;;;;;;ACAA,IAAAA,qBAAAC,QAAkH,kBAAlH,CAAA;AAEA,IAAAC,eAAAD,QAA2B,cAA3B,CAAA;AACA,IAAAE,kBAAAF,QAA0B,wBAA1B,CAAA;AACA,IAAYG,QAAKH,QAAM,OAAN,CAAjB;;IAEAI,Y;;;AAEI,0BAAYC,MAAZ,EAAiCC,GAAjC,EAAmDC,OAAnD,EAAsH;AAAA;;AAAA,2HAC5GF,MAD4G,EACpGC,GADoG,EAC/FC,OAD+F;AAErH;;;;2CAEyB;AAAA;;AACtB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;AAC/B,oBAAIC,SAAwB,OAAKN,MAAL,CAAYM,MAAxC;AACA,oBAAIA,MAAJ,EAAY;AACR,wBAAIA,OAAOC,aAAX,EAA0B;AACtBH,gCAAQE,OAAOC,aAAf;AACH,qBAFD,MAEO,IAAID,OAAOE,UAAX,EAAuB;AAC1BJ,gCAAQV,mBAAAe,kBAAA,CAAmBH,OAAOE,UAA1B,CAAR;AACH,qBAFM,MAEA;AACH,4BAAIE,MAAM,OAAKC,eAAL,EAAV;AACAjB,2CAAAkB,sBAAA,CAAuBF,GAAvB,EACKG,IADL,CACU,eAAG;AACL,gCAAIC,GAAJ,EAAS;AACLV,wCAAQU,GAAR;AACH,6BAFD,MAEO;AACHV,wCAAQP,gBAAAkB,OAAA,CAAc,OAAKC,aAAL,EAAd,CAAR;AACH;AACJ,yBAPL,EAQKC,KARL,CAQW,eAAG;AACNC,oCAAQC,KAAR,CAAcrB,MAAMsB,GAAN,CAAUC,GAAV,CAAd;AACAjB,oCAAQP,gBAAAkB,OAAA,CAAc,OAAKC,aAAL,EAAd,CAAR;AACH,yBAXL;AAYH;AACJ,iBApBD,MAoBO;AACHX,2BAAO,mBAAP;AACH;AACJ,aAzBM,CAAP;AA0BH;;;;EAjC6BT,aAAA0B,U;;AAArBC,QAAAxB,YAAA,GAAYA,YAAZ","file":"../../loaders/ModuleLoader.js","sourcesContent":["\"use strict\";\nconst development_core_1 = require('development-core');\nconst BaseLoader_1 = require('./BaseLoader');\nconst contextDefine_1 = require('../utils/contextDefine');\nconst chalk = require('chalk');\nclass ModuleLoader extends BaseLoader_1.BaseLoader {\n    constructor(option, env, factory) {\n        super(option, env, factory);\n    }\n    getContextDefine() {\n        return new Promise((resolve, reject) => {\n            let loader = this.option.loader;\n            if (loader) {\n                if (loader.contextDefine) {\n                    resolve(loader.contextDefine);\n                }\n                else if (loader.taskDefine) {\n                    resolve(development_core_1.taskDefine2Context(loader.taskDefine));\n                }\n                else {\n                    let mdl = this.getConfigModule();\n                    development_core_1.findTaskDefineInModule(mdl)\n                        .then(def => {\n                        if (def) {\n                            resolve(def);\n                        }\n                        else {\n                            resolve(contextDefine_1.default(this.getTaskModule()));\n                        }\n                    })\n                        .catch(err => {\n                        console.error(chalk.red(err));\n                        resolve(contextDefine_1.default(this.getTaskModule()));\n                    });\n                }\n            }\n            else {\n                reject('loader not found.');\n            }\n        });\n    }\n}\nexports.ModuleLoader = ModuleLoader;\n","import { IContextDefine, findTaskDefineInModule, IEnvOption, ITaskConfig, ITaskContext, taskDefine2Context } from 'development-core';\r\nimport { ITaskOption, ILoaderOption } from '../TaskOption';\r\nimport { BaseLoader } from './BaseLoader';\r\nimport contextDefine from '../utils/contextDefine';\r\nimport * as chalk from 'chalk';\r\n\r\nexport class ModuleLoader extends BaseLoader {\r\n\r\n    constructor(option: ITaskOption, env?: IEnvOption, factory?: (cfg: ITaskConfig, parent?: ITaskContext) => ITaskContext) {\r\n        super(option, env, factory);\r\n    }\r\n\r\n    protected getContextDefine(): IContextDefine | Promise<IContextDefine> {\r\n        return new Promise((resolve, reject) => {\r\n            let loader = <ILoaderOption>this.option.loader;\r\n            if (loader) {\r\n                if (loader.contextDefine) {\r\n                    resolve(loader.contextDefine);\r\n                } else if (loader.taskDefine) {\r\n                    resolve(taskDefine2Context(loader.taskDefine));\r\n                } else {\r\n                    let mdl = this.getConfigModule();\r\n                    findTaskDefineInModule(mdl)\r\n                        .then(def => {\r\n                            if (def) {\r\n                                resolve(def);\r\n                            } else {\r\n                                resolve(contextDefine(this.getTaskModule()));\r\n                            }\r\n                        })\r\n                        .catch(err => {\r\n                            console.error(chalk.red(err));\r\n                            resolve(contextDefine(this.getTaskModule()));\r\n                        });\r\n                }\r\n            } else {\r\n                reject('loader not found.');\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}