{"version":3,"sources":["loaders/ModuleLoader.ts"],"names":[],"mappings":";;;;;;AAAA,qDAAqI;AAErI,2CAA0C;AAC1C,wDAAmD;AACnD,6BAA+B;AAE/B;IAAkC,gCAAU;IAExC,sBAAY,MAAmB,EAAE,GAAgB,EAAE,OAAmE;eAClH,kBAAM,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC;IAC/B,CAAC;IAES,uCAAgB,GAA1B;QAAA,iBA2BC;QA1BG,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,IAAI,MAAM,GAAkB,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YAC/C,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACT,EAAE,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC;oBACvB,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;gBAClC,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;oBAC3B,OAAO,CAAC,qCAAkB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;gBACnD,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,IAAI,GAAG,GAAG,KAAI,CAAC,eAAe,EAAE,CAAC;oBACjC,yCAAsB,CAAC,GAAG,CAAC;yBACtB,IAAI,CAAC,UAAA,GAAG;wBACL,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4BACN,OAAO,CAAC,GAAG,CAAC,CAAC;wBACjB,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,OAAO,CAAC,uBAAa,CAAC,KAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;wBACjD,CAAC;oBACL,CAAC,CAAC;yBACD,KAAK,CAAC,UAAA,GAAG;wBACN,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;wBAC9B,OAAO,CAAC,uBAAa,CAAC,KAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;oBACjD,CAAC,CAAC,CAAC;gBACX,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,mBAAmB,CAAC,CAAC;YAChC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IACL,mBAAC;AAAD,CAlCA,AAkCC,CAlCiC,uBAAU,GAkC3C;AAlCY,oCAAY","file":"../../loaders/ModuleLoader.js","sourcesContent":["import { IContextDefine, findTaskDefineInModule, IEnvOption, ITaskConfig, ITaskContext, taskDefine2Context } from 'development-core';\r\nimport { ITaskOption, ILoaderOption } from '../TaskOption';\r\nimport { BaseLoader } from './BaseLoader';\r\nimport contextDefine from '../utils/contextDefine';\r\nimport * as chalk from 'chalk';\r\n\r\nexport class ModuleLoader extends BaseLoader {\r\n\r\n    constructor(option: ITaskOption, env?: IEnvOption, factory?: (cfg: ITaskConfig, parent?: ITaskContext) => ITaskContext) {\r\n        super(option, env, factory);\r\n    }\r\n\r\n    protected getContextDefine(): IContextDefine | Promise<IContextDefine> {\r\n        return new Promise((resolve, reject) => {\r\n            let loader = <ILoaderOption>this.option.loader;\r\n            if (loader) {\r\n                if (loader.contextDefine) {\r\n                    resolve(loader.contextDefine);\r\n                } else if (loader.taskDefine) {\r\n                    resolve(taskDefine2Context(loader.taskDefine));\r\n                } else {\r\n                    let mdl = this.getConfigModule();\r\n                    findTaskDefineInModule(mdl)\r\n                        .then(def => {\r\n                            if (def) {\r\n                                resolve(def);\r\n                            } else {\r\n                                resolve(contextDefine(this.getTaskModule()));\r\n                            }\r\n                        })\r\n                        .catch(err => {\r\n                            console.error(chalk.red(err));\r\n                            resolve(contextDefine(this.getTaskModule()));\r\n                        });\r\n                }\r\n            } else {\r\n                reject('loader not found.');\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}