{"version":3,"sources":["loaders/DynamicLoader.js","loaders/DynamicLoader.ts"],"names":["contextDefine_1","require","BaseLoader_1","DynamicLoader","option","env","factory","default","getTaskModule","BaseLoader","exports"],"mappings":"AAAA;;;;;;;;;;ACEA,IAAAA,kBAAAC,QAA0B,wBAA1B,CAAA;AACA,IAAAC,eAAAD,QAA2B,cAA3B,CAAA;;IAEAE,a;;;AAEI,2BAAYC,MAAZ,EAAiCC,GAAjC,EAAmDC,OAAnD,EAAsH;AAAA;;AAAA,6HAC5GF,MAD4G,EACpGC,GADoG,EAC/FC,OAD+F;AAErH;;;;2CAGyB;AACtB,mBAAON,gBAAAO,OAAA,CAAc,KAAKC,aAAL,EAAd,CAAP;AACH;;;;EAT8BN,aAAAO,U;;AAAtBC,QAAAP,aAAA,GAAaA,aAAb","file":"../../loaders/DynamicLoader.js","sourcesContent":["\"use strict\";\nconst contextDefine_1 = require('../utils/contextDefine');\nconst BaseLoader_1 = require('./BaseLoader');\nclass DynamicLoader extends BaseLoader_1.BaseLoader {\n    constructor(option, env, factory) {\n        super(option, env, factory);\n    }\n    getContextDefine() {\n        return contextDefine_1.default(this.getTaskModule());\n    }\n}\nexports.DynamicLoader = DynamicLoader;\n","import { IContextDefine, IEnvOption, ITaskConfig, ITaskContext } from 'development-core';\r\nimport { ITaskOption } from '../TaskOption';\r\nimport contextDefine from '../utils/contextDefine';\r\nimport { BaseLoader } from './BaseLoader';\r\n\r\nexport class DynamicLoader extends BaseLoader {\r\n\r\n    constructor(option: ITaskOption, env?: IEnvOption, factory?: (cfg: ITaskConfig, parent?: ITaskContext) => ITaskContext) {\r\n        super(option, env, factory);\r\n    }\r\n\r\n\r\n    protected getContextDefine(): IContextDefine | Promise<IContextDefine> {\r\n        return contextDefine(this.getTaskModule())\r\n    }\r\n}\r\n\r\n\r\n"]}