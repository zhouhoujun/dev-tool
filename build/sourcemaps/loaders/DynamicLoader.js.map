{"version":3,"sources":["loaders/DynamicLoader.ts"],"names":[],"mappings":";;;;;;AAEA,wDAAmD;AACnD,2CAA0C;AAE1C;IAAmC,iCAAU;IAEzC,uBAAY,MAAmB,EAAE,GAAgB,EAAE,OAAmE;eAClH,kBAAM,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC;IAC/B,CAAC;IAGS,wCAAgB,GAA1B;QACI,MAAM,CAAC,uBAAa,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAA;IAC9C,CAAC;IACL,oBAAC;AAAD,CAVA,AAUC,CAVkC,uBAAU,GAU5C;AAVY,sCAAa","file":"../../loaders/DynamicLoader.js","sourcesContent":["import { IContextDefine, IEnvOption, ITaskConfig, ITaskContext } from 'development-core';\r\nimport { ITaskOption } from '../TaskOption';\r\nimport contextDefine from '../utils/contextDefine';\r\nimport { BaseLoader } from './BaseLoader';\r\n\r\nexport class DynamicLoader extends BaseLoader {\r\n\r\n    constructor(option: ITaskOption, env?: IEnvOption, factory?: (cfg: ITaskConfig, parent?: ITaskContext) => ITaskContext) {\r\n        super(option, env, factory);\r\n    }\r\n\r\n\r\n    protected getContextDefine(): IContextDefine | Promise<IContextDefine> {\r\n        return contextDefine(this.getTaskModule())\r\n    }\r\n}\r\n\r\n\r\n"]}