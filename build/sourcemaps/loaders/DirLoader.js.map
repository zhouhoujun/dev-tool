{"version":3,"sources":["loaders/DirLoader.js","loaders/DirLoader.ts"],"names":["development_core_1","require","ModuleLoader_1","DirLoader","option","env","factory","context","def","loader","dir","findTasksInDir","taskSourceVal","self","configModule","module","findTaskDefineInDir","bindingConfig","createContext","ModuleLoader","exports"],"mappings":"AAAA;;;;;;;;;;;;ACCA,IAAAA,qBAAAC,QAAgI,kBAAhI,CAAA;AAEA,IAAAC,iBAAAD,QAA6B,gBAA7B,CAAA;;IAEAE,S;;;AAEI,uBAAYC,MAAZ,EAAiCC,GAAjC,EAAkDC,OAAlD,EAAqH;AAAA;;AAAA,qHAC3GF,MAD2G,EACnGC,GADmG;AAEpH;;;;kCAESE,O,EAAuBC,G,EAAmB;AAChD,gBAAIC,SAA2B,KAAKL,MAAL,CAAYK,MAA3C;AACA,gBAAIA,OAAOC,GAAX,EAAgB;AACZ,uBAAOH,QAAQI,cAAR,CAAuBX,mBAAAY,aAAA,CAAcH,OAAOC,GAArB,EAA0BH,OAA1B,CAAvB,CAAP;AACH,aAFD,MAEO;AACH,uIAAuBA,OAAvB,EAAgCC,GAAhC;AACH;AACJ;;;2CAEyB;AACtB,gBAAIC,SAA2B,KAAKL,MAAL,CAAYK,MAA3C;AACA,gBAAII,OAAO,IAAX;AACA,gBAAI,CAACJ,OAAOK,YAAR,IACG,CAACL,OAAOM,MADX,IACqBN,OAAOC,GADhC,EACqC;AACjC,uBAAOV,mBAAAgB,mBAAA,CAAoBhB,mBAAAY,aAAA,CAAcH,OAAOC,GAArB,EAA0BV,mBAAAiB,aAAA,CAAc,EAAEZ,KAAKQ,KAAKR,GAAZ,EAAiBD,QAAQ,EAAzB,EAA6Bc,eAAeL,KAAKP,OAAjD,EAAd,CAA1B,CAApB,CAAP;AACH,aAHD,MAGO;AACH;AACH;AACJ;;;;EAxB0BJ,eAAAiB,Y;;AAAlBC,QAAAjB,SAAA,GAASA,SAAT","file":"../../loaders/DirLoader.js","sourcesContent":["\"use strict\";\nconst development_core_1 = require('development-core');\nconst ModuleLoader_1 = require('./ModuleLoader');\nclass DirLoader extends ModuleLoader_1.ModuleLoader {\n    constructor(option, env, factory) {\n        super(option, env);\n    }\n    loadTasks(context, def) {\n        let loader = this.option.loader;\n        if (loader.dir) {\n            return context.findTasksInDir(development_core_1.taskSourceVal(loader.dir, context));\n        }\n        else {\n            return super.loadTasks(context, def);\n        }\n    }\n    getContextDefine() {\n        let loader = this.option.loader;\n        let self = this;\n        if (!loader.configModule\n            && !loader.module && loader.dir) {\n            return development_core_1.findTaskDefineInDir(development_core_1.taskSourceVal(loader.dir, development_core_1.bindingConfig({ env: self.env, option: {}, createContext: self.factory })));\n        }\n        else {\n            return super.getContextDefine();\n        }\n    }\n}\nexports.DirLoader = DirLoader;\n","import * as _ from 'lodash';\r\nimport { ITask, IContextDefine, ITaskContext, bindingConfig, findTaskDefineInDir, ITaskConfig, taskSourceVal, IEnvOption } from 'development-core';\r\nimport { ITaskOption, IDirLoaderOption } from '../TaskOption';\r\nimport { ModuleLoader } from './ModuleLoader';\r\n\r\nexport class DirLoader extends ModuleLoader {\r\n\r\n    constructor(option: ITaskOption, env: IEnvOption, factory?: (cfg: ITaskConfig, parent?: ITaskContext) => ITaskContext) {\r\n        super(option, env);\r\n    }\r\n\r\n    loadTasks(context: ITaskContext, def: IContextDefine): Promise<ITask[]> {\r\n        let loader: IDirLoaderOption = this.option.loader;\r\n        if (loader.dir) {\r\n            return context.findTasksInDir(taskSourceVal(loader.dir, context));\r\n        } else {\r\n            return super.loadTasks(context, def);\r\n        }\r\n    }\r\n\r\n    protected getContextDefine(): IContextDefine | Promise<IContextDefine> {\r\n        let loader: IDirLoaderOption = this.option.loader;\r\n        let self = this;\r\n        if (!loader.configModule\r\n            && !loader.module && loader.dir) {\r\n            return findTaskDefineInDir(taskSourceVal(loader.dir, bindingConfig({ env: self.env, option: {}, createContext: self.factory })));\r\n        } else {\r\n            return super.getContextDefine();\r\n        }\r\n    }\r\n}\r\n"]}