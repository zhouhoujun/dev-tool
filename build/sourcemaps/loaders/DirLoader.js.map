{"version":3,"sources":["loaders/DirLoader.ts"],"names":[],"mappings":";;;;;;AACA,qDAAmJ;AAEnJ,+CAA8C;AAE9C;IAA+B,6BAAY;IAEvC,mBAAY,MAAmB,EAAE,GAAe,EAAE,OAAmE;eACjH,kBAAM,MAAM,EAAE,GAAG,CAAC;IACtB,CAAC;IAED,6BAAS,GAAT,UAAU,OAAqB,EAAE,GAAmB;QAChD,IAAI,MAAM,GAAqB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QAClD,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YACb,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,gCAAa,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC;QACtE,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,iBAAM,SAAS,YAAC,OAAO,EAAE,GAAG,CAAC,CAAC;QACzC,CAAC;IACL,CAAC;IAES,oCAAgB,GAA1B;QACI,IAAI,MAAM,GAAqB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QAClD,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY;eACjB,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,sCAAmB,CAAC,gCAAa,CAAC,MAAM,CAAC,GAAG,EAAE,gCAAa,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE,aAAa,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;QACrI,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,iBAAM,gBAAgB,WAAE,CAAC;QACpC,CAAC;IACL,CAAC;IACL,gBAAC;AAAD,CAzBA,AAyBC,CAzB8B,2BAAY,GAyB1C;AAzBY,8BAAS","file":"../../loaders/DirLoader.js","sourcesContent":["import * as _ from 'lodash';\r\nimport { ITask, IContextDefine, ITaskContext, bindingConfig, findTaskDefineInDir, ITaskConfig, taskSourceVal, IEnvOption } from 'development-core';\r\nimport { ITaskOption, IDirLoaderOption } from '../TaskOption';\r\nimport { ModuleLoader } from './ModuleLoader';\r\n\r\nexport class DirLoader extends ModuleLoader {\r\n\r\n    constructor(option: ITaskOption, env: IEnvOption, factory?: (cfg: ITaskConfig, parent?: ITaskContext) => ITaskContext) {\r\n        super(option, env);\r\n    }\r\n\r\n    loadTasks(context: ITaskContext, def: IContextDefine): Promise<ITask[]> {\r\n        let loader: IDirLoaderOption = this.option.loader;\r\n        if (loader.dir) {\r\n            return context.findTasksInDir(taskSourceVal(loader.dir, context));\r\n        } else {\r\n            return super.loadTasks(context, def);\r\n        }\r\n    }\r\n\r\n    protected getContextDefine(): IContextDefine | Promise<IContextDefine> {\r\n        let loader: IDirLoaderOption = this.option.loader;\r\n        let self = this;\r\n        if (!loader.configModule\r\n            && !loader.module && loader.dir) {\r\n            return findTaskDefineInDir(taskSourceVal(loader.dir, bindingConfig({ env: self.env, option: {}, createContext: self.factory })));\r\n        } else {\r\n            return super.getContextDefine();\r\n        }\r\n    }\r\n}\r\n"]}