{"version":3,"sources":["Development.ts"],"names":[],"mappings":"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","file":"../Development.js","sourcesContent":["import * as _ from 'lodash';\r\nimport { Gulp, TaskCallback } from 'gulp';\r\n\r\nimport * as minimist from 'minimist';\r\nimport { ITaskLoader } from './ITaskLoader';\r\nimport { LoaderFactory } from './loaderFactory';\r\nimport { Operation, ITaskConfig, Src, toSequence, runSequence, zipSequence, flattenSequence, ITaskContext, ITaskInfo, ITask, IEnvOption, IDynamicTaskOption, RunWay } from 'development-core';\r\nimport { TaskOption, ITaskOption, IAssertOption } from './TaskOption';\r\nimport { IContext } from './IContext';\r\nimport { Context } from './Context';\r\nimport { DevelopConfig } from './DevelopConfig';\r\nimport * as chalk from 'chalk';\r\nimport { EventEmitter } from 'events';\r\n\r\nexport class Development extends EventEmitter {\r\n\r\n    /**\r\n     * create development tool.\r\n     * \r\n     * @static\r\n     * @param {Gulp} gulp\r\n     * @param {string} dirname\r\n     * @param {(DevelopConfig | Array<ITaskOption | IAssertOption | IDynamicTaskOption>)} setting\r\n     * @param {any} [runWay=RunWay.sequence]\r\n     * @returns {Development}\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    static create(gulp: Gulp, dirname: string, setting: DevelopConfig | Array<ITaskOption | IAssertOption | IDynamicTaskOption>, runWay = RunWay.sequence, factory?: (cfg: ITaskConfig, parent?: ITaskContext) => ITaskContext): Development {\r\n        let option = _.isArray(setting) ? { tasks: setting, runWay: runWay } : setting;\r\n        if (!_.isUndefined(option.runWay)) {\r\n            option.runWay = runWay;\r\n        }\r\n        option.contextFactory = factory || ((cfg, parent?) => {\r\n            let ctx = new Context(cfg, parent);\r\n            if (parent && parent.add) {\r\n                (<IContext>parent).add(ctx);\r\n            }\r\n            return ctx;\r\n        })\r\n\r\n        let devtool = new Development(dirname, option);\r\n        devtool.setup(gulp);\r\n        return devtool;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of Development.\r\n     * \r\n     * @param {string} dirname\r\n     * @param {DevelopConfig} config\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    public constructor(private dirname: string, protected config: DevelopConfig) {\r\n        super();\r\n        if (config.evnets) {\r\n            _.each(_.keys(config.evnets), key => {\r\n                this.on(key, config.evnets[key]);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * run task.\r\n     * \r\n     * @param {Gulp} gulp\r\n     * @param {IEnvOption} env\r\n     * @returns {Promise<any>}\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    run(gulp: Gulp, env: IEnvOption): Promise<any> {\r\n        return this.setupTasks(gulp, env)\r\n            .then(seq => {\r\n                let tseq = env.task ? env.task.split(',') : seq;\r\n                let gbctx = this.getContext(env);\r\n                this.emit('beforRun', tseq, gbctx);\r\n                if (this.config.runWay === RunWay.parallel) {\r\n                    return runSequence(gulp, [flattenSequence(gulp, tseq, gbctx)]);\r\n                } else {\r\n                    return runSequence(gulp, tseq);\r\n                }\r\n            })\r\n            .then(() => {\r\n                let gbctx = this.getContext(env);\r\n                this.emit('afterRun', gbctx);\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                process.exit(1);\r\n            });\r\n    }\r\n\r\n    setupTasks(gulp: Gulp, env: IEnvOption): Promise<Src[]> {\r\n        if (!env.root) {\r\n            env.root = this.dirname;\r\n        }\r\n\r\n        if (env.help) {\r\n            console.log(chalk.grey('... main help  ...'));\r\n            this.printHelp(env.help);\r\n        }\r\n\r\n        let gbctx = this.getContext(env);\r\n        this.emit('beforSetup', gbctx);\r\n        return this.loadTasks(gulp, this.config.tasks, gbctx)\r\n            .then(tsq => {\r\n                this.emit('afterSetup', tsq, gbctx);\r\n                return tsq;\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                process.exit(1);\r\n            });\r\n    }\r\n\r\n    setup(gulp: Gulp) {\r\n        let config = this.config;\r\n        config.setupTask = config.setupTask || 'build';\r\n        gulp.task(config.setupTask, (callback: TaskCallback) => {\r\n            var options: IEnvOption = minimist(process.argv.slice(2), {\r\n                string: 'env',\r\n                default: { env: process.env.NODE_ENV || 'development' }\r\n            });\r\n            return this.run(gulp, options);\r\n        });\r\n\r\n        config.startTask = config.startTask || 'start';\r\n        gulp.task(config.startTask, (callback: TaskCallback) => {\r\n            var options: IEnvOption = minimist(process.argv.slice(2), {\r\n                string: 'env',\r\n                default: { env: process.env.NODE_ENV || 'development' }\r\n            });\r\n            if (!options.task) {\r\n                return Promise.reject('start task can not empty!');\r\n            }\r\n            return this.run(gulp, options);\r\n        })\r\n\r\n        gulp.task('default', () => {\r\n            gulp.start(config.setupTask);\r\n        });\r\n    }\r\n\r\n    private globalctx: IContext;\r\n    getContext(env) {\r\n        if (!this.globalctx || this.globalctx.env !== env) {\r\n            let option = this.config.option || {};\r\n            this.globalctx = <IContext>this.config.contextFactory({\r\n                env: env,\r\n                option: option\r\n            });\r\n        }\r\n\r\n        return this.globalctx;\r\n    }\r\n\r\n\r\n    protected loadTasks(gulp: Gulp, tasks: TaskOption, parent: IContext): Promise<Src[]> {\r\n        return Promise.all<Src[]>(\r\n            _.map(_.isArray(tasks) ? <ITaskOption[]>tasks : [<ITaskOption>tasks], optask => {\r\n                // optask.dist = optask.dist || 'dist';\r\n                // console.log(chalk.grey('begin load task via loader:'), optask.loader);\r\n                let loader = this.createLoader(optask, parent);\r\n\r\n                return loader.loadContext(parent.env)\r\n                    .then(ctx => {\r\n                        console.log(chalk.green('task context loaded.'));\r\n                        if (ctx.env.help) {\r\n                            if (ctx.printHelp) {\r\n                                console.log(chalk.grey('...development default help...'));\r\n                                ctx.printHelp(_.isString(ctx.env.help) ? ctx.env.help : '');\r\n                            }\r\n                            return [];\r\n                        } else {\r\n                            return Promise.all([\r\n                                loader.load(ctx),\r\n                                this.loadAssertTasks(gulp, ctx),\r\n                                this.loadSubTask(gulp, ctx)\r\n                            ])\r\n                                .then(tks => {\r\n                                    console.log(chalk.green('tasks loaded.'));\r\n                                    return this.setupTask(gulp, ctx, tks[0], tks[1], tks[2]);\r\n                                });\r\n                        }\r\n                    });\r\n            })\r\n        )\r\n            .then(tsq => {\r\n                let rst: Src[] = [];\r\n                _.each(tsq, t => {\r\n                    let tk = zipSequence(gulp, t, parent);\r\n                    if (tk) {\r\n                        rst.push(tk);\r\n                    }\r\n                });\r\n                return rst;\r\n\r\n            });\r\n    }\r\n\r\n    protected setupTask(gulp: Gulp, ctx: ITaskContext, tasks: ITask[], assertsTask: ITaskInfo, subGroupTask: ITaskInfo): Promise<Src[]> {\r\n        return Promise.resolve(toSequence(gulp, tasks, ctx))\r\n            .then(tsqs => {\r\n                if (ctx.runTasks) {\r\n                    return ctx.runTasks(tsqs, assertsTask, subGroupTask);\r\n                }\r\n                // console.log(assertsTask);\r\n                ctx.addToSequence(tsqs, assertsTask);\r\n                ctx.addToSequence(tsqs, subGroupTask);\r\n\r\n                return tsqs;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * load sub tasks as group task.\r\n     * \r\n     * @protected\r\n     * @param {Gulp} gulp\r\n     * @param {IContext} ctx\r\n     * @returns {Promise<ITaskInfo>}\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    protected loadSubTask(gulp: Gulp, ctx: IContext): Promise<ITaskInfo> {\r\n        if (ctx.option['tasks']) {\r\n            let optask = <ITaskOption>ctx.option;\r\n            _.each(_.isArray(optask.tasks) ? optask.tasks : [optask.tasks], subopt => {\r\n                subopt.name = ctx.subTaskName(subopt.name);\r\n                // subopt.src = subopt.src || optask.src;\r\n                // subopt.dist = subopt.dist || optask.dist;\r\n            });\r\n            return this.loadTasks(gulp, optask.tasks, ctx)\r\n                .then(subseq => {\r\n                    let taskname;\r\n                    if (optask.subTaskRunWay === RunWay.parallel) {\r\n                        taskname = [flattenSequence(gulp, subseq, ctx, (name, runway) => ctx.subTaskName(name, (runway === RunWay.sequence ? '-subs' : '-subp')))]\r\n                    } else {\r\n                        taskname = zipSequence(gulp, subseq, ctx, (name, runway) => ctx.subTaskName(name, (runway === RunWay.sequence ? '-subs' : '-subp')));\r\n                    }\r\n                    if (taskname) {\r\n                        return <ITaskInfo>{\r\n                            order: optask.subTaskOrder,\r\n                            taskName: taskname\r\n                        };\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                });\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * load asserts tasks.\r\n     * \r\n     * @protected\r\n     * @param {Gulp} gulp\r\n     * @param {ITaskContext} ctx\r\n     * @returns {Promise<Src>}\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    protected loadAssertTasks(gulp: Gulp, ctx: IContext): Promise<ITaskInfo> {\r\n        let optask = <IAssertOption>ctx.option;\r\n        if (optask.asserts) {\r\n            let tasks: IAssertOption[] = [];\r\n            _.each(_.keys(optask.asserts), name => {\r\n                let op: IAssertOption;\r\n                let sr = optask.asserts[name];\r\n                if (_.isString(sr)) {\r\n                    op = <IAssertOption>{ src: sr, loader: [{ name: name, pipes: [], watch: true }] };\r\n                } else if (_.isNumber(sr)) {\r\n                    // watch with Operation.autoWatch.\r\n                    op = <IAssertOption>{ loader: [{ oper: sr, name: name, pipes: [] }] };\r\n                } else if (_.isFunction(sr)) {\r\n                    op = { loader: sr };\r\n                } else if (_.isArray(sr)) {\r\n                    if (sr.length > 0) {\r\n                        if (_.isString(_.first(<string[]>sr))) {\r\n                            op = <IAssertOption>{ src: <string[]>sr, loader: [{ name: name, pipes: [], watch: true }] };\r\n                        } else {\r\n                            op = <IAssertOption>{ loader: <IDynamicTaskOption[]>sr, watch: true };\r\n                        }\r\n                    }\r\n                } else {\r\n                    op = sr;\r\n                }\r\n\r\n                if (_.isNull(op) || _.isUndefined(op)) {\r\n                    return;\r\n                }\r\n                op.name = op.name || ctx.subTaskName(name);\r\n                op.src = op.src || (ctx.getSrc({ oper: Operation.build }) + '/**/*.' + name);\r\n                // op.dist = op.dist || ctx.getDist({ oper: Operation.build });\r\n                tasks.push(op);\r\n            });\r\n\r\n            return Promise.all(_.map(tasks, task => {\r\n                return this.loadTasks(gulp, <ITaskOption>task, ctx)\r\n                    .then(sq => {\r\n                        return {\r\n                            task: task,\r\n                            sq: sq\r\n                        }\r\n                    });\r\n            }))\r\n                .then(tseq => {\r\n                    // asserts tasks run mutil.\r\n                    let assertSeq = _.map(tseq, t => {\r\n                        return zipSequence(gulp, t.sq, ctx, (name, runway) => ctx.subTaskName(t.task.name, runway === RunWay.sequence ? '-asserts' : '-assertp')); // ctx.subTaskName(name + (runway === RunWay.sequence ? '-assert-seq' : '-assert-par')));\r\n                    });\r\n\r\n                    let taskname;\r\n                    if (optask.assertsRunWay === RunWay.sequence) {\r\n                        taskname = assertSeq;\r\n                    } else {\r\n                        taskname = zipSequence(gulp, [assertSeq], ctx, (name, runway) => name + (runway === RunWay.sequence ? '-asserts' : '-assertp'));\r\n                    }\r\n\r\n                    return <ITaskInfo>{\r\n                        order: optask.assertsOrder,\r\n                        taskName: taskname\r\n                    }\r\n                });\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    protected createLoader(option: TaskOption, parent: IContext): ITaskLoader {\r\n        if (!_.isFunction(this.config.loaderFactory)) {\r\n            let factory = new LoaderFactory();\r\n            return factory.create(option, parent.env, (cfg, p) => {\r\n                return this.config.contextFactory(cfg, p || parent);\r\n            });\r\n        } else {\r\n            return this.config.loaderFactory(option, parent.env);\r\n        }\r\n    }\r\n\r\n\r\n    protected printHelp(help: boolean | string) {\r\n        if (help === 'en') {\r\n\r\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--context name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env  development or production;\r\n                 *  --context app setting\r\n                 *  --root path, set relative path of the development tool root.\r\n                 *  --watch  watch src file change or not. if changed will auto update to node service. \r\n                 *  --release release web app or not. if [--env production], default to release. \r\n                 *  --test  need auto load test file to node service.\r\n                 *  --deploy run deploy tasks to deploy project.  \r\n                 *  --serve start node web service or not.\r\n                 *  --task taskname  spruce task taskname\r\n                 **/`);\r\n\r\n        } else {\r\n\r\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--context name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env 发布环境 默认开发环境development;\r\n                 *  --context 设置配置文件;\r\n                 *  --root path, 设置编译环境相对路径\r\n                 *  --watch  是否需要动态监听文件变化\r\n                 *  --release 是否release编译, [--env production] 默认release \r\n                 *  --test  启动自动化测试\r\n                 *  --deploy 运行加载deploy tasks, 编译发布项目。  \r\n                 *  --serve  是否在开发模式下 开启node web服务\r\n                 *  --task taskname  运行单独任务taskname\r\n                 **/`);\r\n\r\n        }\r\n    }\r\n}\r\n"]}