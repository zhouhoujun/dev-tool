{"version":3,"sources":["Development.js","Development.ts"],"names":["_","require","minimist","LoaderFactory_1","development_core_1","Context_1","chalk","Development","dirname","config","gulp","env","root","help","console","log","grey","printHelp","gbctx","getContext","loadTasks","tasks","then","runWay","RunWay","parallel","runSequence","flattenSequence","tseq","catch","error","err","process","exit","globalctx","option","contextFactory","parent","Promise","all","map","isArray","optask","dist","loader","createLoader","loadContext","green","ctx","isString","load","loadAssertTasks","loadSubTask","setup","tks","rst","each","tsq","tk","zipSequence","t","push","assertsTask","subGroupTask","resolve","toSequence","runTasks","tsqs","addToSequence","subopt","name","subTaskName","src","taskname","subTaskRunWay","subseq","runway","sequence","order","subTaskOrder","taskName","asserts","keys","op","sr","pipes","watch","isNumber","oper","isFunction","length","first","isNull","isUndefined","getSrc","Operation","build","getDist","task","sq","assertSeq","assertsRunWay","assertsOrder","loaderFactory","factory","LoaderFactory","opt","create","setting","cfg","Context","add","devtool","setupTask","callback","options","argv","slice","string","default","NODE_ENV","run","start","exports"],"mappings":"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","file":"../Development.js","sourcesContent":["\"use strict\";\nconst _ = require('lodash');\nconst minimist = require('minimist');\nconst LoaderFactory_1 = require('./LoaderFactory');\nconst development_core_1 = require('development-core');\nconst Context_1 = require('./Context');\nconst chalk = require('chalk');\nclass Development {\n    /**\n     * Creates an instance of Development.\n     *\n     * @param {string} dirname\n     * @param {DevelopConfig} config\n     *\n     * @memberOf Development\n     */\n    constructor(dirname, config) {\n        this.dirname = dirname;\n        this.config = config;\n    }\n    /**\n     * create development tool.\n     *\n     * @static\n     * @param {Gulp} gulp\n     * @param {string} dirname\n     * @param {(DevelopConfig | Array<ITaskOption | IAssertOption | IDynamicTaskOption>)} setting\n     * @param {any} [runWay=RunWay.sequence]\n     * @returns {Development}\n     *\n     * @memberOf Development\n     */\n    static create(gulp, dirname, setting, runWay = development_core_1.RunWay.sequence, factory) {\n        let option = _.isArray(setting) ? { tasks: setting, runWay: runWay } : setting;\n        if (!_.isUndefined(option.runWay)) {\n            option.runWay = runWay;\n        }\n        option.contextFactory = factory || ((cfg, parent) => {\n            let ctx = new Context_1.Context(cfg, parent);\n            if (parent && parent['add']) {\n                parent.add(ctx);\n            }\n            return ctx;\n        });\n        let devtool = new Development(dirname, option);\n        option.setupTask = option.setupTask || 'build';\n        gulp.task(option.setupTask, (callback) => {\n            var options = minimist(process.argv.slice(2), {\n                string: 'env',\n                default: { env: process.env.NODE_ENV || 'development' }\n            });\n            return devtool.run(gulp, options);\n        });\n        gulp.task('default', () => {\n            gulp.start(option.setupTask);\n        });\n        return devtool;\n    }\n    /**\n     * run task.\n     *\n     * @param {Gulp} gulp\n     * @param {IEnvOption} env\n     * @returns {Promise<any>}\n     *\n     * @memberOf Development\n     */\n    run(gulp, env) {\n        if (!env.root) {\n            env.root = this.dirname;\n        }\n        if (env.help) {\n            console.log(chalk.grey('... main help  ...'));\n            this.printHelp(env.help);\n        }\n        let gbctx = this.getContext(env);\n        return this.loadTasks(gulp, this.config.tasks, gbctx)\n            .then(tseq => {\n            // console.log(chalk.grey('run sequenec tasks:'), tseq);\n            if (this.config.runWay === development_core_1.RunWay.parallel) {\n                return development_core_1.runSequence(gulp, [development_core_1.flattenSequence(gulp, tseq, gbctx)]);\n            }\n            else {\n                return development_core_1.runSequence(gulp, tseq);\n            }\n        })\n            .catch(err => {\n            console.error(err);\n            process.exit(1);\n        });\n    }\n    getContext(env) {\n        if (!this.globalctx || this.globalctx.env !== env) {\n            let option = this.config.option || {};\n            this.globalctx = this.config.contextFactory({\n                env: env,\n                option: option\n            });\n        }\n        return this.globalctx;\n    }\n    loadTasks(gulp, tasks, parent) {\n        return Promise.all(_.map(_.isArray(tasks) ? tasks : [tasks], optask => {\n            optask.dist = optask.dist || 'dist';\n            // console.log(chalk.grey('begin load task via loader:'), optask.loader);\n            let loader = this.createLoader(optask, parent.env);\n            return loader.loadContext(parent.env)\n                .then(ctx => {\n                console.log(chalk.green('task context loaded.'));\n                if (ctx.env.help) {\n                    if (ctx.printHelp) {\n                        console.log(chalk.grey('...development default help...'));\n                        ctx.printHelp(_.isString(ctx.env.help) ? ctx.env.help : '');\n                    }\n                    return [];\n                }\n                else {\n                    return Promise.all([\n                        loader.load(ctx),\n                        this.loadAssertTasks(gulp, ctx),\n                        this.loadSubTask(gulp, ctx)\n                    ])\n                        .then(tks => {\n                        console.log(chalk.green('tasks loaded.'));\n                        return this.setup(gulp, ctx, tks[0], tks[1], tks[2]);\n                    });\n                }\n            });\n        }))\n            .then(tsq => {\n            let rst = [];\n            _.each(tsq, t => {\n                let tk = development_core_1.zipSequence(gulp, t, parent);\n                if (tk) {\n                    rst.push(tk);\n                }\n            });\n            return rst;\n        });\n    }\n    setup(gulp, ctx, tasks, assertsTask, subGroupTask) {\n        return Promise.resolve(development_core_1.toSequence(gulp, tasks, ctx))\n            .then(tsqs => {\n            // if (_.isFunction(context.option['runTasks'])) {\n            //     return context.option['runTasks'](context.oper, tsqs, subGroupTask, assertsTask);\n            // } else if (_.isArray(context.option['runTasks'])) {\n            //     tsqs = context.option['runTasks'];\n            // } else \n            if (ctx.runTasks) {\n                return ctx.runTasks(tsqs, assertsTask, subGroupTask);\n            }\n            // console.log(assertsTask);\n            ctx.addToSequence(tsqs, assertsTask);\n            ctx.addToSequence(tsqs, subGroupTask);\n            return tsqs;\n        });\n    }\n    /**\n     * load sub tasks as group task.\n     *\n     * @protected\n     * @param {Gulp} gulp\n     * @param {IContext} ctx\n     * @returns {Promise<ITaskInfo>}\n     *\n     * @memberOf Development\n     */\n    loadSubTask(gulp, ctx) {\n        if (ctx.option['tasks']) {\n            let optask = ctx.option;\n            _.each(_.isArray(optask.tasks) ? optask.tasks : [optask.tasks], subopt => {\n                subopt.name = ctx.subTaskName(subopt.name);\n                subopt.src = subopt.src || optask.src;\n                subopt.dist = subopt.dist || optask.dist;\n            });\n            return this.loadTasks(gulp, optask.tasks, ctx)\n                .then(subseq => {\n                let taskname;\n                if (optask.subTaskRunWay === development_core_1.RunWay.parallel) {\n                    taskname = [development_core_1.flattenSequence(gulp, subseq, ctx, (name, runway) => ctx.subTaskName(name, (runway === development_core_1.RunWay.sequence ? '-subs' : '-subp')))];\n                }\n                else {\n                    taskname = development_core_1.zipSequence(gulp, subseq, ctx, (name, runway) => ctx.subTaskName(name, (runway === development_core_1.RunWay.sequence ? '-subs' : '-subp')));\n                }\n                if (taskname) {\n                    return {\n                        order: optask.subTaskOrder,\n                        taskName: taskname\n                    };\n                }\n                else {\n                    return null;\n                }\n            });\n        }\n        else {\n            return Promise.resolve(null);\n        }\n    }\n    /**\n     * load asserts tasks.\n     *\n     * @protected\n     * @param {Gulp} gulp\n     * @param {ITaskContext} ctx\n     * @returns {Promise<Src>}\n     *\n     * @memberOf Development\n     */\n    loadAssertTasks(gulp, ctx) {\n        let optask = ctx.option;\n        if (optask.asserts) {\n            let tasks = [];\n            _.each(_.keys(optask.asserts), name => {\n                let op;\n                let sr = optask.asserts[name];\n                if (_.isString(sr)) {\n                    op = { src: sr, loader: [{ name: name, pipes: [], watch: true }] };\n                }\n                else if (_.isNumber(sr)) {\n                    // watch with Operation.autoWatch.\n                    op = { loader: [{ oper: sr, name: name, pipes: [] }] };\n                }\n                else if (_.isFunction(sr)) {\n                    op = { loader: sr };\n                }\n                else if (_.isArray(sr)) {\n                    if (sr.length > 0) {\n                        if (_.isString(_.first(sr))) {\n                            op = { src: sr, loader: [{ name: name, pipes: [], watch: true }] };\n                        }\n                        else {\n                            op = { loader: sr, watch: true };\n                        }\n                    }\n                }\n                else {\n                    op = sr;\n                }\n                if (_.isNull(op) || _.isUndefined(op)) {\n                    return;\n                }\n                op.name = op.name || ctx.subTaskName(name);\n                op.src = op.src || (ctx.getSrc({ oper: development_core_1.Operation.build }) + '/**/*.' + name);\n                op.dist = op.dist || ctx.getDist({ oper: development_core_1.Operation.build });\n                tasks.push(op);\n            });\n            return Promise.all(_.map(tasks, task => {\n                return this.loadTasks(gulp, task, ctx)\n                    .then(sq => {\n                    return {\n                        task: task,\n                        sq: sq\n                    };\n                });\n            }))\n                .then(tseq => {\n                // asserts tasks run mutil.\n                let assertSeq = _.map(tseq, t => {\n                    return development_core_1.zipSequence(gulp, t.sq, ctx, (name, runway) => ctx.subTaskName(t.task.name, runway === development_core_1.RunWay.sequence ? '-asserts' : '-assertp')); // ctx.subTaskName(name + (runway === RunWay.sequence ? '-assert-seq' : '-assert-par')));\n                });\n                let taskname;\n                if (optask.assertsRunWay === development_core_1.RunWay.sequence) {\n                    taskname = assertSeq;\n                }\n                else {\n                    taskname = development_core_1.zipSequence(gulp, [assertSeq], ctx, (name, runway) => name + (runway === development_core_1.RunWay.sequence ? '-asserts' : '-assertp'));\n                }\n                return {\n                    order: optask.assertsOrder,\n                    taskName: taskname\n                };\n            });\n        }\n        else {\n            return Promise.resolve(null);\n        }\n    }\n    createLoader(option, env) {\n        let loader = null;\n        if (!_.isFunction(this.config.loaderFactory)) {\n            let factory = new LoaderFactory_1.LoaderFactory();\n            this.config.loaderFactory = (opt) => {\n                return factory.create(opt, env, this.config.contextFactory);\n            };\n        }\n        loader = this.config.loaderFactory(option, env);\n        return loader;\n    }\n    printHelp(help) {\n        if (help === 'en') {\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--context name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env  development or production;\r\n                 *  --context app setting\r\n                 *  --root path, set relative path of the development tool root.\r\n                 *  --watch  watch src file change or not. if changed will auto update to node service. \r\n                 *  --release release web app or not. if [--env production], default to release. \r\n                 *  --test  need auto load test file to node service.\r\n                 *  --deploy run deploy tasks to deploy project.  \r\n                 *  --serve start node web service or not.\r\n                 *  --task taskname  spruce task taskname\r\n                 **/`);\n        }\n        else {\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--context name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env 发布环境 默认开发环境development;\r\n                 *  --context 设置配置文件;\r\n                 *  --root path, 设置编译环境相对路径\r\n                 *  --watch  是否需要动态监听文件变化\r\n                 *  --release 是否release编译, [--env production] 默认release \r\n                 *  --test  启动自动化测试\r\n                 *  --deploy 运行加载deploy tasks, 编译发布项目。  \r\n                 *  --serve  是否在开发模式下 开启node web服务\r\n                 *  --task taskname  运行单独任务taskname\r\n                 **/`);\n        }\n    }\n}\nexports.Development = Development;\n","import * as _ from 'lodash';\r\nimport { Gulp, TaskCallback } from 'gulp';\r\n\r\nimport * as minimist from 'minimist';\r\nimport { ITaskLoader } from './ITaskLoader';\r\nimport { LoaderFactory } from './LoaderFactory';\r\nimport { Operation, ITaskConfig, Src, toSequence, runSequence, bindingConfig, zipSequence, flattenSequence, ITaskContext, ITaskInfo, ITask, IEnvOption, IDynamicTaskOption, RunWay } from 'development-core';\r\nimport { TaskOption, ITaskOption, IAssertOption } from './TaskOption';\r\nimport { IContext } from './IContext';\r\nimport { Context } from './Context';\r\nimport { DevelopConfig } from './DevelopConfig';\r\nimport * as chalk from 'chalk';\r\n\r\n\r\nexport class Development {\r\n\r\n    /**\r\n     * create development tool.\r\n     * \r\n     * @static\r\n     * @param {Gulp} gulp\r\n     * @param {string} dirname\r\n     * @param {(DevelopConfig | Array<ITaskOption | IAssertOption | IDynamicTaskOption>)} setting\r\n     * @param {any} [runWay=RunWay.sequence]\r\n     * @returns {Development}\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    static create(gulp: Gulp, dirname: string, setting: DevelopConfig | Array<ITaskOption | IAssertOption | IDynamicTaskOption>, runWay = RunWay.sequence, factory?: (cfg: ITaskConfig, parent?: ITaskContext) => ITaskContext): Development {\r\n        let option = _.isArray(setting) ? { tasks: setting, runWay: runWay } : setting;\r\n        if (!_.isUndefined(option.runWay)) {\r\n            option.runWay = runWay;\r\n        }\r\n        option.contextFactory = factory || ((cfg, parent?) => {\r\n            let ctx = new Context(cfg, parent);\r\n            if (parent && parent['add']) {\r\n                (<IContext>parent).add(ctx);\r\n            }\r\n            return ctx;\r\n        })\r\n\r\n        let devtool = new Development(dirname, option);\r\n        option.setupTask = option.setupTask || 'build';\r\n        gulp.task(option.setupTask, (callback: TaskCallback) => {\r\n            var options: IEnvOption = minimist(process.argv.slice(2), {\r\n                string: 'env',\r\n                default: { env: process.env.NODE_ENV || 'development' }\r\n            });\r\n            return devtool.run(gulp, options);\r\n        });\r\n\r\n        gulp.task('default', () => {\r\n            gulp.start(option.setupTask);\r\n        });\r\n        return devtool;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of Development.\r\n     * \r\n     * @param {string} dirname\r\n     * @param {DevelopConfig} config\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    private constructor(private dirname: string, protected config: DevelopConfig) {\r\n\r\n    }\r\n\r\n    /**\r\n     * run task.\r\n     * \r\n     * @param {Gulp} gulp\r\n     * @param {IEnvOption} env\r\n     * @returns {Promise<any>}\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    run(gulp: Gulp, env: IEnvOption): Promise<any> {\r\n        if (!env.root) {\r\n            env.root = this.dirname;\r\n        }\r\n\r\n        if (env.help) {\r\n            console.log(chalk.grey('... main help  ...'));\r\n            this.printHelp(env.help);\r\n        }\r\n\r\n        let gbctx = this.getContext(env);\r\n        return this.loadTasks(gulp, this.config.tasks, gbctx)\r\n            .then(tseq => {\r\n                // console.log(chalk.grey('run sequenec tasks:'), tseq);\r\n                if (this.config.runWay === RunWay.parallel) {\r\n                    return runSequence(gulp, [flattenSequence(gulp, tseq, gbctx)]);\r\n                } else {\r\n                    return runSequence(gulp, tseq);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                process.exit(1);\r\n            });\r\n    }\r\n\r\n    private globalctx: IContext;\r\n    getContext(env) {\r\n        if (!this.globalctx || this.globalctx.env !== env) {\r\n            let option = this.config.option || {};\r\n            this.globalctx = <IContext>this.config.contextFactory({\r\n                env: env,\r\n                option: option\r\n            });\r\n        }\r\n\r\n        return this.globalctx;\r\n    }\r\n\r\n\r\n    protected loadTasks(gulp: Gulp, tasks: TaskOption, parent: IContext): Promise<Src[]> {\r\n        return Promise.all<Src[]>(\r\n            _.map(_.isArray(tasks) ? <ITaskOption[]>tasks : [<ITaskOption>tasks], optask => {\r\n                optask.dist = optask.dist || 'dist';\r\n                // console.log(chalk.grey('begin load task via loader:'), optask.loader);\r\n                let loader = this.createLoader(optask, parent.env);\r\n\r\n                return loader.loadContext(parent.env)\r\n                    .then(ctx => {\r\n                        console.log(chalk.green('task context loaded.'));\r\n                        if (ctx.env.help) {\r\n                            if (ctx.printHelp) {\r\n                                console.log(chalk.grey('...development default help...'));\r\n                                ctx.printHelp(_.isString(ctx.env.help) ? ctx.env.help : '');\r\n                            }\r\n                            return [];\r\n                        } else {\r\n                            return Promise.all([\r\n                                loader.load(ctx),\r\n                                this.loadAssertTasks(gulp, ctx),\r\n                                this.loadSubTask(gulp, ctx)\r\n                            ])\r\n                                .then(tks => {\r\n                                    console.log(chalk.green('tasks loaded.'));\r\n                                    return this.setup(gulp, ctx, tks[0], tks[1], tks[2]);\r\n                                });\r\n                        }\r\n                    });\r\n            })\r\n        )\r\n            .then(tsq => {\r\n                let rst: Src[] = [];\r\n                _.each(tsq, t => {\r\n                    let tk = zipSequence(gulp, t, parent);\r\n                    if (tk) {\r\n                        rst.push(tk);\r\n                    }\r\n                });\r\n                return rst;\r\n\r\n            });\r\n    }\r\n\r\n    protected setup(gulp: Gulp, ctx: ITaskContext, tasks: ITask[], assertsTask: ITaskInfo, subGroupTask: ITaskInfo): Promise<Src[]> {\r\n        return Promise.resolve(toSequence(gulp, tasks, ctx))\r\n            .then(tsqs => {\r\n                // if (_.isFunction(context.option['runTasks'])) {\r\n                //     return context.option['runTasks'](context.oper, tsqs, subGroupTask, assertsTask);\r\n                // } else if (_.isArray(context.option['runTasks'])) {\r\n                //     tsqs = context.option['runTasks'];\r\n                // } else \r\n                if (ctx.runTasks) {\r\n                    return ctx.runTasks(tsqs, assertsTask, subGroupTask);\r\n                }\r\n                // console.log(assertsTask);\r\n                ctx.addToSequence(tsqs, assertsTask);\r\n                ctx.addToSequence(tsqs, subGroupTask);\r\n\r\n                return tsqs;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * load sub tasks as group task.\r\n     * \r\n     * @protected\r\n     * @param {Gulp} gulp\r\n     * @param {IContext} ctx\r\n     * @returns {Promise<ITaskInfo>}\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    protected loadSubTask(gulp: Gulp, ctx: IContext): Promise<ITaskInfo> {\r\n        if (ctx.option['tasks']) {\r\n            let optask = <ITaskOption>ctx.option;\r\n            _.each(_.isArray(optask.tasks) ? optask.tasks : [optask.tasks], subopt => {\r\n                subopt.name = ctx.subTaskName(subopt.name);\r\n                subopt.src = subopt.src || optask.src;\r\n                subopt.dist = subopt.dist || optask.dist;\r\n            });\r\n            return this.loadTasks(gulp, optask.tasks, ctx)\r\n                .then(subseq => {\r\n                    let taskname;\r\n                    if (optask.subTaskRunWay === RunWay.parallel) {\r\n                        taskname = [flattenSequence(gulp, subseq, ctx, (name, runway) => ctx.subTaskName(name, (runway === RunWay.sequence ? '-subs' : '-subp')))]\r\n                    } else {\r\n                        taskname = zipSequence(gulp, subseq, ctx, (name, runway) => ctx.subTaskName(name, (runway === RunWay.sequence ? '-subs' : '-subp')));\r\n                    }\r\n                    if (taskname) {\r\n                        return <ITaskInfo>{\r\n                            order: optask.subTaskOrder,\r\n                            taskName: taskname\r\n                        };\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                });\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * load asserts tasks.\r\n     * \r\n     * @protected\r\n     * @param {Gulp} gulp\r\n     * @param {ITaskContext} ctx\r\n     * @returns {Promise<Src>}\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    protected loadAssertTasks(gulp: Gulp, ctx: IContext): Promise<ITaskInfo> {\r\n        let optask = <IAssertOption>ctx.option;\r\n        if (optask.asserts) {\r\n            let tasks: IAssertOption[] = [];\r\n            _.each(_.keys(optask.asserts), name => {\r\n                let op: IAssertOption;\r\n                let sr = optask.asserts[name];\r\n                if (_.isString(sr)) {\r\n                    op = <IAssertOption>{ src: sr, loader: [{ name: name, pipes: [], watch: true }] };\r\n                } else if (_.isNumber(sr)) {\r\n                    // watch with Operation.autoWatch.\r\n                    op = <IAssertOption>{ loader: [{ oper: sr, name: name, pipes: [] }] };\r\n                } else if (_.isFunction(sr)) {\r\n                    op = { loader: sr };\r\n                } else if (_.isArray(sr)) {\r\n                    if (sr.length > 0) {\r\n                        if (_.isString(_.first(<string[]>sr))) {\r\n                            op = <IAssertOption>{ src: <string[]>sr, loader: [{ name: name, pipes: [], watch: true }] };\r\n                        } else {\r\n                            op = <IAssertOption>{ loader: <IDynamicTaskOption[]>sr, watch: true };\r\n                        }\r\n                    }\r\n                } else {\r\n                    op = sr;\r\n                }\r\n\r\n                if (_.isNull(op) || _.isUndefined(op)) {\r\n                    return;\r\n                }\r\n                op.name = op.name || ctx.subTaskName(name);\r\n                op.src = op.src || (ctx.getSrc({ oper: Operation.build }) + '/**/*.' + name);\r\n                op.dist = op.dist || ctx.getDist({ oper: Operation.build });\r\n                tasks.push(op);\r\n            });\r\n\r\n            return Promise.all(_.map(tasks, task => {\r\n                return this.loadTasks(gulp, <ITaskOption>task, ctx)\r\n                    .then(sq => {\r\n                        return {\r\n                            task: task,\r\n                            sq: sq\r\n                        }\r\n                    });\r\n            }))\r\n                .then(tseq => {\r\n                    // asserts tasks run mutil.\r\n                    let assertSeq = _.map(tseq, t => {\r\n                        return zipSequence(gulp, t.sq, ctx, (name, runway) => ctx.subTaskName(t.task.name, runway === RunWay.sequence ? '-asserts' : '-assertp')); // ctx.subTaskName(name + (runway === RunWay.sequence ? '-assert-seq' : '-assert-par')));\r\n                    });\r\n\r\n                    let taskname;\r\n                    if (optask.assertsRunWay === RunWay.sequence) {\r\n                        taskname = assertSeq;\r\n                    } else {\r\n                        taskname = zipSequence(gulp, [assertSeq], ctx, (name, runway) => name + (runway === RunWay.sequence ? '-asserts' : '-assertp'));\r\n                    }\r\n\r\n                    return <ITaskInfo>{\r\n                        order: optask.assertsOrder,\r\n                        taskName: taskname\r\n                    }\r\n                });\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    protected createLoader(option: TaskOption, env: IEnvOption): ITaskLoader {\r\n        let loader = null;\r\n        if (!_.isFunction(this.config.loaderFactory)) {\r\n            let factory = new LoaderFactory();\r\n            this.config.loaderFactory = (opt: ITaskOption) => {\r\n                return factory.create(opt, env, this.config.contextFactory);\r\n            }\r\n        }\r\n        loader = this.config.loaderFactory(option, env);\r\n        return loader;\r\n    }\r\n\r\n\r\n    protected printHelp(help: boolean | string) {\r\n        if (help === 'en') {\r\n\r\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--context name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env  development or production;\r\n                 *  --context app setting\r\n                 *  --root path, set relative path of the development tool root.\r\n                 *  --watch  watch src file change or not. if changed will auto update to node service. \r\n                 *  --release release web app or not. if [--env production], default to release. \r\n                 *  --test  need auto load test file to node service.\r\n                 *  --deploy run deploy tasks to deploy project.  \r\n                 *  --serve start node web service or not.\r\n                 *  --task taskname  spruce task taskname\r\n                 **/`);\r\n\r\n        } else {\r\n\r\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--context name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env 发布环境 默认开发环境development;\r\n                 *  --context 设置配置文件;\r\n                 *  --root path, 设置编译环境相对路径\r\n                 *  --watch  是否需要动态监听文件变化\r\n                 *  --release 是否release编译, [--env production] 默认release \r\n                 *  --test  启动自动化测试\r\n                 *  --deploy 运行加载deploy tasks, 编译发布项目。  \r\n                 *  --serve  是否在开发模式下 开启node web服务\r\n                 *  --task taskname  运行单独任务taskname\r\n                 **/`);\r\n\r\n        }\r\n    }\r\n}\r\n"]}