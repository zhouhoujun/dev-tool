"use strict";var __extends=this&&this.__extends||function(e,t){function n(){this.constructor=e}for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)},_=require("lodash"),minimist=require("minimist"),loaderFactory_1=require("./loaderFactory"),development_core_1=require("development-core"),Context_1=require("./Context"),chalk=require("chalk"),events_1=require("events"),Development=function(e){function t(t,n){var r=e.call(this)||this;return r.dirname=t,r.config=n,n.evnets&&_.each(_.keys(n.evnets),function(e){r.on(e,n.evnets[e])}),r}return __extends(t,e),t.create=function(e,n,r,o,s){void 0===o&&(o=development_core_1.RunWay.sequence);var a=_.isArray(r)?{tasks:r,runWay:o}:r;_.isUndefined(a.runWay)||(a.runWay=o),a.contextFactory=s||function(e,t){var n=new Context_1.Context(e,t);return t&&t.add&&t.add(n),n};var u=new t(n,a);return u.setup(e),u},t.prototype.run=function(e,t){var n=this;return this.setupTasks(e,t).then(function(r){var o=t.task?t.task.split(","):r,s=n.getContext(t);return n.emit("beforRun",o,s),n.config.runWay===development_core_1.RunWay.parallel?development_core_1.runSequence(e,[development_core_1.flattenSequence(e,o,s)]):development_core_1.runSequence(e,o)}).then(function(){var e=n.getContext(t);n.emit("afterRun",e)}).catch(function(e){console.error(e),process.exit(1)})},t.prototype.setupTasks=function(e,t){var n=this;t.root||(t.root=this.dirname),t.help&&(console.log(chalk.grey("... main help  ...")),this.printHelp(t.help));var r=this.getContext(t);return this.emit("beforSetup",r),this.loadTasks(e,this.config.tasks,r).then(function(e){return n.emit("afterSetup",e,r),e}).catch(function(e){console.error(e),process.exit(1)})},t.prototype.setup=function(e){var t=this,n=this.config;n.setupTask=n.setupTask||"build",e.task(n.setupTask,function(n){var r=minimist(process.argv.slice(2),{string:"env",default:{env:process.env.NODE_ENV||"development"}});return t.run(e,r)}),n.startTask=n.startTask||"start",e.task(n.startTask,function(n){var r=minimist(process.argv.slice(2),{string:"env",default:{env:process.env.NODE_ENV||"development"}});return r.task?t.run(e,r):Promise.reject("start task can not empty!")}),e.task("default",function(){e.start(n.setupTask)})},t.prototype.getContext=function(e){if(!this.globalctx||this.globalctx.env!==e){var t=this.config.option||{};this.globalctx=this.config.contextFactory({env:e,option:t})}return this.globalctx},t.prototype.loadTasks=function(e,t,n){var r=this,o=_.isArray(t)?t:[t];return Promise.all(_.map(o,function(t){if(t.oper&&(r.globalctx.oper&t.oper)<=0)return[];var o=r.createLoader(t,n);return o.loadContext(n.env).then(function(t){return t.env.help?(t.printHelp&&(console.log(chalk.grey("...development default help...")),t.printHelp(_.isString(t.env.help)?t.env.help:"")),[]):Promise.all([o.load(t),r.loadAssertTasks(e,t),r.loadSubTask(e,t)]).then(function(n){return r.setupTask(e,t,n[0],n[1],n[2])})})})).then(function(t){var r=[],s=_.map(t,function(e,t){return{opt:o[t],seq:e}}),a=development_core_1.sortOrder(s,function(e){return e.opt.order},n);return _.each(a,function(t,o){if(_.isArray(t))r.push(_.filter(_.map(t,function(t){return development_core_1.zipSequence(e,t.seq,n)}),function(e){return e}));else{var s=development_core_1.zipSequence(e,t.seq,n);s&&r.push(s)}}),r})},t.prototype.setupTask=function(e,t,n,r,o){return Promise.resolve(development_core_1.toSequence(e,n,t)).then(function(e){return t.runTasks?t.runTasks(e,r,o):(t.addToSequence(e,r),t.addToSequence(e,o),e)})},t.prototype.loadSubTask=function(e,t){if(t.option.tasks){var n=t.option;return _.each(_.isArray(n.tasks)?n.tasks:[n.tasks],function(e){if(!e.order){var r=t.to(n.subTaskOrder);!_.isNumber(r)&&r?n.assertsRunWay=n.assertsRunWay||r.runWay:n.subTaskRunWay&&(e.order={runWay:n.subTaskRunWay})}e.name=t.subTaskName(e.name)}),this.loadTasks(e,n.tasks,t).then(function(r){var o;return o=development_core_1.zipSequence(e,r,t,function(e,n){return t.subTaskName(e,n===development_core_1.RunWay.sequence?"-sub-seq":"-sub-paral")}),o?{order:n.subTaskOrder,taskName:o}:null})}return Promise.resolve(null)},t.prototype.loadAssertTasks=function(e,t){var n=t.option,r=t.to(n.assertsOrder);if(!_.isNumber(r)&&r&&(n.assertsRunWay=n.assertsRunWay||r.runWay),n.assertsRunWay=n.assertsRunWay||development_core_1.RunWay.parallel,n.asserts){var o=[];return _.each(_.keys(n.asserts),function(e){var s,a=n.asserts[e];_.isString(a)?s={src:a}:_.isNumber(a)?s={loader:[{oper:a,name:e,pipes:[]}]}:_.isFunction(a)?s={loader:a}:_.isArray(a)?a.length>0&&(s=_.some(a,function(e){return!_.isString(e)})?{loader:a,watch:!0}:{src:a}):s=a,_.isNull(s)||_.isUndefined(s)||(s.loader||(s.loader=[{name:e,pipes:[],watch:!0}]),s.name=s.name||t.subTaskName(e),s.src=s.src||t.getSrc({oper:development_core_1.Operation.default})+"/**/*."+e,s.order||(n.assertsRunWay?s.order={runWay:n.assertsRunWay}:_.isNumber(r)||(s.order={runWay:r.runWay})),o.push(s))}),this.loadTasks(e,o,t).then(function(r){var o;return o=development_core_1.zipSequence(e,r,t,function(e,t){return e+(t===development_core_1.RunWay.sequence?"-asserts-seq":"-assert-paral")}),{order:n.assertsOrder,taskName:o}})}return Promise.resolve(null)},t.prototype.createLoader=function(e,t){var n=this;if(_.isFunction(this.config.loaderFactory))return this.config.loaderFactory(e,t.env);var r=new loaderFactory_1.LoaderFactory;return r.create(e,t.env,function(e,r){return n.config.contextFactory(e,r||t)})},t.prototype.printHelp=function(e){"en"===e?console.log("\n                /**\n                 * gulp [build] [--env production|development] [--context name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\n                 * @params\n                 *  --env  development or production;\n                 *  --context app setting\n                 *  --root path, set relative path of the development tool root.\n                 *  --watch  watch src file change or not. if changed will auto update to node service. \n                 *  --release release web app or not. if [--env production], default to release. \n                 *  --test  need auto load test file to node service.\n                 *  --deploy run deploy tasks to deploy project.  \n                 *  --serve start node web service or not.\n                 *  --task taskname  spruce task taskname\n                 **/"):console.log("\n                /**\n                 * gulp [build] [--env production|development] [--context name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\n                 * @params\n                 *  --env 发布环境 默认开发环境development;\n                 *  --context 设置配置文件;\n                 *  --root path, 设置编译环境相对路径\n                 *  --watch  是否需要动态监听文件变化\n                 *  --release 是否release编译, [--env production] 默认release \n                 *  --test  启动自动化测试\n                 *  --deploy 运行加载deploy tasks, 编译发布项目。  \n                 *  --serve  是否在开发模式下 开启node web服务\n                 *  --task taskname  运行单独任务taskname\n                 **/")},t}(events_1.EventEmitter);exports.Development=Development;
//# sourceMappingURL=sourcemaps/Development.js.map
