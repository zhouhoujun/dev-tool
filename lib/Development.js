"use strict";function _classCallCheck(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_createClass=function(){function e(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(n,t,o){return t&&e(n.prototype,t),o&&e(n,o),n}}(),_=require("lodash"),minimist=require("minimist"),LoaderFactory_1=require("./LoaderFactory"),development_core_1=require("development-core"),Context_1=require("./Context"),chalk=require("chalk"),Development=function(){function e(n,t){_classCallCheck(this,e),this.dirname=n,this.config=t}return _createClass(e,[{key:"run",value:function(e,n){var t=this;n.root||(n.root=this.dirname),n.help&&(console.log(chalk.grey("... main help  ...")),this.printHelp(n.help));var o=this.getContext(n);return this.loadTasks(e,this.config.tasks,o).then(function(n){return t.config.runWay===development_core_1.RunWay.parallel?development_core_1.runSequence(e,[development_core_1.flattenSequence(e,n,o)]):development_core_1.runSequence(e,n)}).catch(function(e){console.error(e),process.exit(1)})}},{key:"getContext",value:function(e){if(!this.globalctx||this.globalctx.env!==e){var n=this.config.option||{};this.globalctx=this.config.contextFactory({env:e,option:n})}return this.globalctx}},{key:"loadTasks",value:function(e,n,t){var o=this;return Promise.all(_.map(_.isArray(n)?n:[n],function(n){n.dist=n.dist||"dist";var r=o.createLoader(n,t.env);return r.loadContext(t.env).then(function(n){return console.log(chalk.green("task context loaded.")),n.env.help?(n.printHelp&&(console.log(chalk.grey("...development default help...")),n.printHelp(_.isString(n.env.help)?n.env.help:"")),[]):Promise.all([r.load(n),o.loadAssertTasks(e,n),o.loadSubTask(e,n)]).then(function(t){return console.log(chalk.green("tasks loaded.")),o.setup(e,n,t[0],t[1],t[2])})})})).then(function(n){var o=[];return _.each(n,function(n){var r=development_core_1.zipSequence(e,n,t);r&&o.push(r)}),o})}},{key:"setup",value:function(e,n,t,o,r){return Promise.resolve(development_core_1.toSequence(e,t,n)).then(function(e){return n.runTasks?n.runTasks(e,o,r):(n.addToSequence(e,o),n.addToSequence(e,r),e)})}},{key:"loadSubTask",value:function(e,n){var t=this;if(!n.option.tasks)return Promise.resolve(null);var o=function(){var o=n.option;return _.each(_.isArray(o.tasks)?o.tasks:[o.tasks],function(e){e.name=n.subTaskName(e.name),e.src=e.src||o.src,e.dist=e.dist||o.dist}),{v:t.loadTasks(e,o.tasks,n).then(function(t){var r=void 0;return r=o.subTaskRunWay===development_core_1.RunWay.parallel?[development_core_1.flattenSequence(e,t,n,function(e,t){return n.subTaskName(e,t===development_core_1.RunWay.sequence?"-subs":"-subp")})]:development_core_1.zipSequence(e,t,n,function(e,t){return n.subTaskName(e,t===development_core_1.RunWay.sequence?"-subs":"-subp")}),r?{order:o.subTaskOrder,taskName:r}:null})}}();return"object"===("undefined"==typeof o?"undefined":_typeof(o))?o.v:void 0}},{key:"loadAssertTasks",value:function(e,n){var t=this,o=n.option;if(!o.asserts)return Promise.resolve(null);var r=function(){var r=[];return _.each(_.keys(o.asserts),function(e){var t=void 0,a=o.asserts[e];_.isString(a)?t={src:a,loader:[{name:e,pipes:[],watch:!0}]}:_.isNumber(a)?t={loader:[{oper:a,name:e,pipes:[]}]}:_.isFunction(a)?t={loader:a}:_.isArray(a)?a.length>0&&(t=_.isString(_.first(a))?{src:a,loader:[{name:e,pipes:[],watch:!0}]}:{loader:a,watch:!0}):t=a,_.isNull(t)||_.isUndefined(t)||(t.name=t.name||n.subTaskName(e),t.src=t.src||n.getSrc({oper:development_core_1.Operation.build})+"/**/*."+e,t.dist=t.dist||n.getDist({oper:development_core_1.Operation.build}),r.push(t))}),{v:Promise.all(_.map(r,function(o){return t.loadTasks(e,o,n).then(function(e){return{task:o,sq:e}})})).then(function(t){var r=_.map(t,function(t){return development_core_1.zipSequence(e,t.sq,n,function(e,o){return n.subTaskName(t.task.name,o===development_core_1.RunWay.sequence?"-asserts":"-assertp")})}),a=void 0;return a=o.assertsRunWay===development_core_1.RunWay.sequence?r:development_core_1.zipSequence(e,[r],n,function(e,n){return e+(n===development_core_1.RunWay.sequence?"-asserts":"-assertp")}),{order:o.assertsOrder,taskName:a}})}}();return"object"===("undefined"==typeof r?"undefined":_typeof(r))?r.v:void 0}},{key:"createLoader",value:function(e,n){var t=this,o=null;return _.isFunction(this.config.loaderFactory)||!function(){var e=new LoaderFactory_1.LoaderFactory;t.config.loaderFactory=function(o){return e.create(o,n,t.config.contextFactory)}}(),o=this.config.loaderFactory(e,n)}},{key:"printHelp",value:function(e){"en"===e?console.log("\n                /**\n                 * gulp [build] [--env production|development] [--context name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\n                 * @params\n                 *  --env  development or production;\n                 *  --context app setting\n                 *  --root path, set relative path of the development tool root.\n                 *  --watch  watch src file change or not. if changed will auto update to node service. \n                 *  --release release web app or not. if [--env production], default to release. \n                 *  --test  need auto load test file to node service.\n                 *  --deploy run deploy tasks to deploy project.  \n                 *  --serve start node web service or not.\n                 *  --task taskname  spruce task taskname\n                 **/"):console.log("\n                /**\n                 * gulp [build] [--env production|development] [--context name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\n                 * @params\n                 *  --env 发布环境 默认开发环境development;\n                 *  --context 设置配置文件;\n                 *  --root path, 设置编译环境相对路径\n                 *  --watch  是否需要动态监听文件变化\n                 *  --release 是否release编译, [--env production] 默认release \n                 *  --test  启动自动化测试\n                 *  --deploy 运行加载deploy tasks, 编译发布项目。  \n                 *  --serve  是否在开发模式下 开启node web服务\n                 *  --task taskname  运行单独任务taskname\n                 **/")}}],[{key:"create",value:function(n,t,o){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:development_core_1.RunWay.sequence,a=arguments[4],s=_.isArray(o)?{tasks:o,runWay:r}:o;_.isUndefined(s.runWay)||(s.runWay=r),s.contextFactory=a||function(e,n){var t=new Context_1.Context(e,n);return n&&n.add&&n.add(t),t};var u=new e(t,s);return s.setupTask=s.setupTask||"build",n.task(s.setupTask,function(e){var t=minimist(process.argv.slice(2),{string:"env",default:{env:process.env.NODE_ENV||"development"}});return u.run(n,t)}),n.task("default",function(){n.start(s.setupTask)}),u}}]),e}();exports.Development=Development;
//# sourceMappingURL=sourcemaps/Development.js.map
