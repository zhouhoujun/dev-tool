{"version":3,"sources":["loaders/dynamicTaskDefine.js","loaders/dynamicTaskDefine.ts"],"names":["Object","defineProperty","exports","value","modules","loadConfig","oper","option","env","loadTasks","config","lderOption","loader","dtask","dynamicTasks","generateTask","console","log","findTasks","then","tasks","concat","Promise","resolve","reject"],"mappings":"AAAA,YCEAA,QAAAC,eAAAC,QAAA,cAAAC,OAAA,IAAAH,QAAAC,QAAe,SAACG,GACZ,OACIC,WADgB,SACLC,EAAiBC,EAAqBC,GAC7C,OACIF,KAAMA,EACNE,IAAKA,EACLD,OAAQA,IAIhBE,UATgB,SASNC,GACN,GAAIC,GAAmCD,EAAOH,OAAOK,OACjDC,IAIJ,OAHIF,GAAWG,eACXD,EAAQH,EAAOK,aAAaJ,EAAWG,eAEvCV,GACAY,QAAQC,IAAIb,GACLM,EAAOQ,UAAUd,GACnBe,KAAK,SAAAC,GAKF,MAJAA,GAAQA,MACJP,IACAO,EAAQA,EAAMC,OAAOR,IAElBO,KAERP,EACAS,QAAQC,QAAQV,GAEhBS,QAAQE,OAAO","file":"../../loaders/dynamicTaskDefine.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = (modules) => {\n    return {\n        loadConfig(oper, option, env) {\n            return {\n                oper: oper,\n                env: env,\n                option: option\n            };\n        },\n        loadTasks(config) {\n            let lderOption = config.option.loader;\n            let dtask = [];\n            if (lderOption.dynamicTasks) {\n                dtask = config.generateTask(lderOption.dynamicTasks);\n            }\n            if (modules) {\n                console.log(modules);\n                return config.findTasks(modules)\n                    .then(tasks => {\n                    tasks = tasks || [];\n                    if (dtask) {\n                        tasks = tasks.concat(dtask);\n                    }\n                    return tasks;\n                });\n            }\n            else if (dtask) {\n                return Promise.resolve(dtask);\n            }\n            else {\n                return Promise.reject('can not find tasks!');\n            }\n        }\n    };\n};\n","import { ITask, Operation, IEnvOption, ITaskOption, ITaskConfig, ITaskDefine, IDynamicLoaderOption } from 'development-core';\r\n\r\nexport default (modules) => {\r\n    return <ITaskDefine>{\r\n        loadConfig(oper: Operation, option: ITaskOption, env: IEnvOption): ITaskConfig {\r\n            return {\r\n                oper: oper,\r\n                env: env,\r\n                option: option\r\n            }\r\n        },\r\n\r\n        loadTasks(config: ITaskConfig): Promise<ITask[]> {\r\n            let lderOption: IDynamicLoaderOption = config.option.loader;\r\n            let dtask: ITask[] = [];\r\n            if (lderOption.dynamicTasks) {\r\n                dtask = config.generateTask(lderOption.dynamicTasks);\r\n            }\r\n            if (modules) {\r\n                console.log(modules);\r\n                return config.findTasks(modules)\r\n                    .then(tasks => {\r\n                        tasks = tasks || [];\r\n                        if (dtask) {\r\n                            tasks = tasks.concat(dtask);\r\n                        }\r\n                        return tasks;\r\n                    });\r\n            } else if (dtask) {\r\n                return Promise.resolve(dtask);\r\n            } else {\r\n                return Promise.reject('can not find tasks!');\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}