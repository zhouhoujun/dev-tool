{"version":3,"sources":["loaders/BaseLoader.js","loaders/BaseLoader.ts"],"names":["BaseLoader","option","env","_classCallCheck","this","context","_this","contextDef","then","def","loadTasks","catch","err","console","error","self","getContext","tasks","mdl","getTaskModule","findTasks","loader","configModule","module","taskModule","_contextDef","Promise","resolve","getContextDefine","exports"],"mappings":"AAAA,6XCIAA,sBAII,QAAAA,GAAYC,EAAqBC,GAAgBC,gBAAAC,KAAAJ,GAC7CI,KAAKH,OAASA,EACdG,KAAKF,IAAMA,oDAGVG,GAAqB,GAAAC,GAAAF,IACtB,OAAOA,MAAKG,WACPC,KAAK,SAAAC,GACF,MAAOH,GAAKI,UAAUL,EAASI,KAElCE,MAAM,SAAAC,GACHC,QAAQC,MAAMF,yCAIdV,GACRE,KAAKF,IAAMA,CACX,IAAIa,GAAOX,IACX,OAAOA,MAAKG,WACPC,KAAK,SAAAC,GACF,MAAOA,GAAIO,YACPf,OAAQc,EAAKd,OACbC,IAAKA,MAGZS,MAAM,SAAAC,GACHC,QAAQC,MAAMF,uCAcNP,EAAuBI,GACvC,GAAIA,EAAIQ,MACJ,MAAOR,GAAIQ,MAAMZ,EAEjB,IAAIa,GAAMd,KAAKe,eACf,OAAOd,GAAQe,UAAUF,6CAO7B,GAAIG,GAAwBjB,KAAKH,OAAOoB,MACxC,OAAOA,GAAOC,cAAgBD,EAAOE,+CAIrC,GAAIF,GAAwBjB,KAAKH,OAAOoB,MACxC,OAAOA,GAAOG,YAAcH,EAAOE,0CAtBnC,MAJKnB,MAAKqB,cACNrB,KAAKqB,YAAcC,QAAQC,QAAQvB,KAAKwB,qBAGrCxB,KAAKqB,oBAxCEI,SAAA7B,WAAUA","file":"../../loaders/BaseLoader.js","sourcesContent":["\"use strict\";\nclass BaseLoader {\n    constructor(option, env) {\n        this.option = option;\n        this.env = env;\n    }\n    load(context) {\n        return this.contextDef\n            .then(def => {\n            return this.loadTasks(context, def);\n        })\n            .catch(err => {\n            console.error(err);\n        });\n    }\n    loadContext(env) {\n        this.env = env;\n        let self = this;\n        return this.contextDef\n            .then(def => {\n            return def.getContext({\n                option: self.option,\n                env: env\n            });\n        })\n            .catch(err => {\n            console.error(err);\n        });\n    }\n    get contextDef() {\n        if (!this._contextDef) {\n            this._contextDef = Promise.resolve(this.getContextDefine());\n        }\n        return this._contextDef;\n    }\n    loadTasks(context, def) {\n        if (def.tasks) {\n            return def.tasks(context);\n        }\n        else {\n            let mdl = this.getTaskModule();\n            return context.findTasks(mdl);\n        }\n    }\n    getConfigModule() {\n        let loader = this.option.loader;\n        return loader.configModule || loader.module;\n    }\n    getTaskModule() {\n        let loader = this.option.loader;\n        return loader.taskModule || loader.module;\n    }\n}\nexports.BaseLoader = BaseLoader;\n","import { ITask, IEnvOption, IContextDefine, ITaskContext, ITaskOption, ILoaderOption } from 'development-core';\r\nimport { ITaskLoader } from '../ITaskLoader';\r\n\r\n\r\nexport abstract class BaseLoader implements ITaskLoader {\r\n\r\n    protected option: ITaskOption;\r\n    protected env: IEnvOption;\r\n    constructor(option: ITaskOption, env?: IEnvOption) {\r\n        this.option = option;\r\n        this.env = env;\r\n    }\r\n\r\n    load(context: ITaskContext): Promise<ITask[]> {\r\n        return this.contextDef\r\n            .then(def => {\r\n                return this.loadTasks(context, def);\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n            });\r\n    }\r\n\r\n    loadContext(env: IEnvOption): Promise<ITaskContext> {\r\n        this.env = env;\r\n        let self = this;\r\n        return this.contextDef\r\n            .then(def => {\r\n                return def.getContext({\r\n                    option: self.option,\r\n                    env: env\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n            });\r\n    }\r\n\r\n    private _contextDef: Promise<IContextDefine>;\r\n    protected get contextDef(): Promise<IContextDefine> {\r\n        if (!this._contextDef) {\r\n            this._contextDef = Promise.resolve(this.getContextDefine());\r\n        }\r\n\r\n        return this._contextDef;\r\n    }\r\n\r\n\r\n    protected loadTasks(context: ITaskContext, def: IContextDefine): Promise<ITask[]> {\r\n        if (def.tasks) {\r\n            return def.tasks(context);\r\n        } else {\r\n            let mdl = this.getTaskModule();\r\n            return context.findTasks(mdl);\r\n        }\r\n    }\r\n\r\n    protected abstract getContextDefine(): IContextDefine | Promise<IContextDefine>;\r\n\r\n    protected getConfigModule(): string | Object {\r\n        let loader: ILoaderOption = this.option.loader;\r\n        return loader.configModule || loader.module;\r\n    }\r\n\r\n    protected getTaskModule(): string | Object {\r\n        let loader: ILoaderOption = this.option.loader;\r\n        return loader.taskModule || loader.module;\r\n    }\r\n}\r\n"]}