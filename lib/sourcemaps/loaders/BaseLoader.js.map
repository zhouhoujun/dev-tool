{"version":3,"sources":["loaders/BaseLoader.js"],"names":["development_core_1","require","dynamicTaskDefine_1","BaseLoader","option","_classCallCheck","this","getTaskDefine","def","loadTasks","cfg","mdl","_this","getTaskModule","findTasks","catch","err","console","error","oper","then","loadConfig","env","config","bindingConfig","_this3","Promise","resolve","reject","loader","taskDefine","getConfigModule","findTaskDefineInModule","default","module","taskModule","exports"],"mappings":"AAAA,6XACMA,mBAAqBC,QAAQ,oBAC7BC,oBAAsBD,QAAQ,uBAC9BE,sBACF,QAAAA,GAAYC,GAAQC,gBAAAC,KAAAH,GAChBG,KAAKF,OAASA,oDAHhBF,GAAAA,GAAAA,GAAAA,IAME,OAAOI,MAAKC,gBALdJ,KAMY,SAAAK,GALd,GAAAA,EAAAC,UAAoB,MAAAD,GAAAC,UAAAC,EAEnB,IAAAC,GAAAC,EAAAC,eASW,OAAOH,GAAII,UAAUH,KAGxBI,MAAM,SAAAC,GAXLC,QAAAC,MAAAF,uCAGFG,EAAIX,GAAIC,GAAAA,GAAAA,IACJ,OAAAH,MAAAC,gBACHa,KAFD,SAAAZ,GAII,MAAAA,GAAAa,WAAUF,EAAKN,EAAAA,OAAfS,KAEHF,KAAA,SAAAG,GACJ,MACIR,GAAMS,cAAOD,KAVXR,MAAP,SAAAC,GAaHC,QAAAC,MAAAF,2CAaaN,GAEV,MAdiBA,GAAAV,mBAAAwB,cAAAd,2CAGb,GAAAe,GAAAnB,IACH,OACIc,IAJEM,SAIG,SAAAC,EAAAC,GACN,GAAAC,GAAOJ,EAAKD,OAAAA,MAEXT,GAAMe,WACPb,EAAQC,EAAMF,aAErB,WAYW,GAAIL,GAAMc,EAAKM,iBACf/B,oBAAmBgC,uBAAuBrB,GACrCS,KAAK,SAAAZ,GAZZR,EAAAA,KAETe,MAAA,SAAAC,GAceW,EAAQzB,oBAAoB+B,QAAQtB,qDAX5C,GAAAkB,GAAIA,KAAAA,OAASA,MACb,OAAAA,GAAIA,cAAJA,EAAuBK,+CAGlB,GAAAL,GAAAvB,KAAAF,OAAAyB,MACD,OAAAA,GAAAM,YAAUN,EAAKE,eAIdK,SAAAjC,WAAAA","file":"../../loaders/BaseLoader.js","sourcesContent":["\"use strict\";\nconst development_core_1 = require('development-core');\nconst dynamicTaskDefine_1 = require('./dynamicTaskDefine');\nclass BaseLoader {\n    constructor(option) {\n        this.option = option;\n    }\n    load(cfg) {\n        return this.getTaskDefine()\n            .then(def => {\n            if (def.loadTasks) {\n                return def.loadTasks(cfg);\n            }\n            else {\n                let mdl = this.getTaskModule();\n                return cfg.findTasks(mdl);\n            }\n        })\n            .catch(err => {\n            console.error(err);\n        });\n    }\n    loadConfg(oper, env) {\n        return this.getTaskDefine()\n            .then(def => {\n            return def.loadConfig(oper, this.option, env);\n        })\n            .then(config => {\n            return this.bindingConfig(config);\n        })\n            .catch(err => {\n            console.error(err);\n        });\n    }\n    bindingConfig(cfg) {\n        cfg = development_core_1.bindingConfig(cfg);\n        return cfg;\n    }\n    getTaskDefine() {\n        return new Promise((resolve, reject) => {\n            let loader = this.option.loader;\n            if (loader.taskDefine) {\n                resolve(loader.taskDefine);\n            }\n            else {\n                let mdl = this.getConfigModule();\n                development_core_1.findTaskDefineInModule(mdl)\n                    .then(def => {\n                    resolve(def);\n                })\n                    .catch(err => {\n                    resolve(dynamicTaskDefine_1.default(mdl));\n                });\n            }\n        });\n    }\n    getConfigModule() {\n        let loader = this.option.loader;\n        return loader.configModule || loader.module;\n    }\n    getTaskModule() {\n        let loader = this.option.loader;\n        return loader.taskModule || loader.module;\n    }\n}\nexports.BaseLoader = BaseLoader;\n"]}