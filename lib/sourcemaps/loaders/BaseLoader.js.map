{"version":3,"sources":["loaders/BaseLoader.js","loaders/BaseLoader.ts"],"names":["BaseLoader","option","env","factory","_classCallCheck","this","context","_this","contextDef","then","def","loadTasks","catch","err","console","error","self","getContext","createContext","tasks","mdl","getTaskModule","findTasks","loader","configModule","module","taskModule","_contextDef","Promise","resolve","getContextDefine","exports"],"mappings":"AAAA,6XCMAA,sBAEI,QAAAA,GAAsBC,EAA+BC,EAA4BC,GAAmEC,gBAAAC,KAAAL,GAA9HK,KAAAJ,OAAAA,EAA+BI,KAAAH,IAAAA,EAA4BG,KAAAF,QAAAA,oDAI5EG,GAAiB,GAAAC,GAAAF,IAClB,OAAOA,MAAKG,WACPC,KAAK,SAAAC,GACF,MAAOH,GAAKI,UAAUL,EAASI,KAElCE,MAAM,SAAAC,GACHC,QAAQC,MAAMF,yCAIdX,GACRG,KAAKH,IAAMA,CACX,IAAIc,GAAOX,IACX,OAAOA,MAAKG,WACPC,KAAK,SAAAC,GACF,MAAiBA,GAAIO,YACjBhB,OAAQe,EAAKf,OACbC,IAAKA,EACLgB,cAAeF,EAAKb,YAG3BS,MAAM,SAAAC,GACHC,QAAQC,MAAMF,uCAcNP,EAAuBI,GACvC,GAAIA,EAAIS,MACJ,MAAOT,GAAIS,MAAMb,EAEjB,IAAIc,GAAMf,KAAKgB,eACf,OAAOf,GAAQgB,UAAUF,6CAO7B,GAAIG,GAAwBlB,KAAKJ,OAAOsB,MACxC,OAAOA,GAAOC,cAAgBD,EAAOE,+CAIrC,GAAIF,GAAwBlB,KAAKJ,OAAOsB,MACxC,OAAOA,GAAOG,YAAcH,EAAOE,0CAtBnC,MAJKpB,MAAKsB,cACNtB,KAAKsB,YAAcC,QAAQC,QAAQxB,KAAKyB,qBAGrCzB,KAAKsB,oBAtCEI,SAAA/B,WAAUA","file":"../../loaders/BaseLoader.js","sourcesContent":["\"use strict\";\nclass BaseLoader {\n    constructor(option, env, factory) {\n        this.option = option;\n        this.env = env;\n        this.factory = factory;\n    }\n    load(context) {\n        return this.contextDef\n            .then(def => {\n            return this.loadTasks(context, def);\n        })\n            .catch(err => {\n            console.error(err);\n        });\n    }\n    loadContext(env) {\n        this.env = env;\n        let self = this;\n        return this.contextDef\n            .then(def => {\n            return def.getContext({\n                option: self.option,\n                env: env,\n                createContext: self.factory\n            });\n        })\n            .catch(err => {\n            console.error(err);\n        });\n    }\n    get contextDef() {\n        if (!this._contextDef) {\n            this._contextDef = Promise.resolve(this.getContextDefine());\n        }\n        return this._contextDef;\n    }\n    loadTasks(context, def) {\n        if (def.tasks) {\n            return def.tasks(context);\n        }\n        else {\n            let mdl = this.getTaskModule();\n            return context.findTasks(mdl);\n        }\n    }\n    getConfigModule() {\n        let loader = this.option.loader;\n        return loader.configModule || loader.module;\n    }\n    getTaskModule() {\n        let loader = this.option.loader;\n        return loader.taskModule || loader.module;\n    }\n}\nexports.BaseLoader = BaseLoader;\n","import { ITask, IEnvOption, IContextDefine, ITaskContext, ITaskConfig } from 'development-core';\r\nimport { ITaskOption, ILoaderOption } from '../TaskOption';\r\nimport { IContext } from '../IContext';\r\nimport { ITaskLoader } from '../ITaskLoader';\r\n\r\n\r\nexport abstract class BaseLoader implements ITaskLoader {\r\n\r\n    constructor(protected option: ITaskOption, protected env?: IEnvOption, protected factory?: (cfg: ITaskConfig, parent?: ITaskContext) => ITaskContext) {\r\n\r\n    }\r\n\r\n    load(context: IContext): Promise<ITask[]> {\r\n        return this.contextDef\r\n            .then(def => {\r\n                return this.loadTasks(context, def);\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n            });\r\n    }\r\n\r\n    loadContext(env: IEnvOption): Promise<IContext> {\r\n        this.env = env;\r\n        let self = this;\r\n        return this.contextDef\r\n            .then(def => {\r\n                return <IContext>def.getContext({\r\n                    option: self.option,\r\n                    env: env,\r\n                    createContext: self.factory\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n            });\r\n    }\r\n\r\n    private _contextDef: Promise<IContextDefine>;\r\n    protected get contextDef(): Promise<IContextDefine> {\r\n        if (!this._contextDef) {\r\n            this._contextDef = Promise.resolve(this.getContextDefine());\r\n        }\r\n\r\n        return this._contextDef;\r\n    }\r\n\r\n\r\n    protected loadTasks(context: ITaskContext, def: IContextDefine): Promise<ITask[]> {\r\n        if (def.tasks) {\r\n            return def.tasks(context);\r\n        } else {\r\n            let mdl = this.getTaskModule();\r\n            return context.findTasks(mdl);\r\n        }\r\n    }\r\n\r\n    protected abstract getContextDefine(): IContextDefine | Promise<IContextDefine>;\r\n\r\n    protected getConfigModule(): string | Object {\r\n        let loader: ILoaderOption = this.option.loader;\r\n        return loader.configModule || loader.module;\r\n    }\r\n\r\n    protected getTaskModule(): string | Object {\r\n        let loader: ILoaderOption = this.option.loader;\r\n        return loader.taskModule || loader.module;\r\n    }\r\n}\r\n"]}