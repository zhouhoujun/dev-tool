{"version":3,"sources":["loaders/BaseLoader.ts"],"names":["BaseLoader","option","env","factory","this","prototype","load","context","_this","contextDef","then","def","loadTasks","catch","err","console","error","loadContext","self","getContext","createContext","Object","defineProperty","_contextDef","Promise","resolve","getContextDefine","tasks","mdl","getTaskModule","findTasks","getConfigModule","loader","configModule","module","taskModule","exports"],"mappings":"YAMA,IAAAA,YAAA,WAEI,QAAAA,GAAsBC,EAA+BC,EAA4BC,GAA3DC,KAAAH,OAAAA,EAA+BG,KAAAF,IAAAA,EAA4BE,KAAAD,QAAAA,EA4DrF,MAxDIH,GAAAK,UAAAC,KAAA,SAAKC,GAAL,GAAAC,GAAAJ,IACI,OAAOA,MAAKK,WACPC,KAAK,SAAAC,GACF,MAAOH,GAAKI,UAAUL,EAASI,KAElCE,MAAM,SAAAC,GACHC,QAAQC,MAAMF,MAI1Bd,EAAAK,UAAAY,YAAA,SAAYf,GACRE,KAAKF,IAAMA,CACX,IAAIgB,GAAOd,IACX,OAAOA,MAAKK,WACPC,KAAK,SAAAC,GACF,MAAiBA,GAAIQ,YACjBlB,OAAQiB,EAAKjB,OACbC,IAAKA,EACLkB,cAAeF,EAAKf,YAG3BU,MAAM,SAAAC,GACHC,QAAQC,MAAMF,MAK1BO,OAAAC,eAActB,EAAAK,UAAA,kBAAd,WAKI,MAJKD,MAAKmB,cACNnB,KAAKmB,YAAcC,QAAQC,QAAQrB,KAAKsB,qBAGrCtB,KAAKmB,6CAINvB,EAAAK,UAAAO,UAAV,SAAoBL,EAAuBI,GACvC,GAAIA,EAAIgB,MACJ,MAAOhB,GAAIgB,MAAMpB,EAEjB,IAAIqB,GAAMxB,KAAKyB,eACf,OAAOtB,GAAQuB,UAAUF,IAMvB5B,EAAAK,UAAA0B,gBAAV,WACI,GAAIC,GAAwB5B,KAAKH,OAAO+B,MACxC,OAAOA,GAAOC,cAAgBD,EAAOE,QAG/BlC,EAAAK,UAAAwB,cAAV,WACI,GAAIG,GAAwB5B,KAAKH,OAAO+B,MACxC,OAAOA,GAAOG,YAAcH,EAAOE,QAE3ClC,IA9DsBoC,SAAApC,WAAAA","file":"../../loaders/BaseLoader.js","sourcesContent":["import { ITask, IEnvOption, IContextDefine, ITaskContext, ITaskConfig } from 'development-core';\r\nimport { ITaskOption, ILoaderOption } from '../TaskOption';\r\nimport { IContext } from '../IContext';\r\nimport { ITaskLoader } from '../ITaskLoader';\r\n\r\n\r\nexport abstract class BaseLoader implements ITaskLoader {\r\n\r\n    constructor(protected option: ITaskOption, protected env?: IEnvOption, protected factory?: (cfg: ITaskConfig, parent?: ITaskContext) => ITaskContext) {\r\n\r\n    }\r\n\r\n    load(context: IContext): Promise<ITask[]> {\r\n        return this.contextDef\r\n            .then(def => {\r\n                return this.loadTasks(context, def);\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n            });\r\n    }\r\n\r\n    loadContext(env: IEnvOption): Promise<IContext> {\r\n        this.env = env;\r\n        let self = this;\r\n        return this.contextDef\r\n            .then(def => {\r\n                return <IContext>def.getContext({\r\n                    option: self.option,\r\n                    env: env,\r\n                    createContext: self.factory\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n            });\r\n    }\r\n\r\n    private _contextDef: Promise<IContextDefine>;\r\n    protected get contextDef(): Promise<IContextDefine> {\r\n        if (!this._contextDef) {\r\n            this._contextDef = Promise.resolve(this.getContextDefine());\r\n        }\r\n\r\n        return this._contextDef;\r\n    }\r\n\r\n\r\n    protected loadTasks(context: ITaskContext, def: IContextDefine): Promise<ITask[]> {\r\n        if (def.tasks) {\r\n            return def.tasks(context);\r\n        } else {\r\n            let mdl = this.getTaskModule();\r\n            return context.findTasks(mdl);\r\n        }\r\n    }\r\n\r\n    protected abstract getContextDefine(): IContextDefine | Promise<IContextDefine>;\r\n\r\n    protected getConfigModule(): string | Object {\r\n        let loader: ILoaderOption = this.option.loader;\r\n        return loader.configModule || loader.module;\r\n    }\r\n\r\n    protected getTaskModule(): string | Object {\r\n        let loader: ILoaderOption = this.option.loader;\r\n        return loader.taskModule || loader.module;\r\n    }\r\n}\r\n"]}