{"version":3,"sources":["loaders/BaseLoader.ts"],"names":[],"mappings":"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","file":"../../loaders/BaseLoader.js","sourcesContent":["import { ITask, ITaskDefine, IContextDefine, ITaskContext } from 'development-core';\r\nimport { ITaskOption, ILoaderOption } from '../TaskOption';\r\nimport { IContext } from '../IContext';\r\nimport { ITaskLoader } from '../ITaskLoader';\r\n\r\n\r\nexport abstract class BaseLoader implements ITaskLoader {\r\n\r\n    constructor(protected ctx: IContext) {\r\n    }\r\n\r\n    get option(): ITaskOption {\r\n        return this.ctx.option as ITaskOption;\r\n    }\r\n    load(): Promise<ITask[]> {\r\n        return this.taskDef\r\n            .then((def) => {\r\n                if (def.loadConfig) {\r\n                    this.ctx.setConfig(def.loadConfig(this.ctx.option, this.ctx.oper));\r\n                }\r\n                if (def['getContext']) {\r\n                    let cdef = def as IContextDefine;\r\n                    let customCtx = cdef.getContext(this.ctx.getConfig());\r\n                    this.ctx.setConfig(customCtx.getConfig());\r\n                }\r\n                if (def['setContext']) {\r\n                    let cdef = def as IContextDefine;\r\n                    cdef.setContext(this.ctx);\r\n                }\r\n                return def;\r\n            })\r\n            .then(def => {\r\n                return this.loadTasks(this.ctx, def);\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n            });\r\n    }\r\n\r\n    private _taskDef: Promise<ITaskDefine>;\r\n    protected get taskDef(): Promise<ITaskDefine> {\r\n        if (!this._taskDef) {\r\n            this._taskDef = Promise.resolve(this.loadTaskDefine());\r\n        }\r\n\r\n        return this._taskDef;\r\n    }\r\n\r\n\r\n    protected loadTasks(context: ITaskContext, def: ITaskDefine): Promise<ITask[]> {\r\n        def = def || {};\r\n        if (def.tasks) {\r\n            return def.tasks(context);\r\n        } else if (def.loadTasks) {\r\n            return def.loadTasks(context);\r\n        } else {\r\n            let mdl = this.getTaskModule();\r\n            return context.findTasks(mdl);\r\n        }\r\n    }\r\n\r\n    protected abstract loadTaskDefine(): ITaskDefine | Promise<ITaskDefine>;\r\n\r\n    protected getConfigModule(): string | Object {\r\n        let loader: ILoaderOption = this.option.loader;\r\n        return loader.configModule || loader.module;\r\n    }\r\n\r\n    protected getTaskModule(): string | Object {\r\n        let loader: ILoaderOption = this.option.loader;\r\n        return loader.taskModule || loader.module;\r\n    }\r\n}\r\n"]}