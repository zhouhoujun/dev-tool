{"version":3,"sources":["loaders/BaseLoader.js","loaders/BaseLoader.ts"],"names":["development_core_1","require","dynamicTaskDefine_1","BaseLoader","option","_classCallCheck","this","cfg","_this","getTaskDefine","then","def","loadTasks","mdl","getTaskModule","findTasks","catch","err","console","error","env","_this2","loadConfig","config","bindingConfig","_this3","Promise","resolve","reject","loader","taskDefine","getConfigModule","findTaskDefineInModule","default","configModule","module","taskModule","exports"],"mappings":"AAAA,6XCCAA,mBAAAC,QAIO,oBAGPC,oBAAAD,QAA8B,uBAC9BE,sBAGI,QAAAA,GAAYC,GAAmBC,gBAAAC,KAAAH,GAC3BG,KAAKF,OAASA,oDAGbG,GAAgB,GAAAC,GAAAF,IACjB,OAAOA,MAAKG,gBACPC,KAAK,SAAAC,GACF,GAAIA,EAAIC,UACJ,MAAOD,GAAIC,UAAUL,EAErB,IAAIM,GAAML,EAAKM,eACf,OAAOP,GAAIQ,UAAUF,KAG5BG,MAAM,SAAAC,GACHC,QAAQC,MAAMF,uCAIhBG,GAAe,GAAAC,GAAAf,IAErB,OAAOA,MAAKG,gBACPC,KAAK,SAAAC,GACF,MAAOA,GAAIW,WAAWD,EAAKjB,OAAQgB,KAEtCV,KAAK,SAAAa,GACF,MAAOF,GAAKG,cAAcD,KAE7BP,MAAM,SAAAC,GACHC,QAAQC,MAAMF,2CAIFV,GAEpB,MADAA,GAAMP,mBAAAwB,cAAcjB,2CAID,GAAAkB,GAAAnB,IACnB,OAAO,IAAIoB,SAAQ,SAACC,EAASC,GACzB,GAAIC,GAAwBJ,EAAKrB,OAAOyB,MAEpCA,GAAOC,WACPH,EAAQE,EAAOC,aACZ,WACH,GAAIjB,GAAMY,EAAKM,iBACf/B,oBAAAgC,uBAAuBnB,GAClBH,KAAK,SAAAC,GACFgB,EAAQhB,KAEXK,MAAM,SAAAC,GACHU,EAAQzB,oBAAA+B,QAAkBpB,qDAO1C,GAAIgB,GAAwBvB,KAAKF,OAAOyB,MACxC,OAAOA,GAAOK,cAAgBL,EAAOM,+CAIrC,GAAIN,GAAwBvB,KAAKF,OAAOyB,MACxC,OAAOA,GAAOO,YAAcP,EAAOM,eAnErBE,SAAAlC,WAAUA","file":"../../loaders/BaseLoader.js","sourcesContent":["\"use strict\";\nconst development_core_1 = require('development-core');\n// import * as chalk from 'chalk';\nconst dynamicTaskDefine_1 = require('./dynamicTaskDefine');\nclass BaseLoader {\n    constructor(option) {\n        this.option = option;\n    }\n    load(cfg) {\n        return this.getTaskDefine()\n            .then(def => {\n            if (def.loadTasks) {\n                return def.loadTasks(cfg);\n            }\n            else {\n                let mdl = this.getTaskModule();\n                return cfg.findTasks(mdl);\n            }\n        })\n            .catch(err => {\n            console.error(err);\n        });\n    }\n    loadConfg(env) {\n        return this.getTaskDefine()\n            .then(def => {\n            return def.loadConfig(this.option, env);\n        })\n            .then(config => {\n            return this.bindingConfig(config);\n        })\n            .catch(err => {\n            console.error(err);\n        });\n    }\n    bindingConfig(cfg) {\n        cfg = development_core_1.bindingConfig(cfg);\n        return cfg;\n    }\n    getTaskDefine() {\n        return new Promise((resolve, reject) => {\n            let loader = this.option.loader;\n            if (loader.taskDefine) {\n                resolve(loader.taskDefine);\n            }\n            else {\n                let mdl = this.getConfigModule();\n                development_core_1.findTaskDefineInModule(mdl)\n                    .then(def => {\n                    resolve(def);\n                })\n                    .catch(err => {\n                    resolve(dynamicTaskDefine_1.default(mdl));\n                });\n            }\n        });\n    }\n    getConfigModule() {\n        let loader = this.option.loader;\n        return loader.configModule || loader.module;\n    }\n    getTaskModule() {\n        let loader = this.option.loader;\n        return loader.taskModule || loader.module;\n    }\n}\nexports.BaseLoader = BaseLoader;\n","import * as _ from 'lodash';\r\nimport {\r\n    bindingConfig, ITask, IEnvOption\r\n    , ITaskOption, ILoaderOption, ITaskConfig, ITaskDefine\r\n    , findTaskDefineInModule\r\n} from 'development-core';\r\nimport { ITaskLoader } from '../ITaskLoader';\r\n// import * as chalk from 'chalk';\r\nimport dynamicTaskDefine from './dynamicTaskDefine';\r\nexport abstract class BaseLoader implements ITaskLoader {\r\n\r\n    protected option: ITaskOption;\r\n    constructor(option: ITaskOption) {\r\n        this.option = option;\r\n    }\r\n\r\n    load(cfg: ITaskConfig): Promise<ITask[]> {\r\n        return this.getTaskDefine()\r\n            .then(def => {\r\n                if (def.loadTasks) {\r\n                    return def.loadTasks(cfg);\r\n                } else {\r\n                    let mdl = this.getTaskModule();\r\n                    return cfg.findTasks(mdl);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n            });\r\n    }\r\n\r\n    loadConfg(env: IEnvOption): Promise<ITaskConfig> {\r\n\r\n        return this.getTaskDefine()\r\n            .then(def => {\r\n                return def.loadConfig(this.option, env);\r\n            })\r\n            .then(config => {\r\n                return this.bindingConfig(config);\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n            });\r\n    }\r\n\r\n    protected bindingConfig(cfg: ITaskConfig): ITaskConfig {\r\n        cfg = bindingConfig(cfg);\r\n        return cfg;\r\n    }\r\n\r\n    protected getTaskDefine(): Promise<ITaskDefine> {\r\n        return new Promise((resolve, reject) => {\r\n            let loader: ILoaderOption = this.option.loader;\r\n\r\n            if (loader.taskDefine) {\r\n                resolve(loader.taskDefine);\r\n            } else {\r\n                let mdl = this.getConfigModule();\r\n                findTaskDefineInModule(mdl)\r\n                    .then(def => {\r\n                        resolve(def);\r\n                    })\r\n                    .catch(err => {\r\n                        resolve(dynamicTaskDefine(mdl));\r\n                    });\r\n            }\r\n        });\r\n    }\r\n\r\n    protected getConfigModule(): string | Object {\r\n        let loader: ILoaderOption = this.option.loader;\r\n        return loader.configModule || loader.module;\r\n    }\r\n\r\n    protected getTaskModule(): string | Object {\r\n        let loader: ILoaderOption = this.option.loader;\r\n        return loader.taskModule || loader.module;\r\n    }\r\n}\r\n"]}