{"version":3,"sources":["loaders/BaseLoader.js"],"names":["_","require","requireDir","chalk","BaseLoader","option","_classCallCheck","this","getTaskDefine","def","moduleTaskLoader","cfg","mdl","_this","getTaskModule","loadTaskFromModule","catch","err","console","error","oper","then","moduleTaskConfig","env","config","bindingConfig","_this3","findTasksInDir","dirs","loadTaskFromDir","findTasksInModule","tsdef","loader","taskDefine","findTaskDefine","Promise","resolve","reject","ml","module","isString","isTaskDefine","each","keys","f","exceptObj","arguments","length","undefined","isTaskFunc","isFunction","_this5","tasks","push","isArray","sm","concat","findTasks","key","log","grey","cyan","taskfuns","red","_this6","map","dir","recurse"],"mappings":"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","file":"../../loaders/BaseLoader.js","sourcesContent":["\"use strict\";\nconst _ = require('lodash');\nconst requireDir = require('require-dir');\nconst chalk = require('chalk');\nclass BaseLoader {\n    constructor(option) {\n        this.option = option;\n    }\n    load(cfg) {\n        return this.getTaskDefine()\n            .then(def => {\n            if (def.moduleTaskLoader) {\n                return def.moduleTaskLoader(cfg);\n            }\n            else {\n                let mdl = this.getTaskModule();\n                return this.loadTaskFromModule(mdl);\n            }\n        })\n            .catch(err => {\n            console.error(err);\n        });\n    }\n    loadConfg(oper, env) {\n        return this.getTaskDefine()\n            .then(def => {\n            return def.moduleTaskConfig(oper, this.option, env);\n        })\n            .then(config => {\n            return this.bindingConfig(config);\n        })\n            .catch(err => {\n            console.error(err);\n        });\n    }\n    bindingConfig(cfg) {\n        cfg.findTasksInDir = cfg.findTasksInDir || ((dirs) => {\n            return this.loadTaskFromDir(dirs);\n        });\n        cfg.findTasksInModule = cfg.findTasksInModule || ((mdl) => {\n            return this.loadTaskFromModule(mdl);\n        });\n        return cfg;\n    }\n    getTaskDefine() {\n        let tsdef = null;\n        let loader = this.option.loader;\n        if (loader.taskDefine) {\n            tsdef = loader.taskDefine;\n        }\n        else {\n            let mdl = this.getConfigModule();\n            tsdef = this.findTaskDefine(mdl);\n        }\n        if (tsdef) {\n            return Promise.resolve(tsdef);\n        }\n        else {\n            return Promise.reject('can not found task define.');\n        }\n    }\n    getConfigModule() {\n        let loader = this.option.loader;\n        let ml = loader.configModule || loader.module;\n        if (_.isString(ml)) {\n            return require(ml);\n        }\n        else {\n            return ml;\n        }\n    }\n    getTaskModule() {\n        let loader = this.option.loader;\n        let ml = loader.taskModule || loader.module;\n        if (_.isString(ml)) {\n            return require(ml);\n        }\n        else {\n            return ml;\n        }\n    }\n    findTaskDefine(mdl) {\n        let def = null;\n        if (this.isTaskDefine(mdl)) {\n            def = mdl;\n        }\n        if (!def && mdl) {\n            _.each(_.keys(mdl), f => {\n                if (def) {\n                    return false;\n                }\n                if (this.isTaskDefine(mdl[f])) {\n                    def = mdl[f];\n                }\n                return true;\n            });\n        }\n        return def;\n    }\n    isTaskDefine(mdl) {\n        if (!mdl) {\n            return false;\n        }\n        let loader = this.option.loader;\n        if (loader.isTaskDefine) {\n            return loader.isTaskDefine(mdl);\n        }\n        return _.isFunction(mdl['moduleTaskConfig']);\n    }\n    isTaskFunc(mdl, exceptObj = false) {\n        if (!mdl) {\n            return false;\n        }\n        let loader = this.option.loader;\n        if (loader.isTaskFunc) {\n            return loader.isTaskFunc(mdl);\n        }\n        if (_.isFunction(mdl)) {\n            return true;\n        }\n        return exceptObj;\n    }\n    findTasks(mdl) {\n        let tasks = [];\n        if (!mdl) {\n            return tasks;\n        }\n        if (this.isTaskFunc(mdl)) {\n            tasks.push(mdl);\n        }\n        else if (!this.isTaskDefine(mdl)) {\n            if (_.isArray(mdl)) {\n                _.each(mdl, sm => {\n                    tasks.concat(this.findTasks(sm));\n                });\n            }\n            else {\n                _.each(_.keys(mdl), key => {\n                    console.log(chalk.grey('register task from:'), chalk.cyan(key));\n                    tasks = tasks.concat(this.findTasks(mdl[key]));\n                });\n            }\n        }\n        return tasks;\n    }\n    loadTaskFromModule(mdl) {\n        let taskfuns = this.findTasks(mdl);\n        if (!taskfuns || taskfuns.length < 1) {\n            console.log(chalk.red('error module:'), mdl);\n            return Promise.reject('has not found task in module.');\n        }\n        else {\n            return Promise.resolve(taskfuns);\n        }\n    }\n    loadTaskFromDir(dirs) {\n        return Promise.all(_.map(_.isArray(dirs) ? dirs : [dirs], dir => {\n            console.log(chalk.grey('begin load task from dir'), chalk.cyan(dir));\n            let mdl = requireDir(dir, { recurse: true });\n            return this.loadTaskFromModule(mdl);\n        }))\n            .then(tasks => {\n            return _.flatten(tasks);\n        });\n    }\n}\nexports.BaseLoader = BaseLoader;\n"]}