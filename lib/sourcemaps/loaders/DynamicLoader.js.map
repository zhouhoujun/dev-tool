{"version":3,"sources":["loaders/DynamicLoader.js"],"names":["BaseLoader_1","require","DynamicLoader","option","_classCallCheck","this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","tsdef","loader","taskDefine","dynamicTaskDefine","getTaskModule","Promise","resolve","BaseLoader","exports","modules","moduleTaskConfig","oper","env","tasks","subGroupTask","moduleTaskLoader","config","concat","dynamicTasks","lderOption"],"mappings":"AAAA,43BACMA,aAAeC,QAAQ,gBACvBC,0BACF,QAAAA,GAAYC,GAAQ,MAAAC,iBAAAC,KAAAH,GAAAI,2BAAAD,MAAAH,EAAAK,WAAAC,OAAAC,eAAAP,IAAAQ,KAAAL,KACVF,gFAGN,GAAIQ,GAAQ,KACRC,EAASP,KAAKF,OAAOS,MAL7B,OAFEZ,GAQMY,EAAOC,WAREZ,EAAQY,WAYTC,kBAAkBF,EAAQP,KAAKU,iBAV/CC,QAAAC,QAAYd,UADYH,aAAakB,WACjBC,SAAAjB,cAAAA,aAEnB,IAAAY,mBAAA,SAAAX,EAAAiB,GAeD,OACIC,iBADG,SACcC,EAAMnB,EAAQoB,GAC3B,OACID,KAAMA,EAhBVX,IAAAA,EACAC,OAAAA,EACAA,SAaO,SAbAC,EAAYW,GAMhBR,MALHL,GAAQC,MAEPa,GACOX,EAAAA,OAAAA,EAAAA,EAAkBF,GAEfK,KAoBfS,iBAfG,SAecC,GAjCG3B,GAAakB,GAkCZS,EAAOxB,OAAOS,MAC/B,OAAIQ,GAnBhBO,EAAwBzB,kBAAxBkB,GACIN,KAAoB,SAAAU,GACbA,EAAAA,EAAAI,OAAAD,EAAAE,aAAAC,EAAAD,iBAIUN,QAFFN,QAAAU,EAAAE,aAAAC,EAAAD","file":"../../loaders/DynamicLoader.js","sourcesContent":["\"use strict\";\nconst BaseLoader_1 = require('./BaseLoader');\nclass DynamicLoader extends BaseLoader_1.BaseLoader {\n    constructor(option) {\n        super(option);\n    }\n    getTaskDefine() {\n        let tsdef = null;\n        let loader = this.option.loader;\n        if (loader.taskDefine) {\n            tsdef = loader.taskDefine;\n        }\n        else {\n            tsdef = dynamicTaskDefine(loader, this.getTaskModule());\n        }\n        return Promise.resolve(tsdef);\n    }\n}\nexports.DynamicLoader = DynamicLoader;\nlet dynamicTaskDefine = (option, modules) => {\n    return {\n        moduleTaskConfig(oper, option, env) {\n            return {\n                oper: oper,\n                env: env,\n                option: option,\n                runTasks(subGroupTask, tasks) {\n                    tasks = tasks || [];\n                    if (subGroupTask) {\n                        tasks.splice(0, 0, subGroupTask);\n                    }\n                    return tasks;\n                }\n            };\n        },\n        moduleTaskLoader(config) {\n            let lderOption = config.option.loader;\n            if (modules) {\n                return config.findTasksInModule(modules)\n                    .then(tasks => {\n                    tasks = tasks.concat(config.dynamicTasks(lderOption.dynamicTasks));\n                });\n            }\n            else {\n                return Promise.resolve(config.dynamicTasks(lderOption.dynamicTasks));\n            }\n        }\n    };\n};\n"]}