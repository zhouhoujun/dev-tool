{"version":3,"sources":["loaders/DynamicLoader.js","loaders/DynamicLoader.ts"],"names":["contextDefine_1","require","BaseLoader_1","DynamicLoader","option","env","factory","_classCallCheck","this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","default","getTaskModule","BaseLoader","exports"],"mappings":"AAAA,43BCEAA,gBAAAC,QAA0B,0BAC1BC,aAAAD,QAA2B,gBAE3BE,0BAEI,QAAAA,GAAYC,EAAqBC,EAAkBC,GAAmE,MAAAC,iBAAAC,KAAAL,GAAAM,2BAAAD,MAAAL,EAAAO,WAAAC,OAAAC,eAAAT,IAAAU,KAAAL,KAC5GJ,EAAQC,EAAKC,mFAKnB,MAAON,iBAAAc,QAAcN,KAAKO,wBARCb,aAAAc,WAAtBC,SAAAd,cAAaA","file":"../../loaders/DynamicLoader.js","sourcesContent":["\"use strict\";\nconst contextDefine_1 = require('../utils/contextDefine');\nconst BaseLoader_1 = require('./BaseLoader');\nclass DynamicLoader extends BaseLoader_1.BaseLoader {\n    constructor(option, env, factory) {\n        super(option, env, factory);\n    }\n    getContextDefine() {\n        return contextDefine_1.default(this.getTaskModule());\n    }\n}\nexports.DynamicLoader = DynamicLoader;\n","import { IContextDefine, IEnvOption, ITaskConfig, ITaskContext } from 'development-core';\r\nimport { ITaskOption } from '../TaskOption';\r\nimport contextDefine from '../utils/contextDefine';\r\nimport { BaseLoader } from './BaseLoader';\r\n\r\nexport class DynamicLoader extends BaseLoader {\r\n\r\n    constructor(option: ITaskOption, env?: IEnvOption, factory?: (cfg: ITaskConfig, parent?: ITaskContext) => ITaskContext) {\r\n        super(option, env, factory);\r\n    }\r\n\r\n\r\n    protected getContextDefine(): IContextDefine | Promise<IContextDefine> {\r\n        return contextDefine(this.getTaskModule())\r\n    }\r\n}\r\n\r\n\r\n"]}