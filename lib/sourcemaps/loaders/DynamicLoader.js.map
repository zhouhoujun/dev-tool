{"version":3,"sources":["loaders/DynamicLoader.js","loaders/DynamicLoader.ts"],"names":["dynamicTaskDefine_1","require","BaseLoader_1","DynamicLoader","option","_classCallCheck","this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","tsdef","loader","taskDefine","default","getTaskModule","Promise","resolve","BaseLoader","exports"],"mappings":"AAAA,43BCCAA,oBAAAC,QAA8B,uBAC9BC,aAAAD,QAA2B,gBAE3BE,0BAEI,QAAAA,GAAYC,GAAmB,MAAAC,iBAAAC,KAAAH,GAAAI,2BAAAD,MAAAH,EAAAK,WAAAC,OAAAC,eAAAP,IAAAQ,KAAAL,KACrBF,gFAKN,GAAIQ,GAAqB,KACrBC,EAA+BP,KAAKF,OAAOS,MAO/C,OALID,GADAC,EAAOC,WACCD,EAAOC,WAEPd,oBAAAe,QAAkBT,KAAKU,iBAG5BC,QAAQC,QAAQN,UAhBIV,aAAAiB,WAAtBC,SAAAjB,cAAaA","file":"../../loaders/DynamicLoader.js","sourcesContent":["\"use strict\";\nconst dynamicTaskDefine_1 = require('./dynamicTaskDefine');\nconst BaseLoader_1 = require('./BaseLoader');\nclass DynamicLoader extends BaseLoader_1.BaseLoader {\n    constructor(option) {\n        super(option);\n    }\n    getTaskDefine() {\n        let tsdef = null;\n        let loader = this.option.loader;\n        if (loader.taskDefine) {\n            tsdef = loader.taskDefine;\n        }\n        else {\n            tsdef = dynamicTaskDefine_1.default(this.getTaskModule());\n        }\n        return Promise.resolve(tsdef);\n    }\n}\nexports.DynamicLoader = DynamicLoader;\n","import { ITaskOption, ITaskDefine, IDynamicLoaderOption } from 'development-core';\r\nimport dynamicTaskDefine from './dynamicTaskDefine';\r\nimport { BaseLoader } from './BaseLoader';\r\n\r\nexport class DynamicLoader extends BaseLoader {\r\n\r\n    constructor(option: ITaskOption) {\r\n        super(option);\r\n    }\r\n\r\n\r\n    protected getTaskDefine(): Promise<ITaskDefine> {\r\n        let tsdef: ITaskDefine = null;\r\n        let loader: IDynamicLoaderOption = this.option.loader;\r\n        if (loader.taskDefine) {\r\n            tsdef = loader.taskDefine;\r\n        } else {\r\n            tsdef = dynamicTaskDefine(this.getTaskModule())\r\n        }\r\n\r\n        return Promise.resolve(tsdef);\r\n    }\r\n}\r\n\r\n\r\n"]}