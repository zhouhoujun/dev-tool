{"version":3,"sources":["loaders/DynamicLoader.js"],"names":["BaseLoader_1","require","DynamicLoader","option","_classCallCheck","this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","tsdef","loader","taskDefine","dynamicTaskDefine","getTaskModule","Promise","resolve","BaseLoader","exports","modules","loadConfig","oper","env","loadTasks","config","then","tasks","concat","generateTask","lderOption","dynamicTasks"],"mappings":"AAAA,43BACMA,aAAeC,QAAQ,gBACvBC,0BACF,QAAAA,GAAYC,GAAQ,MAAAC,iBAAAC,KAAAH,GAAAI,2BAAAD,MAAAH,EAAAK,WAAAC,OAAAC,eAAAP,IAAAQ,KAAAL,KACVF,gFAGN,GAAIQ,GAAQ,KACRC,EAASP,KAAKF,OAAOS,MAL7B,OAFEZ,GAQMY,EAAOC,WAREZ,EAAQY,WAYTC,kBAAkBF,EAAQP,KAAKU,iBAV/CC,QAAAC,QAAYd,UADYH,aAAakB,WACjBC,SAAAjB,cAAAA,aAEnB,IAAAY,mBAAA,SAAAX,EAAAiB,GAeD,OACIC,WADG,SACQC,EAAMnB,EAAQoB,GACrB,OACID,KAAMA,EAhBVX,IAAAA,EACAC,OAAAA,IAGHY,UASE,SAXHC,GAIId,GAAAA,GAAQG,EAAAA,OAAkBF,MAC7B,OAAAQ,GACMJ,EAAQC,UAARG,GACVM,KAAA,SAAAC,GAkBe,MADAA,GAAQA,MACDA,EAAMC,OAAOH,EAAOI,aAAaC,EAAWC,iBAhBvEf,QAAwBd,QAAxBuB,EAAAI,aAAAC,EAAAC","file":"../../loaders/DynamicLoader.js","sourcesContent":["\"use strict\";\nconst BaseLoader_1 = require('./BaseLoader');\nclass DynamicLoader extends BaseLoader_1.BaseLoader {\n    constructor(option) {\n        super(option);\n    }\n    getTaskDefine() {\n        let tsdef = null;\n        let loader = this.option.loader;\n        if (loader.taskDefine) {\n            tsdef = loader.taskDefine;\n        }\n        else {\n            tsdef = dynamicTaskDefine(loader, this.getTaskModule());\n        }\n        return Promise.resolve(tsdef);\n    }\n}\nexports.DynamicLoader = DynamicLoader;\nlet dynamicTaskDefine = (option, modules) => {\n    return {\n        loadConfig(oper, option, env) {\n            return {\n                oper: oper,\n                env: env,\n                option: option\n            };\n        },\n        loadTasks(config) {\n            let lderOption = config.option.loader;\n            if (modules) {\n                return config.findTasks(modules)\n                    .then(tasks => {\n                    tasks = tasks || [];\n                    return tasks.concat(config.generateTask(lderOption.dynamicTasks));\n                });\n            }\n            else {\n                return Promise.resolve(config.generateTask(lderOption.dynamicTasks));\n            }\n        }\n    };\n};\n"]}