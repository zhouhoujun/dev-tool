{"version":3,"sources":["loaders/CustomLoader.ts"],"names":["development_core_1","require","CustomLoader","option","loader","factory","this","prototype","load","context","Promise","resolve","loadContext","env","self","condef","bindingConfig","createContext","exports"],"mappings":"YAAA,IAAAA,oBAAAC,QAAA,oBAKAC,aAAA,WAEI,QAAAA,GAAoBC,EAA6BC,EAA8BC,GAA3DC,KAAAH,OAAAA,EAA6BG,KAAAF,OAAAA,EAA8BE,KAAAD,QAAAA,EAoBnF,MAhBIH,GAAAK,UAAAC,KAAA,SAAKC,GACD,MAAOC,SAAQC,QAAQL,KAAKF,OAAOK,KAIvCP,EAAAK,UAAAK,YAAA,SAAYC,GACR,GAAIC,GAAOR,IAQX,OAPAA,MAAKS,OAAST,KAAKS,QAAUL,QAAQC,QACvBX,mBAAAgB,eACNb,OAAQW,EAAKX,OACbU,IAAKA,EACLI,cAAeH,EAAKT,WAGrBC,KAAKS,QAEpBb,IAtBagB,SAAAhB,aAAAA","file":"../../loaders/CustomLoader.js","sourcesContent":["import { ITask, IEnvOption, ITaskContext, bindingConfig, ITaskConfig } from 'development-core';\r\nimport { ITaskOption, customLoader } from '../TaskOption';\r\nimport { IContext } from '../IContext';\r\nimport { ITaskLoader } from '../ITaskLoader';\r\n\r\nexport class CustomLoader implements ITaskLoader {\r\n\r\n    constructor(private option: ITaskOption, private loader: customLoader, private factory?: (cfg: ITaskConfig, parent?: ITaskContext) => ITaskContext) {\r\n\r\n    }\r\n\r\n    load(context: ITaskContext): Promise<ITask[]> {\r\n        return Promise.resolve(this.loader(context));\r\n    }\r\n\r\n    private condef: Promise<IContext>;\r\n    loadContext(env: IEnvOption): Promise<IContext> {\r\n        let self = this;\r\n        this.condef = this.condef || Promise.resolve(\r\n            <IContext>bindingConfig({\r\n                option: self.option,\r\n                env: env,\r\n                createContext: self.factory\r\n            }));\r\n\r\n        return this.condef;\r\n    }\r\n}\r\n"]}