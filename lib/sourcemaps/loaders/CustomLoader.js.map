{"version":3,"sources":["loaders/CustomLoader.js","loaders/CustomLoader.ts"],"names":["development_core_1","require","CustomLoader","option","loader","_classCallCheck","this","context","Promise","resolve","env","self","condef","bindingConfig","exports"],"mappings":"AAAA,6XCAAA,mBAAAC,QAA0F,oBAG1FC,wBAEI,QAAAA,GAAoBC,EAA6BC,GAAoBC,gBAAAC,KAAAJ,GAAjDI,KAAAH,OAAAA,EAA6BG,KAAAF,OAAAA,oDAI5CG,GACD,MAAOC,SAAQC,QAAQH,KAAKF,OAAOG,wCAI3BG,GACR,GAAIC,GAAOL,IAOX,OANAA,MAAKM,OAASN,KAAKM,QAAUJ,QAAQC,QACjCT,mBAAAa,eACIV,OAAQQ,EAAKR,OACbO,IAAKA,KAGNJ,KAAKM,eAnBPE,SAAAZ,aAAYA","file":"../../loaders/CustomLoader.js","sourcesContent":["\"use strict\";\nconst development_core_1 = require('development-core');\nclass CustomLoader {\n    constructor(option, loader) {\n        this.option = option;\n        this.loader = loader;\n    }\n    load(context) {\n        return Promise.resolve(this.loader(context));\n    }\n    loadContext(env) {\n        let self = this;\n        this.condef = this.condef || Promise.resolve(development_core_1.bindingConfig({\n            option: self.option,\n            env: env\n        }));\n        return this.condef;\n    }\n}\nexports.CustomLoader = CustomLoader;\n","import { ITask, customLoader, IEnvOption, ITaskContext, ITaskOption, bindingConfig } from 'development-core';\r\nimport { ITaskLoader } from '../ITaskLoader';\r\n\r\nexport class CustomLoader implements ITaskLoader {\r\n\r\n    constructor(private option: ITaskOption, private loader: customLoader) {\r\n\r\n    }\r\n\r\n    load(context: ITaskContext): Promise<ITask[]> {\r\n        return Promise.resolve(this.loader(context));\r\n    }\r\n\r\n    private condef: Promise<ITaskContext>;\r\n    loadContext(env: IEnvOption): Promise<ITaskContext> {\r\n        let self = this;\r\n        this.condef = this.condef || Promise.resolve(\r\n            bindingConfig({\r\n                option: self.option,\r\n                env: env\r\n            }));\r\n\r\n        return this.condef;\r\n    }\r\n}\r\n"]}