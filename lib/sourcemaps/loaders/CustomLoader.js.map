{"version":3,"sources":["loaders/CustomLoader.js","loaders/CustomLoader.ts"],"names":["development_core_1","require","CustomLoader","option","loader","_classCallCheck","this","cfg","Promise","resolve","env","self","then","config","bindingConfig","tsdef","loadConfig","exports"],"mappings":"AAAA,6XCAAA,mBAAAC,QAAsG,oBAGtGC,wBAEI,QAAAA,GAAoBC,EAA6BC,GAAoBC,gBAAAC,KAAAJ,GAAjDI,KAAAH,OAAAA,EAA6BG,KAAAF,OAAAA,oDAG5CG,GACD,MAAOC,SAAQC,QAAQH,KAAKF,OAAOG,sCAG7BG,GACN,GAAIC,GAAOL,IACX,OAAOE,SAAQC,SACXN,OAAQQ,EAAKR,OACbO,IAAKA,IAEJE,KAAK,SAAAC,GACF,MAAOb,oBAAAc,cAAcD,6CAI7B,GAAIE,IACAC,WADqB,SACVb,EAAqBO,GAC5B,OACIA,IAAKA,EACLP,OAAQA,IAKpB,OAAOK,SAAQC,QAAQM,WA7BlBE,SAAAf,aAAYA","file":"../../loaders/CustomLoader.js","sourcesContent":["\"use strict\";\nconst development_core_1 = require('development-core');\nclass CustomLoader {\n    constructor(option, loader) {\n        this.option = option;\n        this.loader = loader;\n    }\n    load(cfg) {\n        return Promise.resolve(this.loader(cfg));\n    }\n    loadConfg(env) {\n        let self = this;\n        return Promise.resolve({\n            option: self.option,\n            env: env\n        })\n            .then(config => {\n            return development_core_1.bindingConfig(config);\n        });\n    }\n    getTaskDefine() {\n        let tsdef = {\n            loadConfig(option, env) {\n                return {\n                    env: env,\n                    option: option\n                };\n            },\n        };\n        return Promise.resolve(tsdef);\n    }\n}\nexports.CustomLoader = CustomLoader;\n","import { ITask, customLoader, IEnvOption, ITaskOption, ITaskDefine, bindingConfig, ITaskConfig } from 'development-core';\r\nimport { ITaskLoader } from '../ITaskLoader';\r\n\r\nexport class CustomLoader implements ITaskLoader {\r\n\r\n    constructor(private option: ITaskOption, private loader: customLoader) {\r\n    }\r\n\r\n    load(cfg: ITaskConfig): Promise<ITask[]> {\r\n        return Promise.resolve(this.loader(cfg))\r\n    }\r\n\r\n    loadConfg(env: IEnvOption): Promise<ITaskConfig> {\r\n        let self = this;\r\n        return Promise.resolve({\r\n            option: self.option,\r\n            env: env\r\n        })\r\n            .then(config => {\r\n                return bindingConfig(config);\r\n            });\r\n    }\r\n    protected getTaskDefine(): Promise<ITaskDefine> {\r\n        let tsdef: ITaskDefine = {\r\n            loadConfig(option: ITaskOption, env: IEnvOption): ITaskConfig {\r\n                return {\r\n                    env: env,\r\n                    option: option\r\n                }\r\n            },\r\n        }\r\n\r\n        return Promise.resolve(tsdef);\r\n    }\r\n}\r\n\r\n\r\n"]}