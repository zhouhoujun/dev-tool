{"version":3,"sources":["loaders/ModuleLoader.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,2CAA0C;AAE1C,kDAA6C;AAC7C,6BAA+B;AAG/B;;;;;;GAMG;AACH;IAAkC,gCAAU;IAExC,sBAAY,GAAa;QAAzB,YACI,kBAAM,GAAG,CAAC,SAEb;QADG,KAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;;IACzB,CAAC;IAES,qCAAc,GAAxB;QAAA,iBAyBC;QAxBG,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,IAAI,MAAM,GAAkB,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YAC/C,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACT,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;oBACpB,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;gBAC/B,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,IAAI,GAAG,GAAG,KAAI,CAAC,eAAe,EAAE,CAAC;oBACjC,KAAI,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC;yBACvB,IAAI,CAAC,UAAA,GAAG;wBACL,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4BACN,OAAO,CAAC,GAAG,CAAC,CAAC;wBACjB,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,OAAO,CAAC,oBAAU,CAAC,KAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;wBAC9C,CAAC;oBACL,CAAC,CAAC;yBACD,KAAK,CAAC,UAAA,GAAG;wBACN,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;wBAC9B,OAAO,CAAC,oBAAU,CAAC,KAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;oBAC9C,CAAC,CAAC,CAAC;gBACX,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,mBAAmB,CAAC,CAAC;YAChC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IACL,mBAAC;AAAD,CAjCA,AAiCC,CAjCiC,uBAAU,GAiC3C;AAjCY,oCAAY","file":"../../loaders/ModuleLoader.js","sourcesContent":["import { ITaskDefine } from 'development-core';\r\nimport { BaseLoader } from './BaseLoader';\r\nimport { IContext } from '../IContext';\r\nimport taskDefine from '../utils/taskDefine';\r\nimport * as chalk from 'chalk';\r\nimport { ILoaderOption } from '../ILoaderOption';\r\n\r\n/**\r\n * load task from module or npm package.\r\n *\r\n * @export\r\n * @class ModuleLoader\r\n * @extends {BaseLoader}\r\n */\r\nexport class ModuleLoader extends BaseLoader {\r\n\r\n    constructor(ctx: IContext) {\r\n        super(ctx);\r\n        this.name = 'module';\r\n    }\r\n\r\n    protected loadTaskDefine(): ITaskDefine | Promise<ITaskDefine> {\r\n        return new Promise((resolve, reject) => {\r\n            let loader = <ILoaderOption>this.option.loader;\r\n            if (loader) {\r\n                if (loader.taskDefine) {\r\n                    resolve(loader.taskDefine);\r\n                } else {\r\n                    let mdl = this.getConfigModule();\r\n                    this.ctx.findTaskDefine(mdl)\r\n                        .then(def => {\r\n                            if (def) {\r\n                                resolve(def);\r\n                            } else {\r\n                                resolve(taskDefine(this.getTaskModule()));\r\n                            }\r\n                        })\r\n                        .catch(err => {\r\n                            console.error(chalk.red(err));\r\n                            resolve(taskDefine(this.getTaskModule()));\r\n                        });\r\n                }\r\n            } else {\r\n                reject('loader not found.');\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}