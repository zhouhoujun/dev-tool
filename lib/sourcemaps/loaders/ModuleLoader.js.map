{"version":3,"sources":["loaders/ModuleLoader.js","loaders/ModuleLoader.ts"],"names":["development_core_1","require","BaseLoader_1","contextDefine_1","chalk","ModuleLoader","option","env","_classCallCheck","this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","_this2","Promise","resolve","reject","loader","contextDefine","taskDefine","taskDefine2Context","mdl","getConfigModule","findTaskDefineInModule","then","def","default","getTaskModule","catch","err","console","error","red","BaseLoader","exports"],"mappings":"AAAA,43BCAAA,mBAAAC,QAAuF,oBAEvFC,aAAAD,QAA2B,gBAC3BE,gBAAAF,QAA0B,0BACdG,MAAKH,QAAM,SAEvBI,yBAEI,QAAAA,GAAYC,EAAqBC,GAAgB,MAAAC,iBAAAC,KAAAJ,GAAAK,2BAAAD,MAAAJ,EAAAM,WAAAC,OAAAC,eAAAR,IAAAS,KAAAL,KACvCH,EAAQC,mFAGQ,GAAAQ,GAAAN,IACtB,OAAO,IAAIO,SAAQ,SAACC,EAASC,GACzB,GAAIC,GAAwBJ,EAAKT,OAAOa,MACxC,IAAIA,EACA,GAAIA,EAAOC,cACPH,EAAQE,EAAOC,mBACZ,IAAID,EAAOE,WACdJ,EAAQjB,mBAAAsB,mBAAmBH,EAAOE,iBAC/B,CACH,GAAIE,GAAMR,EAAKS,iBACfxB,oBAAAyB,uBAAuBF,GAClBG,KAAK,SAAAC,GAEEV,EADAU,EACQA,EAEAxB,gBAAAyB,QAAcb,EAAKc,oBAGlCC,MAAM,SAAAC,GACHC,QAAQC,MAAM7B,MAAM8B,IAAIH,IACxBd,EAAQd,gBAAAyB,QAAcb,EAAKc,wBAIvCX,GAAO,8BA9BWhB,aAAAiC,WAArBC,SAAA/B,aAAYA","file":"../../loaders/ModuleLoader.js","sourcesContent":["\"use strict\";\nconst development_core_1 = require('development-core');\nconst BaseLoader_1 = require('./BaseLoader');\nconst contextDefine_1 = require('../utils/contextDefine');\nconst chalk = require('chalk');\nclass ModuleLoader extends BaseLoader_1.BaseLoader {\n    constructor(option, env) {\n        super(option, env);\n    }\n    getContextDefine() {\n        return new Promise((resolve, reject) => {\n            let loader = this.option.loader;\n            if (loader) {\n                if (loader.contextDefine) {\n                    resolve(loader.contextDefine);\n                }\n                else if (loader.taskDefine) {\n                    resolve(development_core_1.taskDefine2Context(loader.taskDefine));\n                }\n                else {\n                    let mdl = this.getConfigModule();\n                    development_core_1.findTaskDefineInModule(mdl)\n                        .then(def => {\n                        if (def) {\n                            resolve(def);\n                        }\n                        else {\n                            resolve(contextDefine_1.default(this.getTaskModule()));\n                        }\n                    })\n                        .catch(err => {\n                        console.error(chalk.red(err));\n                        resolve(contextDefine_1.default(this.getTaskModule()));\n                    });\n                }\n            }\n            else {\n                reject('loader not found.');\n            }\n        });\n    }\n}\nexports.ModuleLoader = ModuleLoader;\n","import { IContextDefine, findTaskDefineInModule, IEnvOption, taskDefine2Context } from 'development-core';\r\nimport { ITaskOption, ILoaderOption } from '../TaskOption';\r\nimport { BaseLoader } from './BaseLoader';\r\nimport contextDefine from '../utils/contextDefine';\r\nimport * as chalk from 'chalk';\r\n\r\nexport class ModuleLoader extends BaseLoader {\r\n\r\n    constructor(option: ITaskOption, env?: IEnvOption) {\r\n        super(option, env);\r\n    }\r\n\r\n    protected getContextDefine(): IContextDefine | Promise<IContextDefine> {\r\n        return new Promise((resolve, reject) => {\r\n            let loader = <ILoaderOption>this.option.loader;\r\n            if (loader) {\r\n                if (loader.contextDefine) {\r\n                    resolve(loader.contextDefine);\r\n                } else if (loader.taskDefine) {\r\n                    resolve(taskDefine2Context(loader.taskDefine));\r\n                } else {\r\n                    let mdl = this.getConfigModule();\r\n                    findTaskDefineInModule(mdl)\r\n                        .then(def => {\r\n                            if (def) {\r\n                                resolve(def);\r\n                            } else {\r\n                                resolve(contextDefine(this.getTaskModule()));\r\n                            }\r\n                        })\r\n                        .catch(err => {\r\n                            console.error(chalk.red(err));\r\n                            resolve(contextDefine(this.getTaskModule()));\r\n                        });\r\n                }\r\n            } else {\r\n                reject('loader not found.');\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}