{"version":3,"sources":["loaders/ModuleLoader.ts"],"names":["development_core_1","require","BaseLoader_1","contextDefine_1","chalk","ModuleLoader","_super","option","env","factory","call","this","__extends","prototype","getContextDefine","_this","Promise","resolve","reject","loader","contextDefine","taskDefine","taskDefine2Context","mdl","getConfigModule","findTaskDefineInModule","then","def","default","getTaskModule","catch","err","console","error","red","BaseLoader","exports"],"mappings":"sNAAAA,mBAAAC,QAAA,oBAEAC,aAAAD,QAAA,gBACAE,gBAAAF,QAAA,0BACAG,MAAAH,QAAA,SAEAI,aAAA,SAAAC,GAEI,QAAAD,GAAYE,EAAqBC,EAAkBC,SAC/CH,GAAAI,KAAAC,KAAMJ,EAAQC,EAAKC,IAAQE,KA+BnC,MAlCkCC,WAAAP,EAAAC,GAMpBD,EAAAQ,UAAAC,iBAAV,WAAA,GAAAC,GAAAJ,IACI,OAAO,IAAIK,SAAQ,SAACC,EAASC,GACzB,GAAIC,GAAwBJ,EAAKR,OAAOY,MACxC,IAAIA,EACA,GAAIA,EAAOC,cACPH,EAAQE,EAAOC,mBACZ,IAAID,EAAOE,WACdJ,EAAQjB,mBAAAsB,mBAAmBH,EAAOE,iBAC/B,CACH,GAAIE,GAAMR,EAAKS,iBACfxB,oBAAAyB,uBAAuBF,GAClBG,KAAK,SAAAC,GAEEV,EADAU,EACQA,EAEAxB,gBAAAyB,QAAcb,EAAKc,oBAGlCC,MAAM,SAAAC,GACHC,QAAQC,MAAM7B,MAAM8B,IAAIH,IACxBd,EAAQd,gBAAAyB,QAAcb,EAAKc,wBAIvCX,GAAO,wBAIvBb,GAlCkCH,aAAAiC,WAArBC,SAAA/B,aAAAA","file":"../../loaders/ModuleLoader.js","sourcesContent":["import { IContextDefine, findTaskDefineInModule, IEnvOption, ITaskConfig, ITaskContext, taskDefine2Context } from 'development-core';\r\nimport { ITaskOption, ILoaderOption } from '../TaskOption';\r\nimport { BaseLoader } from './BaseLoader';\r\nimport contextDefine from '../utils/contextDefine';\r\nimport * as chalk from 'chalk';\r\n\r\nexport class ModuleLoader extends BaseLoader {\r\n\r\n    constructor(option: ITaskOption, env?: IEnvOption, factory?: (cfg: ITaskConfig, parent?: ITaskContext) => ITaskContext) {\r\n        super(option, env, factory);\r\n    }\r\n\r\n    protected getContextDefine(): IContextDefine | Promise<IContextDefine> {\r\n        return new Promise((resolve, reject) => {\r\n            let loader = <ILoaderOption>this.option.loader;\r\n            if (loader) {\r\n                if (loader.contextDefine) {\r\n                    resolve(loader.contextDefine);\r\n                } else if (loader.taskDefine) {\r\n                    resolve(taskDefine2Context(loader.taskDefine));\r\n                } else {\r\n                    let mdl = this.getConfigModule();\r\n                    findTaskDefineInModule(mdl)\r\n                        .then(def => {\r\n                            if (def) {\r\n                                resolve(def);\r\n                            } else {\r\n                                resolve(contextDefine(this.getTaskModule()));\r\n                            }\r\n                        })\r\n                        .catch(err => {\r\n                            console.error(chalk.red(err));\r\n                            resolve(contextDefine(this.getTaskModule()));\r\n                        });\r\n                }\r\n            } else {\r\n                reject('loader not found.');\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}