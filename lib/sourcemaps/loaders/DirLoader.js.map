{"version":3,"sources":["loaders/DirLoader.js","loaders/DirLoader.ts"],"names":["development_core_1","require","ModuleLoader_1","DirLoader","option","env","_classCallCheck","this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","context","def","loader","dir","findTasksInDir","taskSourceVal","oper","_get","prototype","configModule","module","findTaskDefineInDir","currentOperation","ModuleLoader","exports"],"mappings":"AAAA,unCCCAA,mBAAAC,QAAqJ,oBACrJC,eAAAD,QAA6B,kBAE7BE,sBAEI,QAAAA,GAAYC,EAAqBC,GAAe,MAAAC,iBAAAC,KAAAJ,GAAAK,2BAAAD,MAAAJ,EAAAM,WAAAC,OAAAC,eAAAR,IAAAS,KAAAL,KACtCH,EAAQC,0EAGRQ,EAAuBC,GAC7B,GAAIC,GAA2BR,KAAKH,OAAOW,MAC3C,OAAIA,GAAOC,IACAH,EAAQI,eAAejB,mBAAAkB,cAAcH,EAAOC,IAAKH,EAAQM,KAAMN,EAAQR,MAE9Ee,KAAAjB,EAAAkB,UAAAZ,WAAAC,OAAAC,eAAAR,EAAAkB,WAAA,YAAAd,MAAAK,KAAAL,KAAuBM,EAASC,8CAKpC,GAAIC,GAA2BR,KAAKH,OAAOW,MAC3C,OAAKA,GAAOO,cACJP,EAAOQ,SAAUR,EAAOC,IAG5BI,KAAAjB,EAAAkB,UAAAZ,WAAAC,OAAAC,eAAAR,EAAAkB,WAAA,mBAAAd,MAAAK,KAAAL,MAFOP,mBAAAwB,oBAAoBxB,mBAAAkB,cAAcH,EAAOC,IAAKhB,mBAAAyB,iBAAiBlB,KAAKF,KAAME,KAAKF,aAnBnEH,eAAAwB,aAAlBC,SAAAxB,UAASA","file":"../../loaders/DirLoader.js","sourcesContent":["\"use strict\";\nconst development_core_1 = require('development-core');\nconst ModuleLoader_1 = require('./ModuleLoader');\nclass DirLoader extends ModuleLoader_1.ModuleLoader {\n    constructor(option, env) {\n        super(option, env);\n    }\n    loadTasks(context, def) {\n        let loader = this.option.loader;\n        if (loader.dir) {\n            return context.findTasksInDir(development_core_1.taskSourceVal(loader.dir, context.oper, context.env));\n        }\n        else {\n            return super.loadTasks(context, def);\n        }\n    }\n    getContextDefine() {\n        let loader = this.option.loader;\n        if (!loader.configModule\n            && !loader.module && loader.dir) {\n            return development_core_1.findTaskDefineInDir(development_core_1.taskSourceVal(loader.dir, development_core_1.currentOperation(this.env), this.env));\n        }\n        else {\n            return super.getContextDefine();\n        }\n    }\n}\nexports.DirLoader = DirLoader;\n","import * as _ from 'lodash';\r\nimport { ITask, IDirLoaderOption, IContextDefine, ITaskOption, ITaskContext, currentOperation, findTaskDefineInDir, taskSourceVal, IEnvOption } from 'development-core';\r\nimport { ModuleLoader } from './ModuleLoader';\r\n\r\nexport class DirLoader extends ModuleLoader {\r\n\r\n    constructor(option: ITaskOption, env: IEnvOption) {\r\n        super(option, env);\r\n    }\r\n\r\n    loadTasks(context: ITaskContext, def: IContextDefine): Promise<ITask[]> {\r\n        let loader: IDirLoaderOption = this.option.loader;\r\n        if (loader.dir) {\r\n            return context.findTasksInDir(taskSourceVal(loader.dir, context.oper, context.env));\r\n        } else {\r\n            return super.loadTasks(context, def);\r\n        }\r\n    }\r\n\r\n    protected getContextDefine(): IContextDefine | Promise<IContextDefine> {\r\n        let loader: IDirLoaderOption = this.option.loader;\r\n        if (!loader.configModule\r\n            && !loader.module && loader.dir) {\r\n            return findTaskDefineInDir(taskSourceVal(loader.dir, currentOperation(this.env), this.env));\r\n        } else {\r\n            return super.getContextDefine();\r\n        }\r\n    }\r\n}\r\n"]}