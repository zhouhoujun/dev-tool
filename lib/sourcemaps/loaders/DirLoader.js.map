{"version":3,"sources":["loaders/DirLoader.ts"],"names":[],"mappings":";AAAA,MAAY,CAAC,WAAM,QAAQ,CAAC,CAAA;AAC5B,MAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAC7B,qBAA2B,IAAI,CAAC,CAAA;AAEhC,6BAA2B,cAAc,CAAC,CAAA;AAE1C,wBAA+B,uBAAU;IAErC,YAAY,MAAkB;QAC1B,MAAM,MAAM,CAAC,CAAC;IAClB,CAAC;IAED,IAAI,CAAC,GAAe;QAChB,IAAI,MAAM,GAAoB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QACjD,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YACb,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC5C,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC3B,CAAC;IACL,CAAC;IAES,aAAa;QACnB,IAAI,MAAM,GAAoB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QACjD,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC,YAAY;eACvC,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAa,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG;gBACjD,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;oBAC/B,IAAI,GAAG,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;oBAC/C,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACN,IAAI,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;wBACnC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4BACN,OAAO,CAAC,GAAG,CAAC,CAAC;wBACjB,CAAC;oBACL,CAAC;gBACL,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC,CAAC;QACR,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC;QACjC,CAAC;IACL,CAAC;IAEO,kBAAkB,CAAC,MAAuB,EAAE,GAAW;QAC3D,IAAI,GAAG,GAAG,MAAM,CAAC,aAAa,IAAI,UAAU,CAAC;QAC7C,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAChC,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC1B,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,eAAU,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC;QAClC,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,eAAU,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC,CAAA;QACjC,CAAC;IACL,CAAC;AACL,CAAC;AA9CY,iBAAS,YA8CrB,CAAA","file":"../../loaders/DirLoader.js","sourcesContent":["import * as _ from 'lodash';\r\nimport * as path from 'path';\r\nimport { existsSync } from 'fs';\r\nimport { Task, DirLoaderOption, TaskOption, TaskConfig, ITaskDefine } from '../TaskConfig';\r\nimport { BaseLoader } from './BaseLoader';\r\n\r\nexport class DirLoader extends BaseLoader {\r\n\r\n    constructor(option: TaskOption) {\r\n        super(option);\r\n    }\r\n\r\n    load(cfg: TaskConfig): Promise<Task[]> {\r\n        let loader: DirLoaderOption = this.option.loader;\r\n        if (loader.dir) {\r\n            return this.loadTaskFromDir(loader.dir);\r\n        } else {\r\n            return super.load(cfg);\r\n        }\r\n    }\r\n\r\n    protected getTaskDefine(): Promise<ITaskDefine> {\r\n        let loader: DirLoaderOption = this.option.loader;\r\n        if (!loader.taskDefine && !loader.configModule\r\n            && !loader.module && loader.dir) {\r\n            return Promise.race<TaskConfig>(_.map(loader.dir, dir => {\r\n                return new Promise((resolve, reject) => {\r\n                    let mdl = this.getDirConfigModule(loader, dir);\r\n                    if (mdl) {\r\n                        let def = this.findTaskDefine(mdl);\r\n                        if (def) {\r\n                            resolve(def);\r\n                        }\r\n                    }\r\n                });\r\n            }));\r\n        } else {\r\n            return super.getTaskDefine();\r\n        }\r\n    }\r\n\r\n    private getDirConfigModule(loader: DirLoaderOption, dir: string) {\r\n        let cfn = loader.dirConfigFile || './config';\r\n        let fpath = path.join(dir, cfn);\r\n        if (/.\\S+$/.test(fpath)) {\r\n            return require(fpath);\r\n        } else if (existsSync(fpath + '.js')) {\r\n            return require(fpath + '.js');\r\n        } else if (existsSync(fpath + '.ts')) {\r\n            return require(fpath + '.ts')\r\n        }\r\n    }\r\n}\r\n"]}