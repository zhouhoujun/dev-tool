{"version":3,"sources":["loaders/DirLoader.js"],"names":["_","require","path","fs_1","BaseLoader_1","DirLoader","option","_classCallCheck","this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","cfg","loader","dir","loadTaskFromDir","_this2","configModule","module","_get","prototype","Promise","race","map","resolve","reject","mdl","getDirConfigModule","def","findTaskDefine","cfn","dirConfigFile","fpath","join","existsSync","BaseLoader","exports"],"mappings":"AAAA,unCACMA,EAAIC,QAAQ,UACZC,KAAOD,QAAQ,QACfE,KAAOF,QAAQ,MACfG,aAAeH,QAAQ,gBACvBI,sBACF,QAAAA,GAAYC,GAAQ,MAAAC,iBAAAC,KAAAH,GAAAI,2BAAAD,MAAAH,EAAAK,WAAAC,OAAAC,eAAAP,IAAAQ,KAAAL,KACVF,qEAELQ,GACD,GAAIC,GAASP,KAAKF,OAAOS,MACzB,OAAIA,GAAOC,IAVDR,KAARS,gBAAVF,EAAAC,KAGMZ,KAAAA,EAAAA,UAAAA,WAAAA,OAAAA,eAAAA,EAAAA,WAAAA,OAAAA,MAAAA,KAAAA,KAAuBU,2CAcT,GAAAI,GAAAV,KACRO,EAASP,KAAKF,OAAOS,MAb7B,OAAAA,GAAAI,cAAoBJ,EAAAK,SAAAL,EAAAC,IAWnBK,KAAAhB,EAAAiB,UAAAZ,WAAAC,OAAAC,eAAAP,EAAAiB,WAAA,gBAAAd,MAAAK,KAAAL,MAKce,QAAQC,KAAKxB,EAAEyB,IAAIV,EAAOC,IAAK,SAAAA,GAhB1B,MAAA,IAAAO,SAAA,SAAAG,EAAAC,GAEnB,GAAAC,GAAAV,EAAAW,mBAAAd,EAAAC,EAiBe,IAAIY,EAAK,CACL,GAAIE,GAAMZ,EAAKa,eAAeH,EAC1BE,IACAJ,EAnBdI,oDA6BSf,EAAQC,GApBX,GAAAgB,GAAAjB,EAAAkB,eAAA,WAsBRC,EAAQhC,KAAKiC,KAAKnB,EAAKgB,EArB3B,OAAA,QAAIjB,KAASmB,GACRnB,QAAOI,GAGJhB,KAAAiC,WAAWb,EAAQ,OACftB,QAAAiC,EAAU,OAEN/B,KAAAiC,WAAIN,EAAM,OACV7B,QAAAiC,EAAA,OADA,cArBA9B,aAAaiC,WA0BpBC,SAAAjC,UAAAA","file":"../../loaders/DirLoader.js","sourcesContent":["\"use strict\";\nconst _ = require('lodash');\nconst path = require('path');\nconst fs_1 = require('fs');\nconst BaseLoader_1 = require('./BaseLoader');\nclass DirLoader extends BaseLoader_1.BaseLoader {\n    constructor(option) {\n        super(option);\n    }\n    load(cfg) {\n        let loader = this.option.loader;\n        if (loader.dir) {\n            return this.loadTaskFromDir(loader.dir);\n        }\n        else {\n            return super.load(cfg);\n        }\n    }\n    getTaskDefine() {\n        let loader = this.option.loader;\n        if (!loader.configModule\n            && !loader.module && loader.dir) {\n            return Promise.race(_.map(loader.dir, dir => {\n                return new Promise((resolve, reject) => {\n                    let mdl = this.getDirConfigModule(loader, dir);\n                    if (mdl) {\n                        let def = this.findTaskDefine(mdl);\n                        if (def) {\n                            resolve(def);\n                        }\n                    }\n                });\n            }));\n        }\n        else {\n            return super.getTaskDefine();\n        }\n    }\n    getDirConfigModule(loader, dir) {\n        let cfn = loader.dirConfigFile || './config';\n        let fpath = path.join(dir, cfn);\n        if (/.\\S+$/.test(fpath)) {\n            return require(fpath);\n        }\n        else if (fs_1.existsSync(fpath + '.js')) {\n            return require(fpath + '.js');\n        }\n        else if (fs_1.existsSync(fpath + '.ts')) {\n            return require(fpath + '.ts');\n        }\n    }\n}\nexports.DirLoader = DirLoader;\n"]}