{"version":3,"sources":["loaders/DirLoader.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,+CAA8C;AAG9C;;;;;;GAMG;AACH;IAA+B,6BAAY;IAEvC,mBAAY,GAAa;QAAzB,YACI,kBAAM,GAAG,CAAC,SAEb;QADG,KAAI,CAAC,IAAI,GAAG,KAAK,CAAC;;IACtB,CAAC;IAED,6BAAS,GAAT,UAAU,OAAqB,EAAE,GAAgB;QAC7C,IAAI,MAAM,GAAqB,IAAI,CAAC,MAAM,CAAC,MAA0B,CAAC;QACtE,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YACb,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC9C,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,iBAAM,SAAS,YAAC,OAAO,EAAE,GAAG,CAAC,CAAC;QACzC,CAAC;IACL,CAAC;IAES,kCAAc,GAAxB;QACI,IAAI,MAAM,GAAqB,IAAI,CAAC,MAAM,CAAC,MAA0B,CAAC;QACtE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY;eACjB,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACpD,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,iBAAM,cAAc,WAAE,CAAC;QAClC,CAAC;IACL,CAAC;IACL,gBAAC;AAAD,CAzBA,AAyBC,CAzB8B,2BAAY,GAyB1C;AAzBY,8BAAS","file":"../../loaders/DirLoader.js","sourcesContent":["import { ITask, ITaskDefine, ITaskContext } from 'development-core';\r\nimport { IDirLoaderOption } from '../TaskOption';\r\nimport { ModuleLoader } from './ModuleLoader';\r\nimport { IContext } from '../IContext';\r\n\r\n/**\r\n * load task in directies.\r\n *\r\n * @export\r\n * @class DirLoader\r\n * @extends {ModuleLoader}\r\n */\r\nexport class DirLoader extends ModuleLoader {\r\n\r\n    constructor(ctx: IContext) {\r\n        super(ctx);\r\n        this.name = 'dir';\r\n    }\r\n\r\n    loadTasks(context: ITaskContext, def: ITaskDefine): Promise<ITask[]> {\r\n        let loader: IDirLoaderOption = this.option.loader as IDirLoaderOption;\r\n        if (loader.dir) {\r\n            return context.findTasksInDir(loader.dir);\r\n        } else {\r\n            return super.loadTasks(context, def);\r\n        }\r\n    }\r\n\r\n    protected loadTaskDefine(): ITaskDefine | Promise<ITaskDefine> {\r\n        let loader: IDirLoaderOption = this.option.loader as IDirLoaderOption;\r\n        if (!loader.configModule\r\n            && !loader.module && loader.dir) {\r\n            return this.ctx.findTaskDefineInDir(loader.dir);\r\n        } else {\r\n            return super.loadTaskDefine();\r\n        }\r\n    }\r\n}\r\n"]}