{"version":3,"sources":["loaders/DirLoader.ts"],"names":["development_core_1","require","ModuleLoader_1","DirLoader","_super","option","env","factory","call","this","__extends","prototype","loadTasks","context","def","loader","dir","findTasksInDir","taskSourceVal","getContextDefine","self","configModule","module","findTaskDefineInDir","bindingConfig","createContext","ModuleLoader","exports"],"mappings":"sNACAA,mBAAAC,QAAA,oBAEAC,eAAAD,QAAA,kBAEAE,UAAA,SAAAC,GAEI,QAAAD,GAAYE,EAAqBC,EAAiBC,SAC9CH,GAAAI,KAAAC,KAAMJ,EAAQC,IAAIG,KAsB1B,MAzB+BC,WAAAP,EAAAC,GAM3BD,EAAAQ,UAAAC,UAAA,SAAUC,EAAuBC,GAC7B,GAAIC,GAA2BN,KAAKJ,OAAOU,MAC3C,OAAIA,GAAOC,IACAH,EAAQI,eAAejB,mBAAAkB,cAAcH,EAAOC,IAAKH,IAEjDT,EAAAO,UAAMC,UAASJ,KAAAC,KAACI,EAASC,IAI9BX,EAAAQ,UAAAQ,iBAAV,WACI,GAAIJ,GAA2BN,KAAKJ,OAAOU,OACvCK,EAAOX,IACX,OAAKM,GAAOM,cACJN,EAAOO,SAAUP,EAAOC,IAGrBZ,EAAAO,UAAMQ,iBAAgBX,KAAAC,MAFtBT,mBAAAuB,oBAAoBvB,mBAAAkB,cAAcH,EAAOC,IAAKhB,mBAAAwB,eAAgBlB,IAAKc,EAAKd,IAAKD,UAAYoB,cAAeL,EAAKb,aAKhIJ,GAzB+BD,eAAAwB,aAAlBC,SAAAxB,UAAAA","file":"../../loaders/DirLoader.js","sourcesContent":["import * as _ from 'lodash';\r\nimport { ITask, IContextDefine, ITaskContext, bindingConfig, findTaskDefineInDir, ITaskConfig, taskSourceVal, IEnvOption } from 'development-core';\r\nimport { ITaskOption, IDirLoaderOption } from '../TaskOption';\r\nimport { ModuleLoader } from './ModuleLoader';\r\n\r\nexport class DirLoader extends ModuleLoader {\r\n\r\n    constructor(option: ITaskOption, env: IEnvOption, factory?: (cfg: ITaskConfig, parent?: ITaskContext) => ITaskContext) {\r\n        super(option, env);\r\n    }\r\n\r\n    loadTasks(context: ITaskContext, def: IContextDefine): Promise<ITask[]> {\r\n        let loader: IDirLoaderOption = this.option.loader;\r\n        if (loader.dir) {\r\n            return context.findTasksInDir(taskSourceVal(loader.dir, context));\r\n        } else {\r\n            return super.loadTasks(context, def);\r\n        }\r\n    }\r\n\r\n    protected getContextDefine(): IContextDefine | Promise<IContextDefine> {\r\n        let loader: IDirLoaderOption = this.option.loader;\r\n        let self = this;\r\n        if (!loader.configModule\r\n            && !loader.module && loader.dir) {\r\n            return findTaskDefineInDir(taskSourceVal(loader.dir, bindingConfig({ env: self.env, option: {}, createContext: self.factory })));\r\n        } else {\r\n            return super.getContextDefine();\r\n        }\r\n    }\r\n}\r\n"]}