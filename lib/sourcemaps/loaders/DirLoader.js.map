{"version":3,"sources":["loaders/DirLoader.js","loaders/DirLoader.ts"],"names":["development_core_1","require","BaseLoader_1","DirLoader","option","_classCallCheck","this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","cfg","loader","dir","findTasksInDir","taskSourceVal","_get","prototype","configModule","module","findTaskDefineInDir","BaseLoader","exports"],"mappings":"AAAA,unCCCAA,mBAAAC,QAAmH,oBACnHC,aAAAD,QAA2B,gBAE3BE,sBAEI,QAAAA,GAAYC,GAAmB,MAAAC,iBAAAC,KAAAH,GAAAI,2BAAAD,MAAAH,EAAAK,WAAAC,OAAAC,eAAAP,IAAAQ,KAAAL,KACrBF,qEAGLQ,GACD,GAAIC,GAA2BP,KAAKF,OAAOS,MAC3C,OAAIA,GAAOC,IACAF,EAAIG,eAAef,mBAAAgB,cAAcH,EAAOC,MAE/CG,KAAAd,EAAAe,UAAAV,WAAAC,OAAAC,eAAAP,EAAAe,WAAA,OAAAZ,MAAAK,KAAAL,KAAkBM,2CAKtB,GAAIC,GAA2BP,KAAKF,OAAOS,MAC3C,OAAKA,GAAOM,cACJN,EAAOO,SAAUP,EAAOC,IAG5BG,KAAAd,EAAAe,UAAAV,WAAAC,OAAAC,eAAAP,EAAAe,WAAA,gBAAAZ,MAAAK,KAAAL,MAFON,mBAAAqB,oBAAoBrB,mBAAAgB,cAAcH,EAAOC,aAnB7BZ,aAAAoB,WAAlBC,SAAApB,UAASA","file":"../../loaders/DirLoader.js","sourcesContent":["\"use strict\";\nconst development_core_1 = require('development-core');\nconst BaseLoader_1 = require('./BaseLoader');\nclass DirLoader extends BaseLoader_1.BaseLoader {\n    constructor(option) {\n        super(option);\n    }\n    load(cfg) {\n        let loader = this.option.loader;\n        if (loader.dir) {\n            return cfg.findTasksInDir(development_core_1.taskSourceVal(loader.dir));\n        }\n        else {\n            return super.load(cfg);\n        }\n    }\n    getTaskDefine() {\n        let loader = this.option.loader;\n        if (!loader.configModule\n            && !loader.module && loader.dir) {\n            return development_core_1.findTaskDefineInDir(development_core_1.taskSourceVal(loader.dir));\n        }\n        else {\n            return super.getTaskDefine();\n        }\n    }\n}\nexports.DirLoader = DirLoader;\n","import * as _ from 'lodash';\r\nimport { ITask, ITaskDefine, IDirLoaderOption, ITaskOption, ITaskConfig, findTaskDefineInDir, taskSourceVal } from 'development-core';\r\nimport { BaseLoader } from './BaseLoader';\r\n\r\nexport class DirLoader extends BaseLoader {\r\n\r\n    constructor(option: ITaskOption) {\r\n        super(option);\r\n    }\r\n\r\n    load(cfg: ITaskConfig): Promise<ITask[]> {\r\n        let loader: IDirLoaderOption = this.option.loader;\r\n        if (loader.dir) {\r\n            return cfg.findTasksInDir(taskSourceVal(loader.dir));\r\n        } else {\r\n            return super.load(cfg);\r\n        }\r\n    }\r\n\r\n    protected getTaskDefine(): Promise<ITaskDefine> {\r\n        let loader: IDirLoaderOption = this.option.loader;\r\n        if (!loader.configModule\r\n            && !loader.module && loader.dir) {\r\n            return findTaskDefineInDir(taskSourceVal(loader.dir))\r\n        } else {\r\n            return super.getTaskDefine();\r\n        }\r\n    }\r\n}\r\n"]}