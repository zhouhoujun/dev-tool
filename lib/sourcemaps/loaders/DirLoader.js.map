{"version":3,"sources":["loaders/DirLoader.js","loaders/DirLoader.ts"],"names":["development_core_1","require","ModuleLoader_1","DirLoader","option","_classCallCheck","this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","context","def","loader","dir","findTasksInDir","taskSourceVal","_get","prototype","configModule","module","findTaskDefineInDir","ModuleLoader","exports"],"mappings":"AAAA,unCCCAA,mBAAAC,QAAuH,oBACvHC,eAAAD,QAA6B,kBAE7BE,sBAEI,QAAAA,GAAYC,GAAmB,MAAAC,iBAAAC,KAAAH,GAAAI,2BAAAD,MAAAH,EAAAK,WAAAC,OAAAC,eAAAP,IAAAQ,KAAAL,KACrBF,0EAGAQ,EAAuBC,GAC7B,GAAIC,GAA2BR,KAAKF,OAAOU,MAC3C,OAAIA,GAAOC,IACAH,EAAQI,eAAehB,mBAAAiB,cAAcH,EAAOC,MAEnDG,KAAAf,EAAAgB,UAAAX,WAAAC,OAAAC,eAAAP,EAAAgB,WAAA,YAAAb,MAAAK,KAAAL,KAAuBM,EAASC,8CAKpC,GAAIC,GAA2BR,KAAKF,OAAOU,MAC3C,OAAKA,GAAOM,cACJN,EAAOO,SAAUP,EAAOC,IAG5BG,KAAAf,EAAAgB,UAAAX,WAAAC,OAAAC,eAAAP,EAAAgB,WAAA,mBAAAb,MAAAK,KAAAL,MAFON,mBAAAsB,oBAAoBtB,mBAAAiB,cAAcH,EAAOC,aAnB7Bb,eAAAqB,aAAlBC,SAAArB,UAASA","file":"../../loaders/DirLoader.js","sourcesContent":["\"use strict\";\nconst development_core_1 = require('development-core');\nconst ModuleLoader_1 = require('./ModuleLoader');\nclass DirLoader extends ModuleLoader_1.ModuleLoader {\n    constructor(option) {\n        super(option);\n    }\n    loadTasks(context, def) {\n        let loader = this.option.loader;\n        if (loader.dir) {\n            return context.findTasksInDir(development_core_1.taskSourceVal(loader.dir));\n        }\n        else {\n            return super.loadTasks(context, def);\n        }\n    }\n    getContextDefine() {\n        let loader = this.option.loader;\n        if (!loader.configModule\n            && !loader.module && loader.dir) {\n            return development_core_1.findTaskDefineInDir(development_core_1.taskSourceVal(loader.dir));\n        }\n        else {\n            return super.getContextDefine();\n        }\n    }\n}\nexports.DirLoader = DirLoader;\n","import * as _ from 'lodash';\r\nimport { ITask, IDirLoaderOption, IContextDefine, ITaskOption, ITaskContext, findTaskDefineInDir, taskSourceVal } from 'development-core';\r\nimport { ModuleLoader } from './ModuleLoader';\r\n\r\nexport class DirLoader extends ModuleLoader {\r\n\r\n    constructor(option: ITaskOption) {\r\n        super(option);\r\n    }\r\n\r\n    loadTasks(context: ITaskContext, def: IContextDefine): Promise<ITask[]> {\r\n        let loader: IDirLoaderOption = this.option.loader;\r\n        if (loader.dir) {\r\n            return context.findTasksInDir(taskSourceVal(loader.dir));\r\n        } else {\r\n            return super.loadTasks(context, def);\r\n        }\r\n    }\r\n\r\n    protected getContextDefine(): IContextDefine | Promise<IContextDefine> {\r\n        let loader: IDirLoaderOption = this.option.loader;\r\n        if (!loader.configModule\r\n            && !loader.module && loader.dir) {\r\n            return findTaskDefineInDir(taskSourceVal(loader.dir))\r\n        } else {\r\n            return super.getContextDefine();\r\n        }\r\n    }\r\n}\r\n"]}