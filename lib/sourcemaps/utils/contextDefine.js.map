{"version":3,"sources":["utils/contextDefine.ts"],"names":["development_core_1","require","exports","default","modules","getContext","config","bindingConfig","tasks","context","lderOption","option","loader","dtask","dynamicTasks","generateTask","findTasks","then","concat","Promise","resolve","reject"],"mappings":"YAAA,IAAAA,oBAAAC,QAAA,2EAGAC,QAAAC,QAAe,SAACC,GACZ,OACIC,WAAA,SAAWC,GACP,MAAON,oBAAAO,cAAcD,IAGzBE,MAAA,SAAMC,GACF,GAAIC,GAAmDD,EAAQE,OAAQC,OACnEC,IAIJ,OAHIH,GAAWI,eACXD,EAAQJ,EAAQM,aAAaL,EAAWI,eAExCV,EAEOK,EAAQO,UAAUZ,GACpBa,KAAK,SAAAT,GAKF,MAJAA,GAAQA,MACJK,IACAL,EAAQA,EAAMU,OAAOL,IAElBL,IAERK,EACAM,QAAQC,QAAQP,GAEhBM,QAAQE,OAAO","file":"../../utils/contextDefine.js","sourcesContent":["import { bindingConfig, ITask, ITaskConfig, ITaskContext, IContextDefine, } from 'development-core';\r\nimport { IDynamicLoaderOption, IAssertOption } from '../TaskOption';\r\n\r\nexport default (modules) => {\r\n    return <IContextDefine>{\r\n        getContext(config: ITaskConfig): ITaskContext {\r\n            return bindingConfig(config);\r\n        },\r\n\r\n        tasks(context: ITaskContext): Promise<ITask[]> {\r\n            let lderOption: IDynamicLoaderOption = (<IAssertOption>context.option).loader;\r\n            let dtask: ITask[] = [];\r\n            if (lderOption.dynamicTasks) {\r\n                dtask = context.generateTask(lderOption.dynamicTasks);\r\n            }\r\n            if (modules) {\r\n                // console.log(modules);\r\n                return context.findTasks(modules)\r\n                    .then(tasks => {\r\n                        tasks = tasks || [];\r\n                        if (dtask) {\r\n                            tasks = tasks.concat(dtask);\r\n                        }\r\n                        return tasks;\r\n                    });\r\n            } else if (dtask) {\r\n                return Promise.resolve(dtask);\r\n            } else {\r\n                return Promise.reject('can not find tasks!');\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}