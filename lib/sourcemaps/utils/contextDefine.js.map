{"version":3,"sources":["utils/contextDefine.js","utils/contextDefine.ts"],"names":["development_core_1","require","Object","defineProperty","exports","value","modules","getContext","config","bindingConfig","tasks","context","lderOption","option","loader","dtask","dynamicTasks","generateTask","findTasks","then","concat","Promise","resolve","reject"],"mappings":"AAAA,YCAA,IAAAA,oBAAAC,QAAsG,mBAEtGC,QAAAC,eAAAC,QAAA,cAAAC,OAAA,IAAAH,QAAAC,QAAe,SAACG,GACZ,OACIC,WADmB,SACRC,GACP,MAAOR,oBAAAS,cAAcD,IAGzBE,MALmB,SAKbC,GACF,GAAIC,GAAmCD,EAAQE,OAAOC,OAClDC,IAIJ,OAHIH,GAAWI,eACXD,EAAQJ,EAAQM,aAAaL,EAAWI,eAExCV,EAEOK,EAAQO,UAAUZ,GACpBa,KAAK,SAAAT,GAKF,MAJAA,GAAQA,MACJK,IACAL,EAAQA,EAAMU,OAAOL,IAElBL,IAERK,EACAM,QAAQC,QAAQP,GAEhBM,QAAQE,OAAO","file":"../../utils/contextDefine.js","sourcesContent":["\"use strict\";\nconst development_core_1 = require('development-core');\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = (modules) => {\n    return {\n        getContext(config) {\n            return development_core_1.bindingConfig(config);\n        },\n        tasks(context) {\n            let lderOption = context.option.loader;\n            let dtask = [];\n            if (lderOption.dynamicTasks) {\n                dtask = context.generateTask(lderOption.dynamicTasks);\n            }\n            if (modules) {\n                // console.log(modules);\n                return context.findTasks(modules)\n                    .then(tasks => {\n                    tasks = tasks || [];\n                    if (dtask) {\n                        tasks = tasks.concat(dtask);\n                    }\n                    return tasks;\n                });\n            }\n            else if (dtask) {\n                return Promise.resolve(dtask);\n            }\n            else {\n                return Promise.reject('can not find tasks!');\n            }\n        }\n    };\n};\n","import { bindingConfig, ITask, ITaskConfig, ITaskContext, IContextDefine, IDynamicLoaderOption } from 'development-core';\r\n\r\nexport default (modules) => {\r\n    return <IContextDefine>{\r\n        getContext(config: ITaskConfig): ITaskContext {\r\n            return bindingConfig(config);\r\n        },\r\n\r\n        tasks(context: ITaskContext): Promise<ITask[]> {\r\n            let lderOption: IDynamicLoaderOption = context.option.loader;\r\n            let dtask: ITask[] = [];\r\n            if (lderOption.dynamicTasks) {\r\n                dtask = context.generateTask(lderOption.dynamicTasks);\r\n            }\r\n            if (modules) {\r\n                // console.log(modules);\r\n                return context.findTasks(modules)\r\n                    .then(tasks => {\r\n                        tasks = tasks || [];\r\n                        if (dtask) {\r\n                            tasks = tasks.concat(dtask);\r\n                        }\r\n                        return tasks;\r\n                    });\r\n            } else if (dtask) {\r\n                return Promise.resolve(dtask);\r\n            } else {\r\n                return Promise.reject('can not find tasks!');\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}