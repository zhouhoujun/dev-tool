{"version":3,"sources":["utils/taskDefine.ts"],"names":[],"mappings":";;AAIA;;GAEG;AACH,kBAAe,UAAC,OAAO;IACnB,MAAM,CAAc;QAChB,KAAK,EAAL,UAAM,OAAqB;YACvB,IAAI,UAAU,GAAuC,OAAO,CAAC,MAAO,CAAC,MAA8B,CAAC;YACpG,IAAI,KAAK,GAAY,EAAE,CAAC;YACxB,EAAE,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC;gBAC1B,KAAK,GAAG,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;YAC1D,CAAC;YACD,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACV,wBAAwB;gBACxB,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC;qBAC5B,IAAI,CAAC,UAAA,KAAK;oBACP,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;oBACpB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;wBACR,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oBAChC,CAAC;oBACD,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC,CAAC,CAAC;YACX,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACf,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAClC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;YACjD,CAAC;QACL,CAAC;KACJ,CAAA;AACL,CAAC,CAAA","file":"../../utils/taskDefine.js","sourcesContent":["import { ITask, ITaskContext, ITaskDefine, } from 'development-core';\r\nimport { ITaskOption } from '../TaskOption';\r\nimport { IDynamicLoaderOption } from '../IDynamicLoaderOption';\r\n\r\n/**\r\n * create dynamic task define.\r\n */\r\nexport default (modules) => {\r\n    return <ITaskDefine>{\r\n        tasks(context: ITaskContext): Promise<ITask[]> {\r\n            let lderOption: IDynamicLoaderOption = (<ITaskOption>context.option).loader as IDynamicLoaderOption;\r\n            let dtask: ITask[] = [];\r\n            if (lderOption.dynamicTasks) {\r\n                dtask = context.generateTask(lderOption.dynamicTasks);\r\n            }\r\n            if (modules) {\r\n                // console.log(modules);\r\n                return context.findTasks(modules)\r\n                    .then(tasks => {\r\n                        tasks = tasks || [];\r\n                        if (dtask) {\r\n                            tasks = tasks.concat(dtask);\r\n                        }\r\n                        return tasks;\r\n                    });\r\n            } else if (dtask) {\r\n                return Promise.resolve(dtask);\r\n            } else {\r\n                return Promise.reject('can not find tasks!');\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}