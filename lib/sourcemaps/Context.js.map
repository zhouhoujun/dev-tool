{"version":3,"sources":["Context.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,qDAE0B;AAM1B,iDAAgE;AAChE,qCAA0C;AAG1C,IAAM,OAAO,GAAG,IAAI,6BAAa,EAAE,CAAC;AACpC,IAAM,OAAO,GAAG,IAAI,wBAAc,EAAE,CAAC;AAErC,MAAM;AACN,6BAA6B;AAC7B,IAAI;AACJ,YAAY;AACZ,4CAA4C;AAC5C,+BAA+B;AAC/B,wBAAwB;AACxB,sBAAsB;AACtB,KAAK;AACL,qGAAqG;AACrG,wFAAwF;AACxF,oEAAoE;AACpE,IAAI;AAEJ;;;;;;;GAOG;AACH;IAA6B,2BAAW;IAEpC,iBAAY,GAAgB;QAA5B,YACI,kBAAM,GAAG,CAAC,SAEb;QADG,KAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;;IAC5B,CAAC;IAGD,sBAAI,kCAAa;aAAjB;YACI,MAAM,CAAC,IAAI,CAAC,cAAc,IAAI,OAAO,CAAC;QAC1C,CAAC;aAED,UAAkB,GAAmB;YACjC,IAAI,CAAC,cAAc,GAAG,GAAG,CAAC;QAC9B,CAAC;;;OAJA;IAMD;;;;;;OAMG;IACO,+BAAa,GAAvB,UAAwB,GAAgB;QACpC,MAAM,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;IAGD,2BAAS,GAAT;QACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACnD,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAeL,cAAC;AAAD,CAhDA,AAgDC,CAhD4B,8BAAW,GAgDvC;AAhDY,0BAAO","file":"../Context.js","sourcesContent":["import {\r\n    ITaskContext, TaskContext, ITaskConfig, IAssertOption, Src, ITask, IDynamicTaskOption, Operation, RunWay, Builder\r\n} from 'development-core';\r\nimport * as _ from 'lodash';\r\nimport { TaskCallback } from 'gulp';\r\nimport { IContext } from './IContext';\r\nimport { ITaskOption, TaskOption } from './TaskOption';\r\nimport { ITaskLoader } from './ITaskLoader';\r\nimport { ILoaderFactory, LoaderFactory } from './loaderFactory';\r\nimport { ContextBuilder } from './Builder'\r\n\r\n\r\nconst factory = new LoaderFactory();\r\nconst builder = new ContextBuilder();\r\n\r\n// /**\r\n// * create Context instance.\r\n// *\r\n// * @static\r\n// * @param {(ITaskConfig | TaskOption)} cfg\r\n// * @param {IContext} [parent]\r\n// * @returns {IContext}\r\n// * @memberof Context\r\n// */\r\n// export function createConextInstance(cfg: ITaskConfig | TaskOption, parent?: IContext): IContext {\r\n//     let config: ITaskConfig = (cfg['option'] ? cfg : { option: cfg }) as ITaskConfig;\r\n//     return parent? parent.add(cfg) : new Context(config, parent);\r\n// }\r\n\r\n/**\r\n * Context.\r\n *\r\n * @export\r\n * @class Context\r\n * @extends {TaskContext}\r\n * @implements {IContext}\r\n */\r\nexport class Context extends TaskContext implements IContext {\r\n\r\n    constructor(cfg: ITaskConfig) {\r\n        super(cfg);\r\n        this._builder = builder;\r\n    }\r\n\r\n    private _loaderfactory: ILoaderFactory;\r\n    get loaderFactory(): ILoaderFactory {\r\n        return this._loaderfactory || factory;\r\n    }\r\n\r\n    set loaderFactory(fac: ILoaderFactory) {\r\n        this._loaderfactory = fac;\r\n    }\r\n\r\n    /**\r\n     * create new context;\r\n     *\r\n     * @param {ITaskConfig} cfg\r\n     * @returns {ITaskContext}\r\n     * @memberof TaskContext\r\n     */\r\n    protected createContext(cfg: ITaskConfig): ITaskContext {\r\n        return new Context(cfg);\r\n    }\r\n\r\n    private _loader: ITaskLoader;\r\n    getLoader(): ITaskLoader {\r\n        if (!this._loader) {\r\n            this._loader = this.loaderFactory.create(this);\r\n        }\r\n        return this._loader;\r\n    }\r\n\r\n    // todo: debug.\r\n    // setup() {\r\n    //     if (!this.builder.isBuilt(this)) {\r\n    //         this.builder.build(this);\r\n    //     }\r\n    //     return super.setup()\r\n    //         .then((data) => {\r\n    //             console.log('task seq:', data);\r\n    //             return data;\r\n    //         })\r\n\r\n    // }\r\n\r\n}\r\n"]}