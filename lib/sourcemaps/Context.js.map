{"version":3,"sources":["Context.ts"],"names":[],"mappings":"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","file":"../Context.js","sourcesContent":["import {\r\n    ITaskContext, TaskContext, ITaskConfig, IAssertOption, Src, ITask, IDynamicTaskOption, Operation, RunWay, Builder\r\n} from 'development-core';\r\nimport * as _ from 'lodash';\r\nimport { TaskCallback } from 'gulp';\r\nimport { IContext } from './IContext';\r\nimport { ITaskOption, TaskOption } from './TaskOption';\r\nimport { ILoaderFactory, LoaderFactory } from './loaderFactory';\r\nimport { ContextBuilder } from './Builder'\r\n\r\n\r\nconst factory = new LoaderFactory();\r\nconst builder = new ContextBuilder();\r\n\r\n// /**\r\n// * create Context instance.\r\n// *\r\n// * @static\r\n// * @param {(ITaskConfig | TaskOption)} cfg\r\n// * @param {IContext} [parent]\r\n// * @returns {IContext}\r\n// * @memberof Context\r\n// */\r\n// export function createConextInstance(cfg: ITaskConfig | TaskOption, parent?: IContext): IContext {\r\n//     let config: ITaskConfig = (cfg['option'] ? cfg : { option: cfg }) as ITaskConfig;\r\n//     return parent? parent.add(cfg) : new Context(config, parent);\r\n// }\r\n\r\n/**\r\n * Context.\r\n *\r\n * @export\r\n * @class Context\r\n * @extends {TaskContext}\r\n * @implements {IContext}\r\n */\r\nexport class Context extends TaskContext implements IContext {\r\n\r\n    // private children: IContext[] = [];\r\n    constructor(cfg: ITaskConfig) {\r\n        super(cfg);\r\n        this._builder = builder;\r\n    }\r\n\r\n    private loading = false;\r\n    private _loaderfactory: ILoaderFactory;\r\n    get loaderFactory(): ILoaderFactory {\r\n        return this._loaderfactory || factory;\r\n    }\r\n\r\n    set loaderFactory(fac: ILoaderFactory) {\r\n        this._loaderfactory = fac;\r\n    }\r\n\r\n    /**\r\n     * create new context;\r\n     *\r\n     * @param {ITaskConfig} cfg\r\n     * @returns {ITaskContext}\r\n     * @memberof TaskContext\r\n     */\r\n    protected createContext(cfg: ITaskConfig): ITaskContext {\r\n        return new Context(cfg);\r\n    }\r\n\r\n    addTask(...task: ITask[]) {\r\n        if (this.loading) {\r\n            super.addTask(...task);\r\n            return;\r\n        }\r\n\r\n        this.getLoaderTasks()\r\n            .then(tasks => {\r\n                super.addTask(...task);\r\n            });\r\n\r\n    }\r\n\r\n    removeTask(task: ITask): ITask[] | Promise<ITask[]> {\r\n        if (this.loading) {\r\n            return super.removeTask(task);\r\n        }\r\n\r\n        return this.getLoaderTasks()\r\n            .then(tasks => {\r\n                return super.removeTask(task);\r\n            });\r\n\r\n    }\r\n\r\n    private _loaderTasks: Promise<ITask[]>;\r\n    protected getLoaderTasks(): Promise<ITask[]> {\r\n        if (!this._loaderTasks) {\r\n            this.loading = true;\r\n            this._loaderTasks = this.loaderFactory.create(this)\r\n                .load()\r\n                .then(tks => {\r\n                    this.loading = false;\r\n                    return tks;\r\n                }, err => {\r\n                    this.loading = false;\r\n                    console.log(err);\r\n                    return null;\r\n                });\r\n        }\r\n        return this._loaderTasks\r\n    }\r\n    /**\r\n     * setup tasks.\r\n     *\r\n     * @returns {Promise<Src[]>}\r\n     *\r\n     * @memberof IContext\r\n     */\r\n    setupTasks(): Promise<Src[]> {\r\n        return this.getLoaderTasks()\r\n            .then(tsq => {\r\n                return super.setupTasks();\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                process.exit(1);\r\n                return null;\r\n            });\r\n    }\r\n\r\n    // todo: debug.\r\n    // setup() {\r\n    //     return super.setup()\r\n    //         .then((data) => {\r\n    //             console.log('task seq:', data);\r\n    //             return data;\r\n    //         })\r\n\r\n    // }\r\n\r\n    start(): Promise<Src[]> {\r\n        let gulp = this.gulp;\r\n        let isRoot = !this.parent;\r\n        let btsk = isRoot ? 'build' : `build-${this.toStr(this.option.name)}`;\r\n        gulp.task(btsk, (callback: TaskCallback) => {\r\n            return this.run();\r\n        });\r\n\r\n        gulp.task(isRoot ? 'start' : `start-${this.toStr(this.option.name)}`, (callback: TaskCallback) => {\r\n            if (!this.env.task) {\r\n                return Promise.reject('start task can not empty!');\r\n            }\r\n            let tasks = this.env.task.split(',');\r\n            return this.find<Context>(ctx => tasks.indexOf(ctx.toStr(ctx.option.name)) >= 0)\r\n                .run();\r\n        });\r\n\r\n        if (!this.parent) {\r\n            gulp.task('default', () => {\r\n                gulp.start(btsk);\r\n            });\r\n        }\r\n\r\n        return Promise.resolve([btsk]);\r\n    }\r\n\r\n}\r\n"]}