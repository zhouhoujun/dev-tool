{"version":3,"sources":["Context.js","Context.ts"],"names":["development_core_1","require","_","Context","cfg","parent","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","children","context","push","items","remove","each","i","express","mode","item","isFinded","isFunction","contexts","r","route","eachChildren","trans","TaskContext","exports"],"mappings":"AAAA,43BCAAA,mBAAAC,QAA0E,oBAE9DC,EAACD,QAAM,UAWnBE,oBAGI,QAAAA,GAAYC,EAAkBC,GAAqBC,gBAAAC,KAAAJ,EAAA,IAAAK,GAAAC,2BAAAF,MAAAJ,EAAAO,WAAAC,OAAAC,eAAAT,IAAAU,KAAAN,KACzCH,EAAKC,GADoC,OAD3CG,GAAAM,YAC2CN,kEAW/CO,GACAA,EAAQV,OAASE,KACjBA,KAAKO,SAASE,KAAKD,kCAShBA,GACH,GAAIE,GAAQf,EAAEgB,OAAOX,KAAKO,SAAUC,EAMpC,OALAb,GAAEiB,KAAKF,EAAO,SAAAG,GACNA,IACAA,EAAEf,OAAS,QAGZY,+BAYNI,EAAmDC,GACpD,GAAIP,GAAAA,MAYJ,OAXAR,MAAKY,KAAK,SAAAI,GACN,GAAIR,EACA,OAAO,CAEX,IAAIS,GAAWtB,EAAEuB,WAAWJ,GAAWA,EAAQE,GAAmBF,IAAaE,CAC/E,QAAIC,IACAT,EAAUQ,GACH,IAGZD,GACIP,iCAYJM,EAA+CC,GAClD,GAAII,KAMJ,OALAnB,MAAKY,KAAK,SAAAI,GACFF,EAAQE,IACRG,EAASV,KAAKO,IAEnBD,GACII,+BAUNL,EAA+CC,GAChDA,EAAOA,GAAQ,EACf,IAAIK,GAAAA,MACJ,QAAQL,GACJ,IAAK,QACDK,EAAIpB,KAAKqB,MAAMP,EACf,MACJ,KAAK,WACDM,EAAIpB,KAAKsB,aAAaR,EACtB,MAEJ,KAAK,WACDM,EAAIpB,KAAKuB,MAAMT,EACf,MACJ,SACIM,EAAIpB,KAAKuB,MAAMT,GAGvB,MAAOM,wCAGEN,GACTnB,EAAEiB,KAAKZ,KAAKO,SAAU,SAAAS,GAClB,MAAOF,GAAQE,mCAWjBF,GACF,QAAKA,EAAQd,QAGTA,KAAKF,QAAUE,KAAKF,OAAL,MACGE,KAAKF,OAAQuB,MAAMP,GADzC,sCAWEA,GACF,MAAIA,GAAQd,SAAU,IAGtBL,EAAEiB,KAAKZ,KAAKO,SAAU,SAAAS,GAClB,MAAOA,GAAKO,MAAMT,MAEf,UA9IcrB,mBAAA+B,YAAhBC,SAAA7B,QAAOA","file":"../Context.js","sourcesContent":["\"use strict\";\nconst development_core_1 = require('development-core');\nconst _ = require('lodash');\n/**\n * Context.\n *\n * @export\n * @class Context\n * @extends {TaskContext}\n * @implements {IContext}\n */\nclass Context extends development_core_1.TaskContext {\n    constructor(cfg, parent) {\n        super(cfg, parent);\n        this.children = [];\n    }\n    /**\n     * add sub IContext\n     *\n     * @param {IContext} context\n     *\n     * @memberOf IContext\n     */\n    add(context) {\n        context.parent = this;\n        this.children.push(context);\n    }\n    /**\n     * remove sub IContext.\n     *\n     * @param {IContext} [context]\n     *\n     * @memberOf IContext\n     */\n    remove(context) {\n        let items = _.remove(this.children, context);\n        _.each(items, i => {\n            if (i) {\n                i.parent = null;\n            }\n        });\n        return items;\n    }\n    /**\n     * find sub context via express.\n     *\n     * @param {(IContext | ((item: IContext) => boolean))} express\n     * @param {string} [mode] {enum:['route','children', traverse']} default traverse.\n     * @returns {IContext}\n     *\n     * @memberOf IContext\n     */\n    find(express, mode) {\n        let context;\n        this.each(item => {\n            if (context) {\n                return false;\n            }\n            let isFinded = _.isFunction(express) ? express(item) : express === item;\n            if (isFinded) {\n                context = item;\n                return false;\n            }\n            return true;\n        }, mode);\n        return context;\n    }\n    /**\n     * filter items.\n     *\n     * @param {(((item: IContext) => void | boolean))} express\n     * @param {string} [mode] {enum:['route','children', traverse']} default traverse.\n     * @returns {IContext[]}\n     *\n     * @memberOf IContext\n     */\n    filter(express, mode) {\n        let contexts = [];\n        this.each(item => {\n            if (express(item)) {\n                contexts.push(item);\n            }\n        }, mode);\n        return contexts;\n    }\n    /**\n     * find parent context via express.\n     *\n     * @param {(IContext | ((item: IContext) => boolean))} express\n     * @param {string} [mode] {enum:['route','children', traverse']} default traverse.\n     *\n     * @memberOf IContext\n     */\n    each(express, mode) {\n        mode = mode || '';\n        let r;\n        switch (mode) {\n            case 'route':\n                r = this.route(express);\n                break;\n            case 'children':\n                r = this.eachChildren(express);\n                break;\n            case 'traverse':\n                r = this.trans(express);\n                break;\n            default:\n                r = this.trans(express);\n                break;\n        }\n        return r;\n    }\n    eachChildren(express) {\n        _.each(this.children, item => {\n            return express(item);\n        });\n    }\n    /**\n     * do express work in routing.\n     *\n     * @param {(((item: IContext) => void | boolean))} express\n     *\n     * @memberOf IContext\n     */\n    route(express) {\n        if (!express(this)) {\n            return false;\n        }\n        ;\n        if (this.parent && this.parent['route']) {\n            return this.parent.route(express);\n        }\n    }\n    /**\n     * translate all sub context to do express work.\n     *\n     * @param {(((item: IContext) => void | boolean))} express\n     *\n     * @memberOf IContext\n     */\n    trans(express) {\n        if (express(this) === false) {\n            return false;\n        }\n        _.each(this.children, item => {\n            return item.trans(express);\n        });\n        return true;\n    }\n}\nexports.Context = Context;\n","import { TaskContext, ITaskConfig, ITaskContext, ITask, TaskResult } from 'development-core';\r\nimport { IContext } from './IContext';\r\nimport * as _ from 'lodash';\r\nimport { Gulp } from 'gulp';\r\n\r\n/**\r\n * Context.\r\n * \r\n * @export\r\n * @class Context\r\n * @extends {TaskContext}\r\n * @implements {IContext}\r\n */\r\nexport class Context extends TaskContext implements IContext {\r\n\r\n    private children: IContext[] = [];\r\n    constructor(cfg: ITaskConfig, parent?: ITaskContext) {\r\n        super(cfg, parent);\r\n    }\r\n\r\n    /**\r\n     * add sub IContext\r\n     * \r\n     * @param {IContext} context\r\n     * \r\n     * @memberOf IContext\r\n     */\r\n    add(context: IContext): void {\r\n        context.parent = this;\r\n        this.children.push(context);\r\n    }\r\n    /**\r\n     * remove sub IContext.\r\n     * \r\n     * @param {IContext} [context]\r\n     * \r\n     * @memberOf IContext\r\n     */\r\n    remove(context?: IContext): IContext[] {\r\n        let items = _.remove(this.children, context);\r\n        _.each(items, i => {\r\n            if (i) {\r\n                i.parent = null;\r\n            }\r\n        });\r\n        return items;\r\n    }\r\n\r\n    /**\r\n     * find sub context via express.\r\n     * \r\n     * @param {(IContext | ((item: IContext) => boolean))} express\r\n     * @param {string} [mode] {enum:['route','children', traverse']} default traverse.\r\n     * @returns {IContext}\r\n     * \r\n     * @memberOf IContext\r\n     */\r\n    find(express: IContext | ((item: IContext) => boolean), mode?: string): IContext {\r\n        let context: IContext;\r\n        this.each(item => {\r\n            if (context) {\r\n                return false;\r\n            }\r\n            let isFinded = _.isFunction(express) ? express(item) : (<IContext>express) === item;\r\n            if (isFinded) {\r\n                context = item;\r\n                return false;\r\n            }\r\n            return true;\r\n        }, mode);\r\n        return context;\r\n    }\r\n\r\n    /**\r\n     * filter items.\r\n     * \r\n     * @param {(((item: IContext) => void | boolean))} express\r\n     * @param {string} [mode] {enum:['route','children', traverse']} default traverse.\r\n     * @returns {IContext[]}\r\n     * \r\n     * @memberOf IContext\r\n     */\r\n    filter(express: ((item: IContext) => void | boolean), mode?: string): IContext[] {\r\n        let contexts: IContext[] = [];\r\n        this.each(item => {\r\n            if (express(item)) {\r\n                contexts.push(item);\r\n            }\r\n        }, mode);\r\n        return contexts;\r\n    }\r\n    /**\r\n     * find parent context via express.\r\n     * \r\n     * @param {(IContext | ((item: IContext) => boolean))} express\r\n     * @param {string} [mode] {enum:['route','children', traverse']} default traverse.\r\n     * \r\n     * @memberOf IContext\r\n     */\r\n    each(express: ((item: IContext) => void | boolean), mode?: string) {\r\n        mode = mode || '';\r\n        let r;\r\n        switch (mode) {\r\n            case 'route':\r\n                r = this.route(express);\r\n                break;\r\n            case 'children':\r\n                r = this.eachChildren(express);\r\n                break;\r\n\r\n            case 'traverse':\r\n                r = this.trans(express);\r\n                break;\r\n            default:\r\n                r = this.trans(express);\r\n                break;\r\n        }\r\n        return r;\r\n    }\r\n\r\n    eachChildren(express: ((item: IContext) => void | boolean)) {\r\n        _.each(this.children, item => {\r\n            return express(item);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * do express work in routing.\r\n     * \r\n     * @param {(((item: IContext) => void | boolean))} express\r\n     * \r\n     * @memberOf IContext\r\n     */\r\n    route(express: ((item: IContext) => void | boolean)) {\r\n        if (!express(this)) {\r\n            return false;\r\n        };\r\n        if (this.parent && this.parent['route']) {\r\n            return (<IContext>this.parent).route(express);\r\n        }\r\n    }\r\n    /**\r\n     * translate all sub context to do express work.\r\n     * \r\n     * @param {(((item: IContext) => void | boolean))} express\r\n     * \r\n     * @memberOf IContext\r\n     */\r\n    trans(express: ((item: IContext) => void | boolean)) {\r\n        if (express(this) === false) {\r\n            return false;\r\n        }\r\n        _.each(this.children, item => {\r\n            return item.trans(express);\r\n        });\r\n        return true;\r\n    }\r\n}\r\n"]}