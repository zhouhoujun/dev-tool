{"version":3,"sources":["loaderFactory.js","loaderFactory.ts"],"names":["DirLoader_1","require","ModuleLoader_1","DynamicLoader_1","CustomLoader_1","_","LoaderFactory","_classCallCheck","this","option","env","isString","loader","module","ModuleLoader","isFunction","CustomLoader","isArray","dynamicTasks","DynamicLoader","DirLoader","loderOption","type","exports"],"mappings":"AAAA,6XCCAA,YAAAC,QAA0B,uBAE1BC,eAAAD,QAA6B,0BAC7BE,gBAAAF,QAA8B,2BAC9BG,eAAAH,QAA6B,0BACjBI,EAACJ,QAAM,UA4BnBK,yBAEI,QAAAA,KAAAC,gBAAAC,KAAAF,uDAEOG,EAAqBC,GAExB,GAAIL,EAAEM,SAASF,EAAOG,QAIlB,MAHAH,GAAOG,QACHC,OAAQJ,EAAOG,QAEZ,GAAIV,gBAAAY,aAAaL,EACrB,IAAIJ,EAAEU,WAAWN,EAAOG,QAC3B,MAAO,IAAIR,gBAAAY,aAAaP,EAAQA,EAAOG,OACpC,IAAIP,EAAEY,QAAQR,EAAOG,QAIxB,MAHAH,GAAOG,QACHM,aAAcT,EAAOG,QAElB,GAAIT,iBAAAgB,cAAcV,EAGzB,IAAIA,EAAOG,OAAP,IACA,MAAO,IAAIZ,aAAAoB,UAAUX,EAAQC,EAIjC,IAAIL,EAAEM,SAASF,EAAOG,OAAP,MAIX,MAHAH,GAAOG,QACHM,aAAcT,EAAOG,QAElB,GAAIT,iBAAAgB,cAAcV,EAI7B,IAAIA,EAAOG,OAAP,aACA,MAAO,IAAIT,iBAAAgB,cAAcV,EAG7B,IAAIG,GAAsB,KACtBS,EAA6BZ,EAAOG,MACxC,QAAQS,EAAYC,MAChB,IAAK,MACDV,EAAS,GAAIZ,aAAAoB,UAAUX,EAAQC,EAC/B,MAEJ,KAAK,UACDE,EAAS,GAAIT,iBAAAgB,cAAcV,EAC3B,MAEJ,KAAK,SACL,QACIG,EAAS,GAAIV,gBAAAY,aAAaL,EAAQC,GAG1C,MAAOE,WArDNW,SAAAjB,cAAaA","file":"../loaderFactory.js","sourcesContent":["\"use strict\";\nconst DirLoader_1 = require('./loaders/DirLoader');\nconst ModuleLoader_1 = require('./loaders/ModuleLoader');\nconst DynamicLoader_1 = require('./loaders/DynamicLoader');\nconst CustomLoader_1 = require('./loaders/CustomLoader');\nconst _ = require('lodash');\n/**\n * loader factory.\n *\n * @export\n * @class LoaderFactory\n * @implements {ILoaderFactory}\n */\nclass LoaderFactory {\n    constructor() {\n    }\n    create(option, env) {\n        if (_.isString(option.loader)) {\n            option.loader = {\n                module: option.loader\n            };\n            return new ModuleLoader_1.ModuleLoader(option);\n        }\n        else if (_.isFunction(option.loader)) {\n            return new CustomLoader_1.CustomLoader(option, option.loader);\n        }\n        else if (_.isArray(option.loader)) {\n            option.loader = {\n                dynamicTasks: option.loader\n            };\n            return new DynamicLoader_1.DynamicLoader(option);\n        }\n        else {\n            // if config dir.\n            if (option.loader['dir']) {\n                return new DirLoader_1.DirLoader(option, env);\n            }\n            // dynamic task name.\n            if (_.isString(option.loader['name'])) {\n                option.loader = {\n                    dynamicTasks: option.loader\n                };\n                return new DynamicLoader_1.DynamicLoader(option);\n            }\n            // if config pipe and taskName.\n            if (option.loader['dynamicTasks']) {\n                return new DynamicLoader_1.DynamicLoader(option);\n            }\n            let loader = null;\n            let loderOption = option.loader;\n            switch (loderOption.type) {\n                case 'dir':\n                    loader = new DirLoader_1.DirLoader(option, env);\n                    break;\n                case 'dynamic':\n                    loader = new DynamicLoader_1.DynamicLoader(option);\n                    break;\n                case 'module':\n                default:\n                    loader = new ModuleLoader_1.ModuleLoader(option, env);\n                    break;\n            }\n            return loader;\n        }\n    }\n}\nexports.LoaderFactory = LoaderFactory;\n","import { ITaskLoader } from './ITaskLoader';\r\nimport { DirLoader } from './loaders/DirLoader';\r\nimport { ITaskOption, ILoaderOption, IDynamicLoaderOption, IEnvOption } from 'development-core';\r\nimport { ModuleLoader } from './loaders/ModuleLoader';\r\nimport { DynamicLoader } from './loaders/DynamicLoader';\r\nimport { CustomLoader } from './loaders/CustomLoader';\r\nimport * as _ from 'lodash';\r\n/**\r\n * loader factory.\r\n * \r\n * @export\r\n * @interface ILoaderFactory\r\n */\r\nexport interface ILoaderFactory {\r\n    /**\r\n     * create loader.\r\n     * \r\n     * @param {ITaskOption} option\r\n     * @param {IEnvOption} [env]\r\n     * @returns {ITaskLoader}\r\n     * \r\n     * @memberOf ILoaderFactory\r\n     */\r\n    create(option: ITaskOption, env?: IEnvOption): ITaskLoader;\r\n}\r\n\r\n\r\n/**\r\n * loader factory.\r\n * \r\n * @export\r\n * @class LoaderFactory\r\n * @implements {ILoaderFactory}\r\n */\r\nexport class LoaderFactory implements ILoaderFactory {\r\n\r\n    constructor() {\r\n    }\r\n    create(option: ITaskOption, env?: IEnvOption): ITaskLoader {\r\n\r\n        if (_.isString(option.loader)) {\r\n            option.loader = {\r\n                module: option.loader\r\n            };\r\n            return new ModuleLoader(option);\r\n        } else if (_.isFunction(option.loader)) {\r\n            return new CustomLoader(option, option.loader);\r\n        } else if (_.isArray(option.loader)) {\r\n            option.loader = <IDynamicLoaderOption>{\r\n                dynamicTasks: option.loader\r\n            };\r\n            return new DynamicLoader(option);\r\n        } else {\r\n            // if config dir.\r\n            if (option.loader['dir']) {\r\n                return new DirLoader(option, env);\r\n            }\r\n\r\n            // dynamic task name.\r\n            if (_.isString(option.loader['name'])) {\r\n                option.loader = <IDynamicLoaderOption>{\r\n                    dynamicTasks: option.loader\r\n                };\r\n                return new DynamicLoader(option);\r\n            }\r\n\r\n            // if config pipe and taskName.\r\n            if (option.loader['dynamicTasks']) {\r\n                return new DynamicLoader(option);\r\n            }\r\n\r\n            let loader: ITaskLoader = null;\r\n            let loderOption: ILoaderOption = option.loader;\r\n            switch (loderOption.type) {\r\n                case 'dir':\r\n                    loader = new DirLoader(option, env);\r\n                    break;\r\n\r\n                case 'dynamic':\r\n                    loader = new DynamicLoader(option);\r\n                    break;\r\n\r\n                case 'module':\r\n                default:\r\n                    loader = new ModuleLoader(option, env);\r\n                    break;\r\n            }\r\n            return loader;\r\n        }\r\n    }\r\n}\r\n"]}