{"version":3,"sources":["loaderFactory.ts"],"names":["DirLoader_1","require","ModuleLoader_1","DynamicLoader_1","CustomLoader_1","_","chalk","LoaderFactory","prototype","create","option","env","factory","isString","loader","module","ModuleLoader","isFunction","CustomLoader","isArray","dynamicTasks","DynamicLoader","DirLoader","loderOption","type","console","log","cyan","name","yellow","exports"],"mappings":"YACA,IAAAA,aAAAC,QAAA,uBAIAC,eAAAD,QAAA,0BACAE,gBAAAF,QAAA,2BACAG,eAAAH,QAAA,0BACAI,EAAAJ,QAAA,UACAK,MAAAL,QAAA,SA8BAM,cAAA,WAEI,QAAAA,MA4DJ,MA1DIA,GAAAC,UAAAC,OAAA,SAAOC,EAAqBC,EAAkBC,GAE1C,GAAIP,EAAEQ,SAASH,EAAOI,QAIlB,MAHAJ,GAAOI,QACHC,OAAQL,EAAOI,QAEZ,GAAIZ,gBAAAc,aAAaN,EAAQC,EAAKC,EAClC,IAAIP,EAAEY,WAAWP,EAAOI,QAC3B,MAAO,IAAIV,gBAAAc,aAAaR,EAAQA,EAAOI,OAAQF,EAC5C,IAAIP,EAAEc,QAAQT,EAAOI,QAIxB,MAHAJ,GAAOI,QACHM,aAAcV,EAAOI,YAElB,GAAIX,iBAAAkB,cAAcX,EAAQC,EAAKC,EACnC,IAAIF,EAAOI,OAAQ,CAEtB,GAAIJ,EAAOI,OAAY,IACnB,MAAO,IAAId,aAAAsB,UAAUZ,EAAQC,EAIjC,IAAIN,EAAEQ,SAASH,EAAOI,OAAa,MAI/B,MAHAJ,GAAOI,QACHM,aAAcV,EAAOI,QAElB,GAAIX,iBAAAkB,cAAcX,EAAQC,EAAKC,EAI1C,IAAIF,EAAOI,OAAqB,aAC5B,MAAO,IAAIX,iBAAAkB,cAAcX,EAG7B,IAAII,GAAsB,KACtBS,EAA6Bb,EAAOI,MACxC,QAAQS,EAAYC,MAChB,IAAK,MACDV,EAAS,GAAId,aAAAsB,UAAUZ,EAAQC,EAAKC,EACpC,MAEJ,KAAK,UACDE,EAAS,GAAIX,iBAAAkB,cAAcX,EAAQC,EAAKC,EACxC,MAEJ,KAAK,SACL,QACIE,EAAS,GAAIZ,gBAAAc,aAAaN,EAAQC,EAAKC,GAG/C,MAAOE,GAMP,MAJAW,SAAQC,IAAIpB,MAAMqB,KAAajB,EAAOkB,MAAOtB,MAAMuB,OAAO,4CAC1DnB,EAAOI,QACHM,iBAEG,GAAIjB,iBAAAkB,cAAcX,EAAQC,EAAKC,IAGlDL,IA9DauB,SAAAvB,cAAAA","file":"../loaderFactory.js","sourcesContent":["import { ITaskLoader } from './ITaskLoader';\r\nimport { DirLoader } from './loaders/DirLoader';\r\nimport { IEnvOption } from 'development-core';\r\n\r\nimport { ITaskOption, ILoaderOption, IDynamicLoaderOption, contextFactory } from './TaskOption'\r\nimport { ModuleLoader } from './loaders/ModuleLoader';\r\nimport { DynamicLoader } from './loaders/DynamicLoader';\r\nimport { CustomLoader } from './loaders/CustomLoader';\r\nimport * as _ from 'lodash';\r\nimport * as chalk from 'chalk';\r\n\r\n/**\r\n * loader factory.\r\n * \r\n * @export\r\n * @interface ILoaderFactory\r\n */\r\nexport interface ILoaderFactory {\r\n    /**\r\n     * create loader.\r\n     * \r\n     * @param {ITaskOption} option\r\n     * @param {IEnvOption} [env]\r\n     * @param {contextFactory} [factory]\r\n     * @returns {ITaskLoader}\r\n     * \r\n     * @memberOf ILoaderFactory\r\n     */\r\n    create(option: ITaskOption, env?: IEnvOption, factory?: contextFactory): ITaskLoader;\r\n}\r\n\r\n\r\n/**\r\n * loader factory.\r\n * \r\n * @export\r\n * @class LoaderFactory\r\n * @implements {ILoaderFactory}\r\n */\r\nexport class LoaderFactory implements ILoaderFactory {\r\n\r\n    constructor() {\r\n    }\r\n    create(option: ITaskOption, env?: IEnvOption, factory?: contextFactory): ITaskLoader {\r\n\r\n        if (_.isString(option.loader)) {\r\n            option.loader = {\r\n                module: option.loader\r\n            };\r\n            return new ModuleLoader(option, env, factory);\r\n        } else if (_.isFunction(option.loader)) {\r\n            return new CustomLoader(option, option.loader, factory);\r\n        } else if (_.isArray(option.loader)) {\r\n            option.loader = <IDynamicLoaderOption>{\r\n                dynamicTasks: option.loader || []\r\n            };\r\n            return new DynamicLoader(option, env, factory);\r\n        } else if (option.loader) {\r\n            // if config dir.\r\n            if (option.loader['dir']) {\r\n                return new DirLoader(option, env);\r\n            }\r\n\r\n            // dynamic task name.\r\n            if (_.isString(option.loader['name'])) {\r\n                option.loader = <IDynamicLoaderOption>{\r\n                    dynamicTasks: option.loader\r\n                };\r\n                return new DynamicLoader(option, env, factory);\r\n            }\r\n\r\n            // if config pipe and taskName.\r\n            if (option.loader['dynamicTasks']) {\r\n                return new DynamicLoader(option);\r\n            }\r\n\r\n            let loader: ITaskLoader = null;\r\n            let loderOption: ILoaderOption = option.loader;\r\n            switch (loderOption.type) {\r\n                case 'dir':\r\n                    loader = new DirLoader(option, env, factory);\r\n                    break;\r\n\r\n                case 'dynamic':\r\n                    loader = new DynamicLoader(option, env, factory);\r\n                    break;\r\n\r\n                case 'module':\r\n                default:\r\n                    loader = new ModuleLoader(option, env, factory);\r\n                    break;\r\n            }\r\n            return loader;\r\n        } else {\r\n            console.log(chalk.cyan(<string>option.name), chalk.yellow('loader not setting, use dynamic loader.'))\r\n            option.loader = <IDynamicLoaderOption>{\r\n                dynamicTasks: []\r\n            };\r\n            return new DynamicLoader(option, env, factory);\r\n        }\r\n    }\r\n}\r\n"]}