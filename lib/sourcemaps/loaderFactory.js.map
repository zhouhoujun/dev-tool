{"version":3,"sources":["loaderFactory.ts"],"names":[],"mappings":";AACA,4BAA0B,qBAAqB,CAAC,CAAA;AAEhD,+BAA6B,wBAAwB,CAAC,CAAA;AACtD,gCAA8B,yBAAyB,CAAC,CAAA;AACxD,MAAY,CAAC,WAAM,QAAQ,CAAC,CAAA;AAmB5B;IAEI;IACA,CAAC;IACD,MAAM,CAAC,MAAkB;QAErB,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,MAAM,GAAG;gBACZ,MAAM,EAAE,MAAM,CAAC,MAAM;aACxB,CAAC;YACF,MAAM,CAAC,IAAI,2BAAY,CAAC,MAAM,CAAC,CAAC;QACpC,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,GAAwB;gBACjC,YAAY,EAAE,MAAM,CAAC,MAAM;aAC9B,CAAC;YACF,MAAM,CAAC,IAAI,6BAAa,CAAC,MAAM,CAAC,CAAC;QACrC,CAAC;QAAC,IAAI,CAAC,CAAC;YAEJ,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACvB,MAAM,CAAC,IAAI,qBAAS,CAAC,MAAM,CAAC,CAAC;YACjC,CAAC;YAGD,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpC,MAAM,CAAC,MAAM,GAAwB;oBACjC,YAAY,EAAE,MAAM,CAAC,MAAM;iBAC9B,CAAC;gBACF,MAAM,CAAC,IAAI,6BAAa,CAAC,MAAM,CAAC,CAAC;YACrC,CAAC;YAGD,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,IAAI,6BAAa,CAAC,MAAM,CAAC,CAAC;YACrC,CAAC;YAED,IAAI,MAAM,GAAG,IAAI,CAAC;YAClB,IAAI,WAAW,GAAiB,MAAM,CAAC,MAAM,CAAC;YAC9C,MAAM,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;gBACvB,KAAK,KAAK;oBACN,MAAM,GAAG,IAAI,qBAAS,CAAC,MAAM,CAAC,CAAC;oBAC/B,KAAK,CAAC;gBAEV,KAAK,SAAS;oBACV,MAAM,GAAG,IAAI,6BAAa,CAAC,MAAM,CAAC,CAAC;oBACnC,KAAK,CAAC;gBAEV,KAAK,QAAQ,CAAC;gBACd;oBACI,MAAM,GAAG,IAAI,2BAAY,CAAC,MAAM,CAAC,CAAC;oBAClC,KAAK,CAAC;YACd,CAAC;YACD,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;IACL,CAAC;AACL,CAAC;AAtDY,qBAAa,gBAsDzB,CAAA","file":"../loaderFactory.js","sourcesContent":["import { ITaskLoader } from './ITaskLoader';\r\nimport { DirLoader } from './loaders/DirLoader';\r\nimport { TaskOption, LoaderOption, DynamicLoaderOption } from './TaskConfig';\r\nimport { ModuleLoader } from './loaders/ModuleLoader';\r\nimport { DynamicLoader } from './loaders/DynamicLoader';\r\nimport * as _ from 'lodash';\r\n/**\r\n * loader factory.\r\n * \r\n * @export\r\n * @interface ILoaderFactory\r\n */\r\nexport interface ILoaderFactory {\r\n    create(option: TaskOption): ITaskLoader;\r\n}\r\n\r\n\r\n/**\r\n * loader factory.\r\n * \r\n * @export\r\n * @class LoaderFactory\r\n * @implements {ILoaderFactory}\r\n */\r\nexport class LoaderFactory implements ILoaderFactory {\r\n\r\n    constructor() {\r\n    }\r\n    create(option: TaskOption): ITaskLoader {\r\n\r\n        if (_.isString(option.loader)) {\r\n            option.loader = {\r\n                module: option.loader\r\n            };\r\n            return new ModuleLoader(option);\r\n        } else if (_.isArray(option.loader)) {\r\n            option.loader = <DynamicLoaderOption>{\r\n                dynamicTasks: option.loader\r\n            };\r\n            return new DynamicLoader(option);\r\n        } else {\r\n            // if config dir.\r\n            if (option.loader['dir']) {\r\n                return new DirLoader(option);\r\n            }\r\n\r\n            // dynamic task name.\r\n            if (_.isString(option.loader['name'])) {\r\n                option.loader = <DynamicLoaderOption>{\r\n                    dynamicTasks: option.loader\r\n                };\r\n                return new DynamicLoader(option);\r\n            }\r\n\r\n            // if config pipe and taskName.\r\n            if (option.loader['dynamicTasks']) {\r\n                return new DynamicLoader(option);\r\n            }\r\n\r\n            let loader = null;\r\n            let loderOption: LoaderOption = option.loader;\r\n            switch (loderOption.type) {\r\n                case 'dir':\r\n                    loader = new DirLoader(option);\r\n                    break;\r\n\r\n                case 'dynamic':\r\n                    loader = new DynamicLoader(option);\r\n                    break;\r\n\r\n                case 'module':\r\n                default:\r\n                    loader = new ModuleLoader(option);\r\n                    break;\r\n            }\r\n            return loader;\r\n        }\r\n    }\r\n}\r\n"]}