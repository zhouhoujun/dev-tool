{"version":3,"sources":["Builder.ts"],"names":[],"mappings":"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","file":"../Builder.js","sourcesContent":["import {\r\n    ITaskContext, IMap, IAsserts, TaskContext, ITaskConfig, Src, ITask, IDynamicTaskOption, Operation, RunWay, Builder\r\n} from 'development-core';\r\nimport * as _ from 'lodash';\r\nimport { TaskCallback } from 'gulp';\r\nimport { IContext } from './IContext';\r\nimport { ITaskOption, TaskOption } from './TaskOption';\r\nimport { ILoaderFactory, LoaderFactory } from './loaderFactory';\r\nimport { createConextInstance, Context } from './Context';\r\n\r\n\r\nexport class ContextBuilder implements Builder {\r\n\r\n    /**\r\n     * build context component.\r\n     *\r\n     * @protected\r\n     * @memberof Development\r\n     */\r\n    build<T extends IAsserts>(node: ITaskContext, option?: T): ITaskContext {\r\n        option ? this.buildContexts(node as IContext, option) : this.buildContext(node as IContext);\r\n        node['__built'] = true;\r\n        return node;\r\n    }\r\n\r\n\r\n    /**\r\n     * is built or not.\r\n     *\r\n     * @param {ITaskContext} node\r\n     * @returns {boolean}\r\n     * @memberof ContextBuilder\r\n     */\r\n    isBuilt(node: ITaskContext): boolean {\r\n        return node && node['__built'];\r\n    }\r\n\r\n    clean(node: ITaskContext) {\r\n        if (node) {\r\n            node['__built'] = undefined;\r\n        }\r\n    }\r\n\r\n    protected buildContext(node: IContext) {\r\n        let optask = node.option as ITaskOption;\r\n        if (optask.asserts) {\r\n            let assertctx = createConextInstance(_.extend({ name: 'asserts', loader: [], order: optask.assertsOrder }), node);\r\n            let asserts = optask.asserts;\r\n            optask.asserts = null;\r\n            this.buildAssertContext(assertctx, asserts, optask.assertsRunWay);\r\n        }\r\n        if (optask.tasks) {\r\n            this.buildSubContext(node);\r\n        }\r\n    }\r\n\r\n    protected buildContexts(parent: IContext, taskOptions: TaskOption) {\r\n        let tasks: ITaskOption[] = _.isArray(taskOptions) ? taskOptions : [taskOptions];\r\n        tasks.forEach(optask => {\r\n            if (optask.oper && parent.oper && (parent.oper & optask.oper) <= 0) {\r\n                return;\r\n            }\r\n            let ctx: IContext = createConextInstance(optask, parent);\r\n            if (optask.asserts) {\r\n                let assertctx = createConextInstance(_.extend({ name: 'asserts', loader: [], order: optask.assertsOrder }), ctx);\r\n                let asserts = optask.asserts;\r\n                optask.asserts = null;\r\n                this.buildAssertContext(assertctx, asserts, optask.assertsRunWay);\r\n            }\r\n            if (optask.tasks) {\r\n                this.buildSubContext(ctx);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n        * build asserts tasks.\r\n        *\r\n        * @protected\r\n        * @param {ITaskContext} ctx\r\n        *\r\n        * @memberOf Builder\r\n        */\r\n    protected buildAssertContext(ctx: IContext, asserts: IMap<Operation | Src | IAsserts | IDynamicTaskOption[]>, runWay?: RunWay) {\r\n\r\n        let tasks: ITaskOption[] = [];\r\n        _.each(_.keys(asserts), name => {\r\n            let op: ITaskOption;\r\n            let sr = asserts[name];\r\n            if (_.isString(sr)) {\r\n                op = <ITaskOption>{ src: sr };\r\n            } else if (_.isNumber(sr)) {\r\n                // watch with Operation.autoWatch.\r\n                op = <ITaskOption>{ loader: [{ oper: sr, name: name, pipes: [] }] };\r\n            } else if (_.isFunction(sr)) {\r\n                op = <ITaskOption>{ loader: sr };\r\n            } else if (_.isArray(sr)) {\r\n                if (sr.length > 0) {\r\n                    if (!_.some(<string[]>sr, it => !_.isString(it))) {\r\n                        op = <ITaskOption>{ src: <string[]>sr };\r\n                    } else {\r\n                        op = <ITaskOption>{ loader: <IDynamicTaskOption[]>sr, watch: true };\r\n                    }\r\n                }\r\n            } else {\r\n                op = sr;\r\n            }\r\n\r\n            if (_.isNull(op) || _.isUndefined(op)) {\r\n                return;\r\n            }\r\n            if (!op.loader) {\r\n                op.loader = [{ name: name, pipes: [], watch: true }]\r\n            }\r\n            op.name = op.name || ctx.subTaskName(name);\r\n            op.src = op.src || (ctx.getSrc({ oper: Operation.default }) + '/**/*.' + name);\r\n            // op.dist = op.dist || ctx.getDist({ oper: Operation.build });\r\n            op.runWay = op.runWay || runWay || RunWay.parallel;\r\n            tasks.push(op);\r\n        });\r\n\r\n        this.buildContexts(ctx, tasks);\r\n        // this.creatContext(tasks, ctx);\r\n    }\r\n    /**\r\n     * build sub context.\r\n     *\r\n     * @protected\r\n     * @param {IContext} ctx\r\n     *\r\n     * @memberOf Builder\r\n     */\r\n    protected buildSubContext(ctx: IContext) {\r\n\r\n        let optask = <ITaskOption>ctx.option;\r\n        // console.log('task options:', optask);\r\n        if (!optask.tasks) {\r\n            return;\r\n        }\r\n        let tasks = _.isArray(optask.tasks) ? optask.tasks : [optask.tasks];\r\n        let subtasks = tasks.map(subopt => {\r\n            if (!subopt.order) {\r\n                let subOrder = ctx.to(optask.subTaskOrder);\r\n                if (!_.isNumber(subOrder) && subOrder) {\r\n                    optask.order = optask.order || subOrder.runWay;\r\n                } else if (optask.subTaskRunWay) {\r\n                    subopt.order = { runWay: optask.subTaskRunWay };\r\n                }\r\n            }\r\n            subopt.name = ctx.subTaskName(subopt.name);\r\n            return subopt;\r\n        });\r\n\r\n        this.buildContexts(ctx, subtasks);\r\n\r\n    }\r\n}\r\n"]}