{"version":3,"sources":["Builder.ts"],"names":[],"mappings":"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","file":"../Builder.js","sourcesContent":["import {\r\n    ITaskContext, IMap, IAsserts, TaskContext, ITaskConfig, Src, ITask, IDynamicTaskOption, Operation, RunWay, Builder\r\n} from 'development-core';\r\nimport * as _ from 'lodash';\r\nimport { TaskCallback } from 'gulp';\r\nimport * as path from 'path';\r\nimport { IContext } from './IContext';\r\nimport { ITaskOption, TaskOption } from './TaskOption';\r\nimport { ILoaderFactory, LoaderFactory } from './loaderFactory';\r\nimport { Context } from './Context';\r\n\r\nexport class ContextBuilder implements Builder {\r\n\r\n    /**\r\n     * build context component.\r\n     *\r\n     * @protected\r\n     * @memberof Development\r\n     */\r\n    build<T extends IAsserts>(node: ITaskContext, option?: T): ITaskContext | Promise<ITaskContext> {\r\n        let ctx = node as IContext;\r\n        return option ? this.buildContexts(ctx, option) : this.buildContext(ctx);\r\n    }\r\n\r\n\r\n    /**\r\n     * is built or not.\r\n     *\r\n     * @param {ITaskContext} node\r\n     * @returns {boolean}\r\n     * @memberof ContextBuilder\r\n     */\r\n    isBuilt(node: ITaskContext): boolean {\r\n        return node && node['__built'];\r\n    }\r\n\r\n    clean(node: ITaskContext) {\r\n        if (node) {\r\n            node['__built'] = undefined;\r\n        }\r\n    }\r\n\r\n    setBuilt(node: ITaskContext) {\r\n        if (node) {\r\n            node['__built'] = true;\r\n        }\r\n    }\r\n\r\n    protected buildContext(node: IContext): Promise<ITaskContext> {\r\n        return node.getLoader()\r\n            .load()\r\n            .then((tasks) => {\r\n                // this.setBuilt(node);\r\n                let component = [];\r\n                let optask = node.option as ITaskOption;\r\n                let env = node.env;\r\n                if (optask.refs && optask.refs.length > 0) {\r\n                    let refsctx = node.add(<ITaskOption>{\r\n                        name: 'refs',\r\n                        loader: (ctx) => {\r\n                            return ctx.generateTask(optask.refs.map(rf => {\r\n                                let name: string, pjpath: string, cmd, args: string[];\r\n                                if (_.isString(rf)) {\r\n                                    name = path.basename(rf);\r\n                                    pjpath = ctx.toRootPath(rf);\r\n                                } else if (_.isFunction(rf)) {\r\n                                    pjpath = ctx.toRootPath(ctx.toStr(rf));\r\n                                    name = path.basename(pjpath);\r\n                                } else {\r\n                                    name = ctx.toStr(rf.name);\r\n                                    pjpath = ctx.toRootPath(ctx.toStr(rf.path));\r\n                                    cmd = ctx.toStr(rf.cmd);\r\n                                    let srcArgs = ctx.toSrc(rf.args);\r\n                                    if (srcArgs) {\r\n                                        if (_.isArray(srcArgs) && srcArgs.length > 0) {\r\n                                            args = srcArgs;\r\n                                        } else if (srcArgs && _.isString(srcArgs)) {\r\n                                            args = [srcArgs];\r\n                                        }\r\n                                    }\r\n                                }\r\n                                return <IDynamicTaskOption>{\r\n                                    name: name,\r\n                                    runWay: optask.refsRunWay || RunWay.parallel,\r\n                                    shell: (ctx) => {\r\n                                        cmd = cmd || 'gulp build';\r\n                                        let cmds = '';\r\n                                        if (/^[C-Z]:/.test(pjpath)) {\r\n                                            cmds = _.first(pjpath.split(':')) + ': & ';\r\n                                        }\r\n                                        cmds += `cd ${pjpath} & ${cmd}`;\r\n                                        if (!args) {\r\n                                            args = [];\r\n                                            _.keys(env).map(k => {\r\n                                                if (k === 'root' || !/^[a-zA-Z]/.test(k)) {\r\n                                                    return;\r\n                                                }\r\n                                                let val = env[k];\r\n                                                if (_.isBoolean(val)) {\r\n                                                    if (val) {\r\n                                                        args.push(`--${k}`);\r\n                                                    }\r\n                                                } else if (val) {\r\n                                                    args.push(`--${k} ${val}`);\r\n                                                }\r\n\r\n                                            });\r\n                                        }\r\n                                        cmds += ` ${args.join(' ')}`;\r\n                                        return cmds;\r\n                                    }\r\n                                }\r\n                            }));\r\n                        }, order: optask.refsOrder\r\n                    }) as IContext;\r\n\r\n                }\r\n                if (optask.asserts) {\r\n                    let assertctx = node.add(<ITaskOption>{ name: 'asserts', loader: [], order: optask.assertsOrder }) as IContext;\r\n                    let asserts = optask.asserts;\r\n                    optask.asserts = null;\r\n                    component.push(this.buildAssertContext(assertctx, asserts, optask.assertsRunWay));\r\n                }\r\n                if (optask.tasks) {\r\n                    component.push(this.buildSubContext(node));\r\n                }\r\n\r\n                return Promise.all(component);\r\n            })\r\n            .then(() => {\r\n                this.setBuilt(node);\r\n                return node;\r\n            });\r\n\r\n    }\r\n\r\n    protected buildContexts(parent: IContext, taskOptions: TaskOption): Promise<ITaskContext> {\r\n        return parent.getLoader()\r\n            .load()\r\n            .then(() => {\r\n                return this.createContexts(parent, taskOptions);\r\n            })\r\n            .then(() => {\r\n                this.setBuilt(parent);\r\n                return parent;\r\n\r\n            })\r\n    }\r\n\r\n    protected createContexts(node: IContext, taskOptions: TaskOption): Promise<ITaskContext[]> {\r\n        let tasks: ITaskOption[] = _.isArray(taskOptions) ? taskOptions : [taskOptions];\r\n        return Promise.all(tasks.map(optask => {\r\n            if (optask.oper && node.oper && (node.oper & optask.oper) <= 0) {\r\n                return null;\r\n            }\r\n            let ctx: IContext = node.add(optask) as IContext;\r\n            return this.buildContext(ctx);\r\n        }));\r\n    }\r\n\r\n    /**\r\n    * build asserts tasks.\r\n    *\r\n    * @protected\r\n    * @param {ITaskContext} ctx\r\n    *\r\n    * @memberOf Builder\r\n    */\r\n    protected buildAssertContext(ctx: IContext, asserts: IMap<Operation | Src | IAsserts | IDynamicTaskOption[]>, runWay?: RunWay) {\r\n        let tasks: ITaskOption[] = [];\r\n        _.each(_.keys(asserts), name => {\r\n            let op: ITaskOption;\r\n            let sr = asserts[name];\r\n            if (_.isString(sr)) {\r\n                op = <ITaskOption>{ src: sr };\r\n            } else if (_.isNumber(sr)) {\r\n                // watch with Operation.autoWatch.\r\n                op = <ITaskOption>{ loader: [{ oper: sr, name: name, pipes: [] }] };\r\n            } else if (_.isFunction(sr)) {\r\n                op = <ITaskOption>{ loader: sr };\r\n            } else if (_.isArray(sr)) {\r\n                if (sr.length > 0) {\r\n                    if (!_.some(<string[]>sr, it => !_.isString(it))) {\r\n                        op = <ITaskOption>{ src: <string[]>sr };\r\n                    } else {\r\n                        op = <ITaskOption>{ loader: <IDynamicTaskOption[]>sr, watch: true };\r\n                    }\r\n                }\r\n            } else {\r\n                op = sr;\r\n            }\r\n\r\n            if (_.isNull(op) || _.isUndefined(op)) {\r\n                return;\r\n            }\r\n            if (!op.loader) {\r\n                op.loader = [{ name: name, pipes: [], watch: true }]\r\n            }\r\n            op.defaultTaskName = name;\r\n            op.src = op.src || (ctx.getSrc() + '/**/*.' + name);\r\n            // op.dist = op.dist || ctx.getDist();\r\n            op.runWay = op.runWay || runWay || RunWay.parallel;\r\n            tasks.push(op);\r\n        });\r\n\r\n        return this.createContexts(ctx, tasks);\r\n    }\r\n    /**\r\n     * build sub context.\r\n     *\r\n     * @protected\r\n     * @param {IContext} ctx\r\n     *\r\n     * @memberOf Builder\r\n     */\r\n    protected buildSubContext(ctx: IContext) {\r\n\r\n        let optask = <ITaskOption>ctx.option;\r\n        if (!optask.tasks) {\r\n            return null;\r\n        }\r\n        let tasks = _.isArray(optask.tasks) ? optask.tasks : [optask.tasks];\r\n        // let idex = 0;\r\n        let subtasks = tasks.map(subopt => {\r\n            if (!subopt.order) {\r\n                let subOrder = ctx.to(optask.subTaskOrder);\r\n                if (!_.isNumber(subOrder) && subOrder) {\r\n                    optask.order = optask.order || subOrder.runWay;\r\n                } else if (optask.subTaskRunWay) {\r\n                    subopt.order = { runWay: optask.subTaskRunWay };\r\n                }\r\n            }\r\n            // subopt.name = subopt.name || ctx.taskName(subopt.name); // ('sub' + idex++);\r\n            return subopt;\r\n        });\r\n\r\n        return this.createContexts(ctx, subtasks);\r\n\r\n    }\r\n}\r\n"]}