{"version":3,"sources":["tools.js","tools.ts"],"names":["__export","m","p","exports","hasOwnProperty","runSequence","gulp","tasks","ps","Promise","resolve","length","_","each","task","then","taskErr","taskStop","reslove","reject","tskmap","isArray","t","err","e","some","values","it","on","start","catch","console","error","files","directory","express","res","fn","fs_1","readdirSync","fname","filePn","fst","lstatSync","isDirectory","concat","push","createWatchTask","dt","cfg","watchs","isFunction","watch","last","event","watchChanged","name","log","chalk","cyan","call","option","src","createTask","createTaskWork","pipes","psrc","stram","pipe","stream","output","outputs","all","map","once","dest","getDist","red","dynamicTask","oper","env","taskseq","require","minimist","LoaderFactory_1","TaskConfig_1","Development","dirname","_classCallCheck","this","globals","_this","root","help","grey","printHelp","loadTasks","tseq","fileFilter","dynamicTasks","asserts","dist","Operation","build","test","e2e","release","deploy","_this2","seq","isString","flatten","toSquence","_this3","optask","loader","createLoader","loadConfg","green","bindingConfig","loadSubTask","subtask","load","loadAssertTasks","setup","tsq","config","assertsTask","subGroupTask","_this4","ts","tsqs","runTasks","splice","subopt","subseq","first","frn","lsn","subName","_this5","_ret","keys","op","aop","isNull","isUndefined","v","sq","_typeof","_this6","loaderFactory","factory","LoaderFactory","opt","create","devtool","callback","options","process","argv","slice","string","default","NODE_ENV","run"],"mappings":"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","file":"../tools.js","sourcesContent":["\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nconst _ = require('lodash');\nconst fs_1 = require('fs');\nconst minimist = require('minimist');\nconst LoaderFactory_1 = require('./LoaderFactory');\nconst TaskConfig_1 = require('./TaskConfig');\nconst chalk = require('chalk');\n__export(require('./TaskConfig'));\n__export(require('./LoaderFactory'));\n__export(require('./loaders/BaseLoader'));\nclass Development {\n    constructor(dirname, option) {\n        this.dirname = dirname;\n        this.option = option;\n        this.globals = {};\n    }\n    static create(gulp, dirname, option) {\n        let devtool = new Development(dirname, option);\n        gulp.task('build', (callback) => {\n            var options = minimist(process.argv.slice(2), {\n                string: 'env',\n                default: { env: process.env.NODE_ENV || 'development' }\n            });\n            return devtool.run(gulp, options);\n        });\n        gulp.task('default', () => {\n            gulp.start('build');\n        });\n        return devtool;\n    }\n    run(gulp, env) {\n        if (!env.root) {\n            env.root = this.dirname;\n        }\n        if (env.help) {\n            console.log(chalk.grey('... main help  ...'));\n            this.printHelp(env.help);\n        }\n        return this.loadTasks(gulp, this.option.tasks, env)\n            .then(tseq => {\n            console.log(chalk.grey('run sequenec tasks:'), tseq);\n            return this.runSequence(gulp, tseq);\n        })\n            .catch(err => {\n            console.error(err);\n        });\n    }\n    bindingConfig(cfg) {\n        cfg.globals = this.globals;\n        cfg.fileFilter = cfg.fileFilter || files;\n        cfg.runSequence = cfg.runSequence || runSequence;\n        cfg.dynamicTasks = cfg.dynamicTasks || ((tasks) => {\n            return dynamicTask(tasks, cfg.oper, cfg.env);\n        });\n        cfg.getDist = cfg.getDist || ((asserts) => {\n            asserts = asserts || cfg.option;\n            let dist;\n            switch (cfg.oper) {\n                case TaskConfig_1.Operation.build:\n                    dist = asserts.build || asserts.dist;\n                    break;\n                case TaskConfig_1.Operation.test:\n                    dist = asserts.test || asserts.build || asserts.dist;\n                    break;\n                case TaskConfig_1.Operation.e2e:\n                    dist = asserts.e2e || asserts.build || asserts.dist;\n                    break;\n                case TaskConfig_1.Operation.release:\n                    dist = asserts.release || asserts.dist;\n                    break;\n                case TaskConfig_1.Operation.deploy:\n                    dist = asserts.deploy || asserts.dist;\n                    break;\n                default:\n                    dist = '';\n                    break;\n            }\n            return dist;\n        });\n        return cfg;\n    }\n    runSequence(gulp, tasks) {\n        return runSequence(gulp, tasks);\n    }\n    toSquence(tasks, oper) {\n        let seq = [];\n        _.each(tasks, t => {\n            if (!t) {\n                return;\n            }\n            if (_.isString(t)) {\n                seq.push(t);\n            }\n            else if (_.isArray(t)) {\n                seq.push(_.flatten(this.toSquence(t, oper)));\n            }\n            else {\n                if (t.name) {\n                    if (t.oper && ((t.oper & oper) > 0)) {\n                        seq.push(t.name);\n                    }\n                }\n            }\n        });\n        return seq;\n    }\n    loadTasks(gulp, tasks, env) {\n        return Promise.all(_.map(_.isArray(tasks) ? tasks : [tasks], optask => {\n            optask.dist = optask.dist || 'dist';\n            let oper;\n            if (env.deploy) {\n                oper = TaskConfig_1.Operation.deploy;\n            }\n            else if (env.release) {\n                oper = TaskConfig_1.Operation.release;\n            }\n            else if (env.e2e) {\n                oper = TaskConfig_1.Operation.e2e;\n            }\n            else if (env.test) {\n                oper = TaskConfig_1.Operation.test;\n            }\n            else {\n                oper = TaskConfig_1.Operation.build;\n            }\n            console.log(chalk.grey('begin load task via loader:'), optask.loader);\n            let loader = this.createLoader(optask);\n            return loader.loadConfg(oper, env)\n                .then(cfg => {\n                console.log(chalk.green('task config loaded.'));\n                if (cfg.env.help) {\n                    if (cfg.printHelp) {\n                        console.log(chalk.grey('...development default help...'));\n                        cfg.printHelp(_.isString(cfg.env.help) ? cfg.env.help : '');\n                    }\n                    return [];\n                }\n                else {\n                    cfg = this.bindingConfig(cfg);\n                    return this.loadSubTask(gulp, cfg)\n                        .then(subtask => {\n                        return Promise.all([\n                            loader.load(cfg),\n                            this.loadAssertTasks(gulp, cfg)\n                        ])\n                            .then(tasks => {\n                            console.log(chalk.green('tasks loaded.'));\n                            return this.setup(gulp, cfg, tasks[0], tasks[1], subtask);\n                        });\n                    });\n                }\n            });\n        })).then(tsq => {\n            return _.flatten(tsq);\n        });\n    }\n    setup(gulp, config, tasks, assertsTask, subGroupTask) {\n        return Promise.all(_.map(tasks, t => {\n            return t(gulp, config);\n        }))\n            .then(ts => {\n            let tsqs = this.toSquence(ts, config.oper);\n            if (_.isFunction(config.option.runTasks)) {\n                return config.option.runTasks(config.oper, tsqs, subGroupTask, assertsTask);\n            }\n            else if (_.isArray(config.option.runTasks)) {\n                tsqs = config.option.runTasks;\n            }\n            else if (config.runTasks) {\n                return config.runTasks(subGroupTask, tsqs, assertsTask);\n            }\n            assertsTask && tsqs.splice(0, 0, assertsTask);\n            subGroupTask && tsqs.splice(0, 0, subGroupTask);\n            return tsqs;\n        });\n    }\n    loadSubTask(gulp, config) {\n        let optask = config.option;\n        if (optask.tasks) {\n            _.each(_.isArray(optask.tasks) ? optask.tasks : [optask.tasks], subopt => {\n                subopt.src = subopt.src || optask.src;\n                subopt.dist = subopt.dist || optask.dist;\n            });\n            return this.loadTasks(gulp, optask.tasks, config.env)\n                .then(subseq => {\n                if (subseq && subseq.length > 0) {\n                    let first = _.first(subseq);\n                    let last = _.last(subseq);\n                    let frn = _.isArray(first) ? _.first(first) : first;\n                    let lsn = _.isArray(last) ? _.last(last) : last;\n                    let subName = `${config.option.name ? config.option.name + '_' : ''}${frn}_${lsn}`;\n                    gulp.task(subName, () => {\n                        return runSequence(gulp, subseq);\n                    });\n                    return subName;\n                }\n                else {\n                    return null;\n                }\n            });\n        }\n        else {\n            return Promise.resolve(null);\n        }\n    }\n    loadAssertTasks(gulp, config) {\n        let optask = config.option;\n        if (optask.asserts) {\n            let tasks = [];\n            _.each(_.keys(optask.asserts), name => {\n                let op;\n                let aop = optask.asserts[name];\n                if (_.isString(aop) || _.isArray(aop)) {\n                    op = { src: aop, loader: [{ name: name, pipes: [] }, { name: `${name}-watch`, watch: [name] }] };\n                }\n                else {\n                    op = aop;\n                }\n                ;\n                if (_.isNull(op) || _.isUndefined(op)) {\n                    return;\n                }\n                op.name = name;\n                op.src = op.src || (optask.src + '/**/*.' + name);\n                op.dist = op.dist || optask.dist;\n                tasks.push(op);\n            });\n            return Promise.all(_.map(tasks, task => {\n                return this.loadTasks(gulp, task, config.env)\n                    .then(sq => {\n                    return {\n                        task: task,\n                        sq: sq\n                    };\n                });\n            }))\n                .then(tseq => {\n                return _.map(tseq, t => {\n                    let subseq = t.sq;\n                    if (subseq && subseq.length > 0) {\n                        if (subseq.length === 1) {\n                            return subseq[0];\n                        }\n                        gulp.task(t.task.name, () => {\n                            return runSequence(gulp, subseq);\n                        });\n                        return t.task.name;\n                    }\n                    return t.sq;\n                });\n            });\n        }\n        else {\n            return Promise.resolve(null);\n        }\n    }\n    createLoader(option) {\n        let loader = null;\n        if (!_.isFunction(this.option.loaderFactory)) {\n            let factory = new LoaderFactory_1.LoaderFactory();\n            this.option.loaderFactory = (opt) => {\n                return factory.create(opt);\n            };\n        }\n        loader = this.option.loaderFactory(option);\n        return loader;\n    }\n    printHelp(help) {\n        if (help === 'en') {\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--config name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env  development or production;\r\n                 *  --config app setting\r\n                 *  --root path, set relative path of the development tool root.\r\n                 *  --watch  watch src file change or not. if changed will auto update to node service. \r\n                 *  --release release web app or not. if [--env production], default to release. \r\n                 *  --test  need auto load test file to node service.\r\n                 *  --deploy run deploy tasks to deploy project.  \r\n                 *  --serve start node web service or not.\r\n                 *  --task taskname  spruce task taskname\r\n                 **/`);\n        }\n        else {\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--config name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env 发布环境 默认开发环境development;\r\n                 *  --config 设置配置文件;\r\n                 *  --root path, 设置编译环境相对路径\r\n                 *  --watch  是否需要动态监听文件变化\r\n                 *  --release 是否release编译, [--env production] 默认release \r\n                 *  --test  启动自动化测试\r\n                 *  --deploy 运行加载deploy tasks, 编译发布项目。  \r\n                 *  --serve  是否在开发模式下 开启node web服务\r\n                 *  --task taskname  运行单独任务taskname\r\n                 **/`);\n        }\n    }\n}\nexports.Development = Development;\nfunction runSequence(gulp, tasks) {\n    let ps = Promise.resolve();\n    if (tasks && tasks.length > 0) {\n        _.each(tasks, task => {\n            ps = ps.then(() => {\n                let taskErr = null, taskStop = null;\n                return new Promise((reslove, reject) => {\n                    let tskmap = {};\n                    _.each(_.isArray(task) ? task : [task], t => {\n                        tskmap[t] = false;\n                    });\n                    taskErr = (err) => {\n                        reject(err);\n                    };\n                    taskStop = (e) => {\n                        tskmap[e.task] = true;\n                        if (!_.some(_.values(tskmap), it => !it)) {\n                            reslove();\n                        }\n                    };\n                    gulp.on('task_stop', taskStop)\n                        .on('task_err', taskErr);\n                    gulp.start(task);\n                })\n                    .then(() => {\n                    if (gulp['removeListener']) {\n                        gulp['removeListener']('task_stop', taskStop);\n                        gulp['removeListener']('task_err', taskErr);\n                    }\n                })\n                    .catch(err => {\n                    if (gulp['removeListener']) {\n                        gulp['removeListener']('task_stop', taskStop);\n                        gulp['removeListener']('task_err', taskErr);\n                    }\n                    console.error(err);\n                });\n            });\n        });\n    }\n    return ps;\n}\nexports.runSequence = runSequence;\nfunction files(directory, express) {\n    let res = [];\n    express = express || ((fn) => true);\n    _.each(fs_1.readdirSync(directory), fname => {\n        let filePn = directory + '/' + fname;\n        var fst = fs_1.lstatSync(filePn);\n        if (!fst.isDirectory()) {\n            if (express(filePn)) {\n                res.push(filePn);\n            }\n        }\n        else {\n            res = res.concat(files(filePn, express));\n        }\n    });\n    return res;\n}\nexports.files = files;\nfunction createWatchTask(dt) {\n    return (gulp, cfg) => {\n        let watchs = _.isFunction(dt.watch) ? dt.watch(cfg) : dt.watch;\n        if (!_.isFunction(_.last(watchs))) {\n            watchs.push((event) => {\n                dt.watchChanged && dt.watchChanged(event, cfg);\n            });\n        }\n        gulp.task(dt.name, () => {\n            console.log('watch, src:', chalk.cyan.call(chalk, cfg.option.src));\n            gulp.watch(cfg.option.src, watchs);\n        });\n        return dt.name;\n    };\n}\nfunction createTask(dt) {\n    return (gulp, cfg) => {\n        gulp.task(dt.name, () => {\n            return createTaskWork(gulp, cfg, dt);\n        });\n        return dt.name;\n    };\n}\nfunction createTaskWork(gulp, cfg, dt) {\n    let src = Promise.resolve(gulp.src(cfg.option.src));\n    if (dt.pipes) {\n        let pipes = _.isFunction(dt.pipes) ? dt.pipes(cfg) : dt.pipes;\n        _.each(pipes, (p) => {\n            src = src.then(psrc => {\n                return Promise.resolve((_.isFunction(p) ? p(cfg) : p))\n                    .then(stram => {\n                    return psrc.pipe(stram);\n                });\n            });\n        });\n    }\n    else if (dt.pipe) {\n        src = src.then((src => {\n            return dt.pipe(src, cfg);\n        }));\n    }\n    src.then(stream => {\n        if (dt.output) {\n            let outputs = _.isFunction(dt.output) ? dt.output(cfg) : dt.output;\n            return Promise.all(_.map(outputs, output => {\n                return new Promise((resolve, reject) => {\n                    Promise.resolve((_.isFunction(output) ? output(stream, cfg, gulp) : output))\n                        .then(output => {\n                        stream.pipe(output)\n                            .once('end', resolve)\n                            .once('error', reject);\n                    }).catch(err => {\n                        reject(err);\n                    });\n                });\n            }));\n        }\n        else {\n            return new Promise((resolve, reject) => {\n                stream.pipe(gulp.dest(cfg.getDist(cfg.option)))\n                    .once('end', resolve)\n                    .once('error', reject);\n            });\n        }\n    });\n    return src.catch(err => {\n        console.log(chalk.red(err));\n    });\n}\nfunction dynamicTask(tasks, oper, env) {\n    let taskseq = [];\n    _.each(_.isArray(tasks) ? tasks : [tasks], dt => {\n        if (dt.oper && (dt.oper & oper) <= 0) {\n            return;\n        }\n        if (dt.watch) {\n            if (!env.watch) {\n                return;\n            }\n            console.log('register watch  dynamic task:', chalk.cyan(dt.name));\n            taskseq.push(createWatchTask(dt));\n        }\n        else if (_.isFunction(dt.task)) {\n            console.log('register custom dynamic task:', chalk.cyan(dt.name));\n            taskseq.push((gulp, cfg) => {\n                gulp.task(dt.name, () => {\n                    dt.task(cfg, gulp);\n                });\n                return dt.name;\n            });\n        }\n        else {\n            console.log('register pipes  dynamic task:', chalk.cyan(dt.name));\n            taskseq.push(createTask(dt));\n        }\n    });\n    return taskseq;\n}\nexports.dynamicTask = dynamicTask;\n","import * as _ from 'lodash';\r\nimport { Gulp, WatchEvent, TaskCallback } from 'gulp';\r\nimport { readdirSync, lstatSync } from 'fs';\r\nimport * as minimist from 'minimist';\r\nimport { ITaskLoader } from './ITaskLoader';\r\nimport { LoaderFactory } from './LoaderFactory';\r\nimport { Src, Asserts, Task, TaskOption, Operation, EnvOption, DynamicTask, TaskResult, Pipe, TaskConfig } from './TaskConfig';\r\nimport { DevelopConfig } from './DevelopConfig';\r\nimport * as chalk from 'chalk';\r\n\r\nexport * from './DevelopConfig';\r\nexport * from './TaskConfig';\r\nexport * from './ITaskLoader';\r\nexport * from './LoaderFactory';\r\nexport * from './loaders/BaseLoader';\r\n\r\nexport class Development {\r\n    /**\r\n     * global data.\r\n     * \r\n     * \r\n     * @private\r\n     * @type {*}\r\n     * @memberOf Development\r\n     */\r\n    private globals: any = {};\r\n    static create(gulp: Gulp, dirname: string, option?: DevelopConfig): Development {\r\n        let devtool = new Development(dirname, option);\r\n        gulp.task('build', (callback: TaskCallback) => {\r\n            var options: EnvOption = minimist(process.argv.slice(2), {\r\n                string: 'env',\r\n                default: { env: process.env.NODE_ENV || 'development' }\r\n            });\r\n            return devtool.run(gulp, options);\r\n        });\r\n\r\n        gulp.task('default', () => {\r\n            gulp.start('build');\r\n        });\r\n        return devtool;\r\n    }\r\n\r\n    private constructor(private dirname: string, protected option: DevelopConfig) {\r\n\r\n    }\r\n\r\n    run(gulp: Gulp, env: EnvOption): Promise<any> {\r\n        if (!env.root) {\r\n            env.root = this.dirname;\r\n        }\r\n\r\n        if (env.help) {\r\n            console.log(chalk.grey('... main help  ...'));\r\n            this.printHelp(env.help);\r\n        }\r\n\r\n        return this.loadTasks(gulp, this.option.tasks, env)\r\n            .then(tseq => {\r\n                console.log(chalk.grey('run sequenec tasks:'), tseq);\r\n                return this.runSequence(gulp, tseq);\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n            });\r\n    }\r\n\r\n    private bindingConfig(cfg: TaskConfig): TaskConfig {\r\n        cfg.globals = this.globals;\r\n        cfg.fileFilter = cfg.fileFilter || files;\r\n        cfg.runSequence = cfg.runSequence || runSequence;\r\n        cfg.dynamicTasks = cfg.dynamicTasks || ((tasks: DynamicTask | DynamicTask[]) => {\r\n            return dynamicTask(tasks, cfg.oper, cfg.env);\r\n        });\r\n        cfg.getDist = cfg.getDist || ((asserts?: Asserts) => {\r\n            asserts = asserts || cfg.option;\r\n            let dist: string;\r\n            switch (cfg.oper) {\r\n                case Operation.build:\r\n                    dist = asserts.build || asserts.dist;\r\n                    break;\r\n                case Operation.test:\r\n                    dist = asserts.test || asserts.build || asserts.dist;\r\n                    break;\r\n                case Operation.e2e:\r\n                    dist = asserts.e2e || asserts.build || asserts.dist;\r\n                    break;\r\n                case Operation.release:\r\n                    dist = asserts.release || asserts.dist;\r\n                    break;\r\n                case Operation.deploy:\r\n                    dist = asserts.deploy || asserts.dist;\r\n                    break;\r\n                default:\r\n                    dist = '';\r\n                    break;\r\n            }\r\n            return dist;\r\n        });\r\n\r\n        return cfg;\r\n    }\r\n\r\n    /**\r\n     * run task sequence.\r\n     * \r\n     * @protected\r\n     * @param {Gulp} gulp\r\n     * @param {Src[]} tasks\r\n     * @returns {Promise<any>}\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    runSequence(gulp: Gulp, tasks: Src[]): Promise<any> {\r\n        return runSequence(gulp, tasks);\r\n    }\r\n\r\n    protected toSquence(tasks: Array<TaskResult | TaskResult[] | void>, oper: Operation): Src[] {\r\n        let seq: Src[] = [];\r\n        _.each(tasks, t => {\r\n            if (!t) {\r\n                return;\r\n            }\r\n            if (_.isString(t)) {\r\n                seq.push(t);\r\n            } else if (_.isArray(t)) {\r\n                seq.push(_.flatten(this.toSquence(t, oper)));\r\n            } else {\r\n                if (t.name) {\r\n                    if (t.oper && ((t.oper & oper) > 0)) {\r\n                        seq.push(t.name);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return seq;\r\n    }\r\n\r\n    protected loadTasks(gulp: Gulp, tasks: Asserts | Asserts[], env: EnvOption): Promise<Src[]> {\r\n        return Promise.all<Src[]>(\r\n            _.map(_.isArray(tasks) ? <TaskOption[]>tasks : [<TaskOption>tasks], optask => {\r\n                optask.dist = optask.dist || 'dist';\r\n                let oper: Operation;\r\n                if (env.deploy) {\r\n                    oper = Operation.deploy;\r\n                } else if (env.release) {\r\n                    oper = Operation.release;\r\n                } else if (env.e2e) {\r\n                    oper = Operation.e2e;\r\n                } else if (env.test) {\r\n                    oper = Operation.test;\r\n                } else {\r\n                    oper = Operation.build;\r\n                }\r\n\r\n                console.log(chalk.grey('begin load task via loader:'), optask.loader);\r\n                let loader = this.createLoader(optask);\r\n\r\n                return loader.loadConfg(oper, env)\r\n                    .then(cfg => {\r\n                        console.log(chalk.green('task config loaded.'));\r\n                        if (cfg.env.help) {\r\n                            if (cfg.printHelp) {\r\n                                console.log(chalk.grey('...development default help...'));\r\n                                cfg.printHelp(_.isString(cfg.env.help) ? cfg.env.help : '');\r\n                            }\r\n                            return [];\r\n                        } else {\r\n                            cfg = this.bindingConfig(cfg);\r\n                            return this.loadSubTask(gulp, cfg)\r\n                                .then(subtask => {\r\n                                    return Promise.all([\r\n                                        loader.load(cfg),\r\n                                        this.loadAssertTasks(gulp, cfg)\r\n                                    ])\r\n                                        .then(tasks => {\r\n                                            console.log(chalk.green('tasks loaded.'));\r\n                                            return this.setup(gulp, cfg, tasks[0], tasks[1], subtask)\r\n                                        });\r\n                                });\r\n                        }\r\n                    });\r\n            })\r\n        ).then(tsq => {\r\n            return _.flatten(tsq);\r\n        });\r\n    }\r\n\r\n    protected setup(gulp: Gulp, config: TaskConfig, tasks: Task[], assertsTask: Src, subGroupTask: Src): Promise<Src[]> {\r\n        return Promise.all(_.map(tasks, t => {\r\n            return t(gulp, config);\r\n        }))\r\n            .then(ts => {\r\n                let tsqs: Src[] = this.toSquence(ts, config.oper);\r\n                if (_.isFunction(config.option.runTasks)) {\r\n                    return config.option.runTasks(config.oper, tsqs, subGroupTask, assertsTask);\r\n                } else if (_.isArray(config.option.runTasks)) {\r\n                    tsqs = config.option.runTasks;\r\n                } else if (config.runTasks) {\r\n                    return config.runTasks(subGroupTask, tsqs, assertsTask);\r\n                }\r\n\r\n                assertsTask && tsqs.splice(0, 0, assertsTask)\r\n                subGroupTask && tsqs.splice(0, 0, subGroupTask);\r\n\r\n                return tsqs;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * load sub tasks as group task.\r\n     * \r\n     * @protected\r\n     * @param {Gulp} gulp\r\n     * @param {TaskConfig} config\r\n     * @returns {Promise<Src>}\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    protected loadSubTask(gulp: Gulp, config: TaskConfig): Promise<Src> {\r\n        let optask = config.option;\r\n        if (optask.tasks) {\r\n            _.each(_.isArray(optask.tasks) ? optask.tasks : [optask.tasks], subopt => {\r\n                subopt.src = subopt.src || optask.src;\r\n                subopt.dist = subopt.dist || optask.dist;\r\n            });\r\n            return this.loadTasks(gulp, optask.tasks, config.env)\r\n                .then(subseq => {\r\n                    if (subseq && subseq.length > 0) {\r\n                        let first = _.first(subseq);\r\n                        let last = _.last(subseq);\r\n                        let frn = _.isArray(first) ? _.first(first) : first;\r\n                        let lsn = _.isArray(last) ? _.last(last) : last;\r\n                        let subName = `${config.option.name ? config.option.name + '_' : ''}${frn}_${lsn}`;\r\n                        gulp.task(subName, () => {\r\n                            return runSequence(gulp, subseq);\r\n                        })\r\n                        return subName;\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                });\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * load asserts tasks.\r\n     * \r\n     * @protected\r\n     * @param {Gulp} gulp\r\n     * @param {TaskConfig} config\r\n     * @returns {Promise<Src>}\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    protected loadAssertTasks(gulp: Gulp, config: TaskConfig): Promise<Src> {\r\n        let optask = config.option;\r\n        if (optask.asserts) {\r\n            let tasks: Asserts[] = [];\r\n            _.each(_.keys(optask.asserts), name => {\r\n                let op: Asserts;\r\n                let aop = optask.asserts[name];\r\n                if (_.isString(aop) || _.isArray(aop)) {\r\n                    op = <Asserts>{ src: aop, loader: [{ name: name, pipes: [] }, { name: `${name}-watch`, watch: [name] }] };\r\n                } else {\r\n                    op = aop;\r\n                };\r\n                if (_.isNull(op) || _.isUndefined(op)) {\r\n                    return;\r\n                }\r\n                op.name = name;\r\n                op.src = op.src || (optask.src + '/**/*.' + name);\r\n                op.dist = op.dist || optask.dist;\r\n                tasks.push(op);\r\n            });\r\n\r\n            return Promise.all(_.map(tasks, task => {\r\n                return this.loadTasks(gulp, task, config.env)\r\n                    .then(sq => {\r\n                        return {\r\n                            task: task,\r\n                            sq: sq\r\n                        }\r\n                    });\r\n            }))\r\n                .then(tseq => {\r\n                    // asserts tasks run mutil.\r\n                    return _.map(tseq, t => {\r\n                        let subseq = t.sq;\r\n                        if (subseq && subseq.length > 0) {\r\n                            if (subseq.length === 1) {\r\n                                return subseq[0];\r\n                            }\r\n                            gulp.task(t.task.name, () => {\r\n                                return runSequence(gulp, subseq);\r\n                            })\r\n                            return t.task.name;\r\n                        }\r\n                        return t.sq;\r\n                    });\r\n                });\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    protected createLoader(option: TaskOption): ITaskLoader {\r\n        let loader = null;\r\n        if (!_.isFunction(this.option.loaderFactory)) {\r\n            let factory = new LoaderFactory();\r\n            this.option.loaderFactory = (opt: TaskOption) => {\r\n                return factory.create(opt);\r\n            }\r\n        }\r\n        loader = this.option.loaderFactory(option);\r\n        return loader;\r\n    }\r\n\r\n\r\n    protected printHelp(help: boolean | string) {\r\n        if (help === 'en') {\r\n\r\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--config name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env  development or production;\r\n                 *  --config app setting\r\n                 *  --root path, set relative path of the development tool root.\r\n                 *  --watch  watch src file change or not. if changed will auto update to node service. \r\n                 *  --release release web app or not. if [--env production], default to release. \r\n                 *  --test  need auto load test file to node service.\r\n                 *  --deploy run deploy tasks to deploy project.  \r\n                 *  --serve start node web service or not.\r\n                 *  --task taskname  spruce task taskname\r\n                 **/`);\r\n\r\n        } else {\r\n\r\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--config name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env 发布环境 默认开发环境development;\r\n                 *  --config 设置配置文件;\r\n                 *  --root path, 设置编译环境相对路径\r\n                 *  --watch  是否需要动态监听文件变化\r\n                 *  --release 是否release编译, [--env production] 默认release \r\n                 *  --test  启动自动化测试\r\n                 *  --deploy 运行加载deploy tasks, 编译发布项目。  \r\n                 *  --serve  是否在开发模式下 开启node web服务\r\n                 *  --task taskname  运行单独任务taskname\r\n                 **/`);\r\n\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * run task sequence.\r\n * \r\n * @protected\r\n * @param {Gulp} gulp\r\n * @param {Src[]} tasks\r\n * @returns {Promise<any>}\r\n * \r\n * @memberOf Development\r\n */\r\nexport function runSequence(gulp: Gulp, tasks: Src[]): Promise<any> {\r\n    let ps = Promise.resolve();\r\n    if (tasks && tasks.length > 0) {\r\n        _.each(tasks, task => {\r\n            ps = ps.then(() => {\r\n                let taskErr = null, taskStop = null;\r\n                return new Promise((reslove, reject) => {\r\n                    let tskmap: any = {};\r\n                    _.each(_.isArray(task) ? task : [task], t => {\r\n                        tskmap[t] = false;\r\n                    });\r\n                    taskErr = (err) => {\r\n                        reject(err);\r\n                    };\r\n                    taskStop = (e: any) => {\r\n                        tskmap[e.task] = true;\r\n                        if (!_.some(_.values(tskmap), it => !it)) {\r\n                            reslove();\r\n                        }\r\n                    }\r\n                    gulp.on('task_stop', taskStop)\r\n                        .on('task_err', taskErr);\r\n                    gulp.start(task);\r\n                })\r\n                    .then(() => {\r\n                        if (gulp['removeListener']) {\r\n                            gulp['removeListener']('task_stop', taskStop);\r\n                            gulp['removeListener']('task_err', taskErr);\r\n                        }\r\n                    })\r\n                    .catch(err => {\r\n                        if (gulp['removeListener']) {\r\n                            gulp['removeListener']('task_stop', taskStop);\r\n                            gulp['removeListener']('task_err', taskErr);\r\n                        }\r\n                        console.error(err);\r\n                    });\r\n            });\r\n        });\r\n    }\r\n    return ps;\r\n}\r\n\r\n/**\r\n * filter fileName in directory.\r\n * \r\n * @export\r\n * @param {string} directory\r\n * @param {((fileName: string) => boolean)} [express]\r\n * @returns {string[]}\r\n */\r\nexport function files(directory: string, express?: ((fileName: string) => boolean)): string[] {\r\n    let res: string[] = [];\r\n    express = express || ((fn) => true);\r\n    _.each(readdirSync(directory), fname => {\r\n        let filePn = directory + '/' + fname;\r\n        var fst = lstatSync(filePn);\r\n        if (!fst.isDirectory()) {\r\n            if (express(filePn)) {\r\n                res.push(filePn)\r\n            }\r\n        } else {\r\n            res = res.concat(files(filePn, express))\r\n        }\r\n    });\r\n    return res;\r\n}\r\n\r\n/**\r\n * create dynamic watch task.\r\n * \r\n * @param {DynamicTask} dt\r\n * @returns\r\n */\r\nfunction createWatchTask(dt: DynamicTask) {\r\n    return (gulp: Gulp, cfg: TaskConfig) => {\r\n        let watchs = _.isFunction(dt.watch) ? dt.watch(cfg) : dt.watch;\r\n        if (!_.isFunction(_.last(watchs))) {\r\n            watchs.push(<WatchCallback>(event: WatchEvent) => {\r\n                dt.watchChanged && dt.watchChanged(event, cfg);\r\n            });\r\n        }\r\n        gulp.task(dt.name, () => {\r\n            console.log('watch, src:', chalk.cyan.call(chalk, cfg.option.src));\r\n            gulp.watch(cfg.option.src, watchs)\r\n        });\r\n\r\n        return dt.name;\r\n    };\r\n}\r\n\r\n/**\r\n * promise task.\r\n * \r\n * @param {DynamicTask} dt\r\n * @returns\r\n */\r\nfunction createTask(dt: DynamicTask) {\r\n    return (gulp: Gulp, cfg: TaskConfig) => {\r\n        gulp.task(dt.name, () => {\r\n            return createTaskWork(gulp, cfg, dt);\r\n        });\r\n        return dt.name;\r\n    };\r\n}\r\nfunction createTaskWork(gulp: Gulp, cfg: TaskConfig, dt: DynamicTask) {\r\n\r\n    let src = Promise.resolve(gulp.src(cfg.option.src));\r\n    // gulp.src(cfg.option.src)\r\n    // .once('error', () => {\r\n    //     process.exit(1);\r\n    // })\r\n    // .once('end', () => {\r\n    //     process.exit();\r\n    // }));\r\n\r\n    if (dt.pipes) {\r\n        let pipes = _.isFunction(dt.pipes) ? dt.pipes(cfg) : dt.pipes;\r\n        _.each(pipes, (p: Pipe) => {\r\n            src = src.then(psrc => {\r\n                return Promise.resolve((_.isFunction(p) ? p(cfg) : p))\r\n                    .then(stram => {\r\n                        return psrc.pipe(stram)\r\n                    });\r\n            });\r\n        })\r\n    } else if (dt.pipe) {\r\n        src = src.then((src => {\r\n            return dt.pipe(src, cfg);\r\n        }));\r\n    }\r\n    src.then(stream => {\r\n        if (dt.output) {\r\n            let outputs = _.isFunction(dt.output) ? dt.output(cfg) : dt.output;\r\n            return Promise.all(_.map(outputs, output => {\r\n                return new Promise((resolve, reject) => {\r\n                    Promise.resolve<NodeJS.ReadWriteStream>((_.isFunction(output) ? output(stream, cfg, gulp) : output))\r\n                        .then(output => {\r\n                            stream.pipe(output)\r\n                                .once('end', resolve)\r\n                                .once('error', reject);\r\n                        }).catch(err => {\r\n                            reject(err);\r\n                        })\r\n\r\n                });\r\n            }));\r\n        } else {\r\n            return new Promise((resolve, reject) => {\r\n                stream.pipe(gulp.dest(cfg.getDist(cfg.option)))\r\n                    .once('end', resolve)\r\n                    .once('error', reject);\r\n            });\r\n        }\r\n\r\n    });\r\n\r\n    return src.catch(err => {\r\n        console.log(chalk.red(err));\r\n    });\r\n}\r\n\r\n/**\r\n * dynamic build tasks.\r\n * \r\n * @export\r\n * @param {(DynamicTask | DynamicTask[])} tasks\r\n * @param {Operation} oper\r\n * @returns {Task[]}\r\n */\r\nexport function dynamicTask(tasks: DynamicTask | DynamicTask[], oper: Operation, env: EnvOption): Task[] {\r\n    let taskseq: Task[] = [];\r\n    _.each(_.isArray(tasks) ? tasks : [tasks], dt => {\r\n        if (dt.oper && (dt.oper & oper) <= 0) {\r\n            return;\r\n        }\r\n        if (dt.watch) {\r\n            if (!env.watch) {\r\n                return;\r\n            }\r\n            console.log('register watch  dynamic task:', chalk.cyan(dt.name));\r\n            taskseq.push(createWatchTask(dt));\r\n        } else if (_.isFunction(dt.task)) { // custom task\r\n            console.log('register custom dynamic task:', chalk.cyan(dt.name));\r\n            taskseq.push((gulp: Gulp, cfg: TaskConfig) => {\r\n                gulp.task(dt.name, () => {\r\n                    dt.task(cfg, gulp);\r\n                });\r\n\r\n                return dt.name;\r\n            });\r\n        } else {\r\n            console.log('register pipes  dynamic task:', chalk.cyan(dt.name));\r\n            // pipe stream task.\r\n            taskseq.push(createTask(dt));\r\n        }\r\n    });\r\n\r\n    return taskseq;\r\n}\r\n\r\n\r\n"]}