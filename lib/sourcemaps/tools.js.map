{"version":3,"sources":["tools.ts"],"names":[],"mappings":"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","file":"../tools.js","sourcesContent":["import * as _ from 'lodash';\r\nimport { Gulp, WatchEvent, TaskCallback } from 'gulp';\r\nimport { readdirSync, lstatSync } from 'fs';\r\nimport * as minimist from 'minimist';\r\nimport { ITaskLoader } from './ITaskLoader';\r\nimport { LoaderFactory } from './LoaderFactory';\r\nimport { Src, Asserts, Task, TaskOption, Operation, EnvOption, DynamicTask, TaskResult, Pipe, TaskConfig } from './TaskConfig';\r\nimport { DevelopConfig } from './DevelopConfig';\r\nimport * as chalk from 'chalk';\r\n\r\nexport * from './DevelopConfig';\r\nexport * from './TaskConfig';\r\nexport * from './ITaskLoader';\r\nexport * from './LoaderFactory';\r\nexport * from './loaders/BaseLoader';\r\n\r\nexport class Development {\r\n    /**\r\n     * global data.\r\n     * \r\n     * \r\n     * @private\r\n     * @type {*}\r\n     * @memberOf Development\r\n     */\r\n    private globals: any = {};\r\n    static create(gulp: Gulp, dirname: string, option?: DevelopConfig): Development {\r\n        let devtool = new Development(dirname, option);\r\n        gulp.task('build', (callback: TaskCallback) => {\r\n            var options: EnvOption = minimist(process.argv.slice(2), {\r\n                string: 'env',\r\n                default: { env: process.env.NODE_ENV || 'development' }\r\n            });\r\n            return devtool.run(gulp, options);\r\n        });\r\n\r\n        gulp.task('default', () => {\r\n            gulp.start('build');\r\n        });\r\n        return devtool;\r\n    }\r\n\r\n    private constructor(private dirname: string, protected option: DevelopConfig) {\r\n\r\n    }\r\n\r\n    run(gulp: Gulp, env: EnvOption): Promise<any> {\r\n        if (!env.root) {\r\n            env.root = this.dirname;\r\n        }\r\n\r\n        if (env.help) {\r\n            console.log(chalk.grey('... main help  ...'));\r\n            this.printHelp(env.help);\r\n        }\r\n\r\n        return this.loadTasks(gulp, this.option.tasks, env)\r\n            .then(tseq => {\r\n                console.log(chalk.grey('run sequenec tasks:'), tseq);\r\n                return this.runSequence(gulp, tseq);\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n            });\r\n    }\r\n\r\n    private bindingConfig(cfg: TaskConfig): TaskConfig {\r\n        cfg.globals = this.globals;\r\n        cfg.fileFilter = cfg.fileFilter || files;\r\n        cfg.runSequence = cfg.runSequence || runSequence;\r\n        cfg.dynamicTasks = cfg.dynamicTasks || ((tasks: DynamicTask | DynamicTask[]) => {\r\n            return dynamicTask(tasks, cfg.oper, cfg.env);\r\n        });\r\n        cfg.getDist = cfg.getDist || ((asserts?: Asserts) => {\r\n            asserts = asserts || cfg.option;\r\n            let dist: string;\r\n            switch (cfg.oper) {\r\n                case Operation.build:\r\n                    dist = asserts.build || asserts.dist;\r\n                    break;\r\n                case Operation.test:\r\n                    dist = asserts.test || asserts.build || asserts.dist;\r\n                    break;\r\n                case Operation.e2e:\r\n                    dist = asserts.e2e || asserts.build || asserts.dist;\r\n                    break;\r\n                case Operation.release:\r\n                    dist = asserts.release || asserts.dist;\r\n                    break;\r\n                case Operation.deploy:\r\n                    dist = asserts.deploy || asserts.dist;\r\n                    break;\r\n                default:\r\n                    dist = '';\r\n                    break;\r\n            }\r\n            return dist;\r\n        });\r\n\r\n        return cfg;\r\n    }\r\n\r\n    /**\r\n     * run task sequence.\r\n     * \r\n     * @protected\r\n     * @param {Gulp} gulp\r\n     * @param {Src[]} tasks\r\n     * @returns {Promise<any>}\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    runSequence(gulp: Gulp, tasks: Src[]): Promise<any> {\r\n        return runSequence(gulp, tasks);\r\n    }\r\n\r\n    protected toSquence(tasks: Array<TaskResult | TaskResult[] | void>, oper: Operation): Src[] {\r\n        let seq: Src[] = [];\r\n        _.each(tasks, t => {\r\n            if (!t) {\r\n                return;\r\n            }\r\n            if (_.isString(t)) {\r\n                seq.push(t);\r\n            } else if (_.isArray(t)) {\r\n                seq.push(_.flatten(this.toSquence(t, oper)));\r\n            } else {\r\n                if (t.name) {\r\n                    if (t.oper && ((t.oper & oper) > 0)) {\r\n                        seq.push(t.name);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return seq;\r\n    }\r\n\r\n    protected loadTasks(gulp: Gulp, tasks: Asserts | Asserts[], env: EnvOption): Promise<Src[]> {\r\n        return Promise.all<Src[]>(\r\n            _.map(_.isArray(tasks) ? <TaskOption[]>tasks : [<TaskOption>tasks], optask => {\r\n                optask.dist = optask.dist || 'dist';\r\n                let oper: Operation;\r\n                if (env.deploy) {\r\n                    oper = Operation.deploy;\r\n                } else if (env.release) {\r\n                    oper = Operation.release;\r\n                } else if (env.e2e) {\r\n                    oper = Operation.e2e;\r\n                } else if (env.test) {\r\n                    oper = Operation.test;\r\n                } else {\r\n                    oper = Operation.build;\r\n                }\r\n\r\n                console.log(chalk.grey('begin load task via loader:'), optask.loader);\r\n                let loader = this.createLoader(optask);\r\n\r\n                return loader.loadConfg(oper, env)\r\n                    .then(cfg => {\r\n                        console.log(chalk.green('task config loaded.'));\r\n                        if (cfg.env.help) {\r\n                            if (cfg.printHelp) {\r\n                                console.log(chalk.grey('...development default help...'));\r\n                                cfg.printHelp(_.isString(cfg.env.help) ? cfg.env.help : '');\r\n                            }\r\n                            return [];\r\n                        } else {\r\n                            cfg = this.bindingConfig(cfg);\r\n                            return this.loadSubTask(gulp, cfg)\r\n                                .then(subtask => {\r\n                                    return Promise.all([\r\n                                        loader.load(cfg),\r\n                                        this.loadAssertTasks(gulp, cfg)\r\n                                    ])\r\n                                        .then(tasks => {\r\n                                            console.log(chalk.green('tasks loaded.'));\r\n                                            return this.setup(gulp, cfg, tasks[0], tasks[1], subtask)\r\n                                        });\r\n                                });\r\n                        }\r\n                    });\r\n            })\r\n        ).then(tsq => {\r\n            return _.flatten(tsq);\r\n        });\r\n    }\r\n\r\n    protected setup(gulp: Gulp, config: TaskConfig, tasks: Task[], assertsTask: Src, subGroupTask: Src): Promise<Src[]> {\r\n        return Promise.all(_.map(tasks, t => {\r\n            return t(gulp, config);\r\n        }))\r\n            .then(ts => {\r\n                let tsqs: Src[] = this.toSquence(ts, config.oper);\r\n                if (_.isFunction(config.option.runTasks)) {\r\n                    return config.option.runTasks(config.oper, tsqs, subGroupTask, assertsTask);\r\n                } else if (_.isArray(config.option.runTasks)) {\r\n                    tsqs = config.option.runTasks;\r\n                } else if (config.runTasks) {\r\n                    return config.runTasks(subGroupTask, tsqs, assertsTask);\r\n                }\r\n\r\n                assertsTask && tsqs.splice(0, 0, assertsTask)\r\n                subGroupTask && tsqs.splice(0, 0, subGroupTask);\r\n\r\n                return tsqs;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * load sub tasks as group task.\r\n     * \r\n     * @protected\r\n     * @param {Gulp} gulp\r\n     * @param {TaskConfig} config\r\n     * @returns {Promise<Src>}\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    protected loadSubTask(gulp: Gulp, config: TaskConfig): Promise<Src> {\r\n        let optask = config.option;\r\n        if (optask.tasks) {\r\n            _.each(_.isArray(optask.tasks) ? optask.tasks : [optask.tasks], subopt => {\r\n                subopt.src = subopt.src || optask.src;\r\n                subopt.dist = subopt.dist || optask.dist;\r\n            });\r\n            return this.loadTasks(gulp, optask.tasks, config.env)\r\n                .then(subseq => {\r\n                    if (subseq && subseq.length > 0) {\r\n                        let first = _.first(subseq);\r\n                        let last = _.last(subseq);\r\n                        let frn = _.isArray(first) ? _.first(first) : first;\r\n                        let lsn = _.isArray(last) ? _.last(last) : last;\r\n                        let subName = `${config.option.name ? config.option.name + '_' : ''}${frn}_${lsn}`;\r\n                        gulp.task(subName, () => {\r\n                            return runSequence(gulp, subseq);\r\n                        })\r\n                        return subName;\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                });\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * load asserts tasks.\r\n     * \r\n     * @protected\r\n     * @param {Gulp} gulp\r\n     * @param {TaskConfig} config\r\n     * @returns {Promise<Src>}\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    protected loadAssertTasks(gulp: Gulp, config: TaskConfig): Promise<Src> {\r\n        let optask = config.option;\r\n        if (optask.asserts) {\r\n            let tasks: Asserts[] = [];\r\n            _.each(_.keys(optask.asserts), name => {\r\n                let op: Asserts;\r\n                let aop = optask.asserts[name];\r\n                if (_.isString(aop) || _.isArray(aop)) {\r\n                    op = <Asserts>{ src: aop, loader: [{ name: name, pipes: [] }, { name: `${name}-watch`, watch: [name] }] };\r\n                } else {\r\n                    op = aop;\r\n                };\r\n                if (_.isNull(op) || _.isUndefined(op)) {\r\n                    return;\r\n                }\r\n                op.name = name;\r\n                op.src = op.src || (optask.src + '/**/*.' + name);\r\n                op.dist = op.dist || optask.dist;\r\n                tasks.push(op);\r\n            });\r\n\r\n            return Promise.all(_.map(tasks, task => {\r\n                return this.loadTasks(gulp, task, config.env)\r\n                    .then(sq => {\r\n                        return {\r\n                            task: task,\r\n                            sq: sq\r\n                        }\r\n                    });\r\n            }))\r\n                .then(tseq => {\r\n                    // asserts tasks run mutil.\r\n                    return _.map(tseq, t => {\r\n                        let subseq = t.sq;\r\n                        if (subseq && subseq.length > 0) {\r\n                            if (subseq.length === 1) {\r\n                                return subseq[0];\r\n                            }\r\n                            gulp.task(t.task.name, () => {\r\n                                return runSequence(gulp, subseq);\r\n                            })\r\n                            return t.task.name;\r\n                        }\r\n                        return t.sq;\r\n                    });\r\n                });\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    protected createLoader(option: TaskOption): ITaskLoader {\r\n        let loader = null;\r\n        if (!_.isFunction(this.option.loaderFactory)) {\r\n            let factory = new LoaderFactory();\r\n            this.option.loaderFactory = (opt: TaskOption) => {\r\n                return factory.create(opt);\r\n            }\r\n        }\r\n        loader = this.option.loaderFactory(option);\r\n        return loader;\r\n    }\r\n\r\n\r\n    protected printHelp(help: boolean | string) {\r\n        if (help === 'en') {\r\n\r\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--config name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env  development or production;\r\n                 *  --config app setting\r\n                 *  --root path, set relative path of the development tool root.\r\n                 *  --watch  watch src file change or not. if changed will auto update to node service. \r\n                 *  --release release web app or not. if [--env production], default to release. \r\n                 *  --test  need auto load test file to node service.\r\n                 *  --deploy run deploy tasks to deploy project.  \r\n                 *  --serve start node web service or not.\r\n                 *  --task taskname  spruce task taskname\r\n                 **/`);\r\n\r\n        } else {\r\n\r\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--config name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env 发布环境 默认开发环境development;\r\n                 *  --config 设置配置文件;\r\n                 *  --root path, 设置编译环境相对路径\r\n                 *  --watch  是否需要动态监听文件变化\r\n                 *  --release 是否release编译, [--env production] 默认release \r\n                 *  --test  启动自动化测试\r\n                 *  --deploy 运行加载deploy tasks, 编译发布项目。  \r\n                 *  --serve  是否在开发模式下 开启node web服务\r\n                 *  --task taskname  运行单独任务taskname\r\n                 **/`);\r\n\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * run task sequence.\r\n * \r\n * @protected\r\n * @param {Gulp} gulp\r\n * @param {Src[]} tasks\r\n * @returns {Promise<any>}\r\n * \r\n * @memberOf Development\r\n */\r\nexport function runSequence(gulp: Gulp, tasks: Src[]): Promise<any> {\r\n    let ps = Promise.resolve();\r\n    if (tasks && tasks.length > 0) {\r\n        _.each(tasks, task => {\r\n            ps = ps.then(() => {\r\n                let taskErr = null, taskStop = null;\r\n                return new Promise((reslove, reject) => {\r\n                    let tskmap: any = {};\r\n                    _.each(_.isArray(task) ? task : [task], t => {\r\n                        tskmap[t] = false;\r\n                    });\r\n                    taskErr = (err) => {\r\n                        reject(err);\r\n                    };\r\n                    taskStop = (e: any) => {\r\n                        tskmap[e.task] = true;\r\n                        if (!_.some(_.values(tskmap), it => !it)) {\r\n                            reslove();\r\n                        }\r\n                    }\r\n                    gulp.on('task_stop', taskStop)\r\n                        .on('task_err', taskErr);\r\n                    gulp.start(task);\r\n                })\r\n                    .then(() => {\r\n                        if (gulp['removeListener']) {\r\n                            gulp['removeListener']('task_stop', taskStop);\r\n                            gulp['removeListener']('task_err', taskErr);\r\n                        }\r\n                    })\r\n                    .catch(err => {\r\n                        if (gulp['removeListener']) {\r\n                            gulp['removeListener']('task_stop', taskStop);\r\n                            gulp['removeListener']('task_err', taskErr);\r\n                        }\r\n                        console.error(err);\r\n                    });\r\n            });\r\n        });\r\n    }\r\n    return ps;\r\n}\r\n\r\n/**\r\n * filter fileName in directory.\r\n * \r\n * @export\r\n * @param {string} directory\r\n * @param {((fileName: string) => boolean)} [express]\r\n * @returns {string[]}\r\n */\r\nexport function files(directory: string, express?: ((fileName: string) => boolean)): string[] {\r\n    let res: string[] = [];\r\n    express = express || ((fn) => true);\r\n    _.each(readdirSync(directory), fname => {\r\n        let filePn = directory + '/' + fname;\r\n        var fst = lstatSync(filePn);\r\n        if (!fst.isDirectory()) {\r\n            if (express(filePn)) {\r\n                res.push(filePn)\r\n            }\r\n        } else {\r\n            res = res.concat(files(filePn, express))\r\n        }\r\n    });\r\n    return res;\r\n}\r\n\r\n/**\r\n * create dynamic watch task.\r\n * \r\n * @param {DynamicTask} dt\r\n * @returns\r\n */\r\nfunction createWatchTask(dt: DynamicTask) {\r\n    return (gulp: Gulp, cfg: TaskConfig) => {\r\n        let watchs = _.isFunction(dt.watch) ? dt.watch(cfg) : dt.watch;\r\n        if (!_.isFunction(_.last(watchs))) {\r\n            watchs.push(<WatchCallback>(event: WatchEvent) => {\r\n                dt.watchChanged && dt.watchChanged(event, cfg);\r\n            });\r\n        }\r\n        gulp.task(dt.name, () => {\r\n            console.log('watch, src:', chalk.cyan.call(chalk, cfg.option.src));\r\n            gulp.watch(cfg.option.src, watchs)\r\n        });\r\n\r\n        return dt.name;\r\n    };\r\n}\r\n\r\n/**\r\n * promise task.\r\n * \r\n * @param {DynamicTask} dt\r\n * @returns\r\n */\r\nfunction createTask(dt: DynamicTask) {\r\n    return (gulp: Gulp, cfg: TaskConfig) => {\r\n        gulp.task(dt.name, () => {\r\n            return createTaskWork(gulp, cfg, dt);\r\n        });\r\n        return dt.name;\r\n    };\r\n}\r\nfunction createTaskWork(gulp: Gulp, cfg: TaskConfig, dt: DynamicTask) {\r\n\r\n    let src = Promise.resolve(gulp.src(cfg.option.src));\r\n    // gulp.src(cfg.option.src)\r\n    // .once('error', () => {\r\n    //     process.exit(1);\r\n    // })\r\n    // .once('end', () => {\r\n    //     process.exit();\r\n    // }));\r\n\r\n    if (dt.pipes) {\r\n        let pipes = _.isFunction(dt.pipes) ? dt.pipes(cfg) : dt.pipes;\r\n        _.each(pipes, (p: Pipe) => {\r\n            src = src.then(psrc => {\r\n                return Promise.resolve((_.isFunction(p) ? p(cfg) : p))\r\n                    .then(stram => {\r\n                        return psrc.pipe(stram)\r\n                    });\r\n            });\r\n        })\r\n    } else if (dt.pipe) {\r\n        src = src.then((src => {\r\n            return dt.pipe(src, cfg);\r\n        }));\r\n    }\r\n    src.then(stream => {\r\n        if (dt.output) {\r\n            let outputs = _.isFunction(dt.output) ? dt.output(cfg) : dt.output;\r\n            return Promise.all(_.map(outputs, output => {\r\n                return new Promise((resolve, reject) => {\r\n                    Promise.resolve<NodeJS.ReadWriteStream>((_.isFunction(output) ? output(stream, cfg, gulp) : output))\r\n                        .then(output => {\r\n                            stream.pipe(output)\r\n                                .once('end', resolve)\r\n                                .once('error', reject);\r\n                        }).catch(err => {\r\n                            reject(err);\r\n                        })\r\n\r\n                });\r\n            }));\r\n        } else {\r\n            return new Promise((resolve, reject) => {\r\n                stream.pipe(gulp.dest(cfg.getDist(cfg.option)))\r\n                    .once('end', resolve)\r\n                    .once('error', reject);\r\n            });\r\n        }\r\n\r\n    });\r\n\r\n    return src.catch(err => {\r\n        console.log(chalk.red(err));\r\n    });\r\n}\r\n\r\n/**\r\n * dynamic build tasks.\r\n * \r\n * @export\r\n * @param {(DynamicTask | DynamicTask[])} tasks\r\n * @param {Operation} oper\r\n * @returns {Task[]}\r\n */\r\nexport function dynamicTask(tasks: DynamicTask | DynamicTask[], oper: Operation, env: EnvOption): Task[] {\r\n    let taskseq: Task[] = [];\r\n    _.each(_.isArray(tasks) ? tasks : [tasks], dt => {\r\n        if (dt.oper && (dt.oper & oper) <= 0) {\r\n            return;\r\n        }\r\n        if (dt.watch) {\r\n            if (!env.watch) {\r\n                return;\r\n            }\r\n            console.log('register watch  dynamic task:', chalk.cyan(dt.name));\r\n            taskseq.push(createWatchTask(dt));\r\n        } else if (_.isFunction(dt.task)) { // custom task\r\n            console.log('register custom dynamic task:', chalk.cyan(dt.name));\r\n            taskseq.push((gulp: Gulp, cfg: TaskConfig) => {\r\n                gulp.task(dt.name, () => {\r\n                    dt.task(cfg, gulp);\r\n                });\r\n\r\n                return dt.name;\r\n            });\r\n        } else {\r\n            console.log('register pipes  dynamic task:', chalk.cyan(dt.name));\r\n            // pipe stream task.\r\n            taskseq.push(createTask(dt));\r\n        }\r\n    });\r\n\r\n    return taskseq;\r\n}\r\n\r\n\r\n"]}