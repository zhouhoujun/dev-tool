{"version":3,"sources":["Development.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,0BAA4B;AAE5B,qDAA0G;AAG1G,qCAAoC;AAOpC;;;;;;GAMG;AACH;IAAiC,+BAAO;IAiCpC;;;;;;OAMG;IACH,qBAAmB,MAAmB,EAAU,IAAa;QAA7D,YACI,kBAAM,MAAM,CAAC,SAMhB;QAP+C,UAAI,GAAJ,IAAI,CAAS;QAGzD,KAAI,CAAC,SAAS,CAAC;YACX,GAAG,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE;YACnB,SAAS,EAAE,KAAI,CAAC,GAAG,CAAC,SAAS,IAAI,KAAI,CAAC,SAAS;SAClD,CAAC,CAAC;;IACP,CAAC;IA7CD;;;;;;;;;;;OAWG;IACI,kBAAM,GAAb,UAAc,IAAU,EAAE,IAAY,EAAE,OAA8E,EAAE,IAAS,EAAE,MAAwB;QAAnC,qBAAA,EAAA,SAAS;QAAE,uBAAA,EAAA,SAAS,yBAAM,CAAC,QAAQ;QACvJ,IAAI,MAAmB,CAAC;QACxB,IAAI,MAAmB,CAAC;QACxB,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACrB,MAAM,GAAG,EAAE,MAAM,EAAe,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC;QACjG,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,GAAG,OAAO,CAAC;YACjB,MAAM,GAAG,MAAM,CAAC,MAAqB,CAAC;YACtC,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC;YAClC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;YAC3B,CAAC;QACL,CAAC;QAED,IAAI,OAAO,GAAG,IAAI,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAC5C,OAAO,CAAC,KAAK,EAAE,CAAC;QAChB,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IAkBD,iCAAW,GAAX;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,iBAAM,WAAW,WAAE,CAAC;IAC5C,CAAC;IAES,+BAAS,GAAnB,UAAoB,IAAY;QAC5B,EAAE,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;YAEhB,OAAO,CAAC,GAAG,CAAC,k2BAaH,CAAC,CAAC;QAEf,CAAC;QAAC,IAAI,CAAC,CAAC;YAEJ,OAAO,CAAC,GAAG,CAAC,ojCAaH,CAAC,CAAC;QAEf,CAAC;IACL,CAAC;IACL,kBAAC;AAAD,CA1FA,AA0FC,CA1FgC,iBAAO,GA0FvC;AA1FY,kCAAW","file":"../Development.js","sourcesContent":["import * as _ from 'lodash';\r\nimport { Gulp } from 'gulp';\r\nimport { Operation, ITaskConfig, Src, IAssertOption, IDynamicTaskOption, RunWay } from 'development-core';\r\nimport { TaskOption, ITaskOption } from './TaskOption';\r\nimport { IContext } from './IContext';\r\nimport { Context } from './Context';\r\n\r\ninterface TaskSeq {\r\n    opt: ITaskOption,\r\n    seq: Src[]\r\n}\r\n\r\n/**\r\n * Development.\r\n *\r\n * @export\r\n * @class Development\r\n * @extends {Context}\r\n */\r\nexport class Development extends Context {\r\n\r\n    /**\r\n     * create development tool.\r\n     *\r\n     * @static\r\n     * @param {Gulp} gulp\r\n     * @param {string} root  root path.\r\n     * @param {(ITaskConfig | Array<IAssertOption | ITaskOption | IDynamicTaskOption>)} setting\r\n     * @param {any} [runWay=RunWay.sequence]\r\n     * @returns {Development}\r\n     *\r\n     * @memberOf Development\r\n     */\r\n    static create(gulp: Gulp, root: string, setting: ITaskConfig | Array<IAssertOption | ITaskOption | IDynamicTaskOption>, name = '', runWay = RunWay.sequence): Development {\r\n        let config: ITaskConfig;\r\n        let option: ITaskOption;\r\n        if (_.isArray(setting)) {\r\n            config = { option: <ITaskOption>{ name: name, tasks: setting, runWay: runWay, loader: [] } };\r\n        } else {\r\n            config = setting;\r\n            option = config.option as ITaskOption;\r\n            option.name = option.name || name;\r\n            if (!_.isUndefined(option.runWay)) {\r\n                option.runWay = runWay;\r\n            }\r\n        }\r\n\r\n        let devtool = new Development(config, root);\r\n        devtool.start();\r\n        return devtool;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of Development.\r\n     * @param {ITaskConfig} config\r\n     * @param {string} root root path.\r\n     * @param {IContext} [parent]\r\n     * @memberof Development\r\n     */\r\n    public constructor(config: ITaskConfig, private root?: string) {\r\n        super(config);\r\n\r\n        this.setConfig({\r\n            env: { root: root },\r\n            printHelp: this.cfg.printHelp || this.printHelp\r\n        });\r\n    }\r\n\r\n    getRootPath() {\r\n        return this.root || super.getRootPath();\r\n    }\r\n\r\n    protected printHelp(help: string) {\r\n        if (help === 'en') {\r\n\r\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--context name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env  development or production;\r\n                 *  --context app setting\r\n                 *  --root path, set relative path of the development tool root.\r\n                 *  --watch  watch src file change or not. if changed will auto update to node service.\r\n                 *  --release release web app or not. if [--env production], default to release.\r\n                 *  --test  need auto load test file to node service.\r\n                 *  --deploy run deploy tasks to deploy project.\r\n                 *  --serve start node web service or not.\r\n                 *  --task taskname  spruce task taskname\r\n                 **/`);\r\n\r\n        } else {\r\n\r\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--context name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env 发布环境 默认开发环境development;\r\n                 *  --context 设置配置文件;\r\n                 *  --root path, 设置编译环境相对路径\r\n                 *  --watch  是否需要动态监听文件变化\r\n                 *  --release 是否release编译, [--env production] 默认release\r\n                 *  --test  启动自动化测试\r\n                 *  --deploy 运行加载deploy tasks, 编译发布项目。\r\n                 *  --serve  是否在开发模式下 开启node web服务\r\n                 *  --task taskname  运行单独任务taskname\r\n                 **/`);\r\n\r\n        }\r\n    }\r\n}\r\n"]}