{"version":3,"sources":["Development.js","Development.ts"],"names":["_","require","minimist","LoaderFactory_1","development_core_1","Context_1","chalk","Development","dirname","config","_classCallCheck","this","gulp","env","_this","setupTasks","then","tseq","gbctx","getContext","runWay","RunWay","parallel","runSequence","flattenSequence","catch","err","console","error","process","exit","_this2","seq","task","split","root","help","log","grey","printHelp","loadTasks","tasks","globalctx","option","contextFactory","parent","_this3","Promise","all","map","isArray","optask","dist","loader","createLoader","loadContext","ctx","green","isString","load","loadAssertTasks","loadSubTask","tks","setup","tsq","rst","each","t","tk","zipSequence","push","assertsTask","subGroupTask","resolve","toSequence","tsqs","runTasks","addToSequence","_this4","_ret","subopt","name","subTaskName","src","v","subseq","taskname","subTaskRunWay","runway","sequence","order","subTaskOrder","taskName","_typeof","_this5","asserts","_ret2","keys","op","sr","pipes","watch","isNumber","oper","isFunction","length","first","isNull","isUndefined","getSrc","Operation","build","getDist","sq","assertSeq","assertsRunWay","assertsOrder","_this6","loaderFactory","factory","LoaderFactory","create","cfg","p","setting","arguments","undefined","Context","add","devtool","setupTask","callback","options","argv","slice","string","default","NODE_ENV","run","startTask","start","exports"],"mappings":"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","file":"../Development.js","sourcesContent":["\"use strict\";\nconst _ = require('lodash');\nconst minimist = require('minimist');\nconst LoaderFactory_1 = require('./LoaderFactory');\nconst development_core_1 = require('development-core');\nconst Context_1 = require('./Context');\nconst chalk = require('chalk');\nclass Development {\n    /**\n     * Creates an instance of Development.\n     *\n     * @param {string} dirname\n     * @param {DevelopConfig} config\n     *\n     * @memberOf Development\n     */\n    constructor(dirname, config) {\n        this.dirname = dirname;\n        this.config = config;\n    }\n    /**\n     * create development tool.\n     *\n     * @static\n     * @param {Gulp} gulp\n     * @param {string} dirname\n     * @param {(DevelopConfig | Array<ITaskOption | IAssertOption | IDynamicTaskOption>)} setting\n     * @param {any} [runWay=RunWay.sequence]\n     * @returns {Development}\n     *\n     * @memberOf Development\n     */\n    static create(gulp, dirname, setting, runWay = development_core_1.RunWay.sequence, factory) {\n        let option = _.isArray(setting) ? { tasks: setting, runWay: runWay } : setting;\n        if (!_.isUndefined(option.runWay)) {\n            option.runWay = runWay;\n        }\n        option.contextFactory = factory || ((cfg, parent) => {\n            let ctx = new Context_1.Context(cfg, parent);\n            if (parent && parent['add']) {\n                parent.add(ctx);\n            }\n            return ctx;\n        });\n        let devtool = new Development(dirname, option);\n        option.setupTask = option.setupTask || 'build';\n        gulp.task(option.setupTask, (callback) => {\n            var options = minimist(process.argv.slice(2), {\n                string: 'env',\n                default: { env: process.env.NODE_ENV || 'development' }\n            });\n            return devtool.run(gulp, options);\n        });\n        option.startTask = option.startTask || 'start';\n        gulp.task(option.startTask, (callback) => {\n            var options = minimist(process.argv.slice(2), {\n                string: 'env',\n                default: { env: process.env.NODE_ENV || 'development' }\n            });\n            return devtool.startTask(gulp, options);\n        });\n        gulp.task('default', () => {\n            gulp.start(option.setupTask);\n        });\n        return devtool;\n    }\n    /**\n     * run task.\n     *\n     * @param {Gulp} gulp\n     * @param {IEnvOption} env\n     * @returns {Promise<any>}\n     *\n     * @memberOf Development\n     */\n    run(gulp, env) {\n        return this.setupTasks(gulp, env)\n            .then(tseq => {\n            // console.log(chalk.grey('run sequenec tasks:'), tseq);\n            let gbctx = this.getContext(env);\n            if (this.config.runWay === development_core_1.RunWay.parallel) {\n                return development_core_1.runSequence(gulp, [development_core_1.flattenSequence(gulp, tseq, gbctx)]);\n            }\n            else {\n                return development_core_1.runSequence(gulp, tseq);\n            }\n        })\n            .catch(err => {\n            console.error(err);\n            process.exit(1);\n        });\n    }\n    startTask(gulp, env) {\n        return this.setupTasks(gulp, env)\n            .then((seq) => {\n            let tseq = env.task ? env.task.split(',') : seq;\n            let gbctx = this.getContext(env);\n            if (this.config.runWay === development_core_1.RunWay.parallel) {\n                return development_core_1.runSequence(gulp, [development_core_1.flattenSequence(gulp, tseq, gbctx)]);\n            }\n            else {\n                return development_core_1.runSequence(gulp, tseq);\n            }\n        });\n    }\n    setupTasks(gulp, env) {\n        if (!env.root) {\n            env.root = this.dirname;\n        }\n        if (env.help) {\n            console.log(chalk.grey('... main help  ...'));\n            this.printHelp(env.help);\n        }\n        let gbctx = this.getContext(env);\n        return this.loadTasks(gulp, this.config.tasks, gbctx)\n            .catch(err => {\n            console.error(err);\n            process.exit(1);\n        });\n    }\n    getContext(env) {\n        if (!this.globalctx || this.globalctx.env !== env) {\n            let option = this.config.option || {};\n            this.globalctx = this.config.contextFactory({\n                env: env,\n                option: option\n            });\n        }\n        return this.globalctx;\n    }\n    loadTasks(gulp, tasks, parent) {\n        return Promise.all(_.map(_.isArray(tasks) ? tasks : [tasks], optask => {\n            optask.dist = optask.dist || 'dist';\n            // console.log(chalk.grey('begin load task via loader:'), optask.loader);\n            let loader = this.createLoader(optask, parent);\n            return loader.loadContext(parent.env)\n                .then(ctx => {\n                console.log(chalk.green('task context loaded.'));\n                if (ctx.env.help) {\n                    if (ctx.printHelp) {\n                        console.log(chalk.grey('...development default help...'));\n                        ctx.printHelp(_.isString(ctx.env.help) ? ctx.env.help : '');\n                    }\n                    return [];\n                }\n                else {\n                    return Promise.all([\n                        loader.load(ctx),\n                        this.loadAssertTasks(gulp, ctx),\n                        this.loadSubTask(gulp, ctx)\n                    ])\n                        .then(tks => {\n                        console.log(chalk.green('tasks loaded.'));\n                        return this.setup(gulp, ctx, tks[0], tks[1], tks[2]);\n                    });\n                }\n            });\n        }))\n            .then(tsq => {\n            let rst = [];\n            _.each(tsq, t => {\n                let tk = development_core_1.zipSequence(gulp, t, parent);\n                if (tk) {\n                    rst.push(tk);\n                }\n            });\n            return rst;\n        });\n    }\n    setup(gulp, ctx, tasks, assertsTask, subGroupTask) {\n        return Promise.resolve(development_core_1.toSequence(gulp, tasks, ctx))\n            .then(tsqs => {\n            // if (_.isFunction(context.option['runTasks'])) {\n            //     return context.option['runTasks'](context.oper, tsqs, subGroupTask, assertsTask);\n            // } else if (_.isArray(context.option['runTasks'])) {\n            //     tsqs = context.option['runTasks'];\n            // } else \n            if (ctx.runTasks) {\n                return ctx.runTasks(tsqs, assertsTask, subGroupTask);\n            }\n            // console.log(assertsTask);\n            ctx.addToSequence(tsqs, assertsTask);\n            ctx.addToSequence(tsqs, subGroupTask);\n            return tsqs;\n        });\n    }\n    /**\n     * load sub tasks as group task.\n     *\n     * @protected\n     * @param {Gulp} gulp\n     * @param {IContext} ctx\n     * @returns {Promise<ITaskInfo>}\n     *\n     * @memberOf Development\n     */\n    loadSubTask(gulp, ctx) {\n        if (ctx.option['tasks']) {\n            let optask = ctx.option;\n            _.each(_.isArray(optask.tasks) ? optask.tasks : [optask.tasks], subopt => {\n                subopt.name = ctx.subTaskName(subopt.name);\n                subopt.src = subopt.src || optask.src;\n                subopt.dist = subopt.dist || optask.dist;\n            });\n            return this.loadTasks(gulp, optask.tasks, ctx)\n                .then(subseq => {\n                let taskname;\n                if (optask.subTaskRunWay === development_core_1.RunWay.parallel) {\n                    taskname = [development_core_1.flattenSequence(gulp, subseq, ctx, (name, runway) => ctx.subTaskName(name, (runway === development_core_1.RunWay.sequence ? '-subs' : '-subp')))];\n                }\n                else {\n                    taskname = development_core_1.zipSequence(gulp, subseq, ctx, (name, runway) => ctx.subTaskName(name, (runway === development_core_1.RunWay.sequence ? '-subs' : '-subp')));\n                }\n                if (taskname) {\n                    return {\n                        order: optask.subTaskOrder,\n                        taskName: taskname\n                    };\n                }\n                else {\n                    return null;\n                }\n            });\n        }\n        else {\n            return Promise.resolve(null);\n        }\n    }\n    /**\n     * load asserts tasks.\n     *\n     * @protected\n     * @param {Gulp} gulp\n     * @param {ITaskContext} ctx\n     * @returns {Promise<Src>}\n     *\n     * @memberOf Development\n     */\n    loadAssertTasks(gulp, ctx) {\n        let optask = ctx.option;\n        if (optask.asserts) {\n            let tasks = [];\n            _.each(_.keys(optask.asserts), name => {\n                let op;\n                let sr = optask.asserts[name];\n                if (_.isString(sr)) {\n                    op = { src: sr, loader: [{ name: name, pipes: [], watch: true }] };\n                }\n                else if (_.isNumber(sr)) {\n                    // watch with Operation.autoWatch.\n                    op = { loader: [{ oper: sr, name: name, pipes: [] }] };\n                }\n                else if (_.isFunction(sr)) {\n                    op = { loader: sr };\n                }\n                else if (_.isArray(sr)) {\n                    if (sr.length > 0) {\n                        if (_.isString(_.first(sr))) {\n                            op = { src: sr, loader: [{ name: name, pipes: [], watch: true }] };\n                        }\n                        else {\n                            op = { loader: sr, watch: true };\n                        }\n                    }\n                }\n                else {\n                    op = sr;\n                }\n                if (_.isNull(op) || _.isUndefined(op)) {\n                    return;\n                }\n                op.name = op.name || ctx.subTaskName(name);\n                op.src = op.src || (ctx.getSrc({ oper: development_core_1.Operation.build }) + '/**/*.' + name);\n                op.dist = op.dist || ctx.getDist({ oper: development_core_1.Operation.build });\n                tasks.push(op);\n            });\n            return Promise.all(_.map(tasks, task => {\n                return this.loadTasks(gulp, task, ctx)\n                    .then(sq => {\n                    return {\n                        task: task,\n                        sq: sq\n                    };\n                });\n            }))\n                .then(tseq => {\n                // asserts tasks run mutil.\n                let assertSeq = _.map(tseq, t => {\n                    return development_core_1.zipSequence(gulp, t.sq, ctx, (name, runway) => ctx.subTaskName(t.task.name, runway === development_core_1.RunWay.sequence ? '-asserts' : '-assertp')); // ctx.subTaskName(name + (runway === RunWay.sequence ? '-assert-seq' : '-assert-par')));\n                });\n                let taskname;\n                if (optask.assertsRunWay === development_core_1.RunWay.sequence) {\n                    taskname = assertSeq;\n                }\n                else {\n                    taskname = development_core_1.zipSequence(gulp, [assertSeq], ctx, (name, runway) => name + (runway === development_core_1.RunWay.sequence ? '-asserts' : '-assertp'));\n                }\n                return {\n                    order: optask.assertsOrder,\n                    taskName: taskname\n                };\n            });\n        }\n        else {\n            return Promise.resolve(null);\n        }\n    }\n    createLoader(option, parent) {\n        if (!_.isFunction(this.config.loaderFactory)) {\n            let factory = new LoaderFactory_1.LoaderFactory();\n            return factory.create(option, parent.env, (cfg, p) => {\n                return this.config.contextFactory(cfg, p || parent);\n            });\n        }\n        else {\n            return this.config.loaderFactory(option, parent.env);\n        }\n    }\n    printHelp(help) {\n        if (help === 'en') {\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--context name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env  development or production;\r\n                 *  --context app setting\r\n                 *  --root path, set relative path of the development tool root.\r\n                 *  --watch  watch src file change or not. if changed will auto update to node service. \r\n                 *  --release release web app or not. if [--env production], default to release. \r\n                 *  --test  need auto load test file to node service.\r\n                 *  --deploy run deploy tasks to deploy project.  \r\n                 *  --serve start node web service or not.\r\n                 *  --task taskname  spruce task taskname\r\n                 **/`);\n        }\n        else {\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--context name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env 发布环境 默认开发环境development;\r\n                 *  --context 设置配置文件;\r\n                 *  --root path, 设置编译环境相对路径\r\n                 *  --watch  是否需要动态监听文件变化\r\n                 *  --release 是否release编译, [--env production] 默认release \r\n                 *  --test  启动自动化测试\r\n                 *  --deploy 运行加载deploy tasks, 编译发布项目。  \r\n                 *  --serve  是否在开发模式下 开启node web服务\r\n                 *  --task taskname  运行单独任务taskname\r\n                 **/`);\n        }\n    }\n}\nexports.Development = Development;\n","import * as _ from 'lodash';\r\nimport { Gulp, TaskCallback } from 'gulp';\r\n\r\nimport * as minimist from 'minimist';\r\nimport { ITaskLoader } from './ITaskLoader';\r\nimport { LoaderFactory } from './LoaderFactory';\r\nimport { Operation, ITaskConfig, Src, toSequence, runSequence, bindingConfig, zipSequence, flattenSequence, ITaskContext, ITaskInfo, ITask, IEnvOption, IDynamicTaskOption, RunWay } from 'development-core';\r\nimport { TaskOption, ITaskOption, IAssertOption } from './TaskOption';\r\nimport { IContext } from './IContext';\r\nimport { Context } from './Context';\r\nimport { DevelopConfig } from './DevelopConfig';\r\nimport * as chalk from 'chalk';\r\n\r\n\r\nexport class Development {\r\n\r\n    /**\r\n     * create development tool.\r\n     * \r\n     * @static\r\n     * @param {Gulp} gulp\r\n     * @param {string} dirname\r\n     * @param {(DevelopConfig | Array<ITaskOption | IAssertOption | IDynamicTaskOption>)} setting\r\n     * @param {any} [runWay=RunWay.sequence]\r\n     * @returns {Development}\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    static create(gulp: Gulp, dirname: string, setting: DevelopConfig | Array<ITaskOption | IAssertOption | IDynamicTaskOption>, runWay = RunWay.sequence, factory?: (cfg: ITaskConfig, parent?: ITaskContext) => ITaskContext): Development {\r\n        let option = _.isArray(setting) ? { tasks: setting, runWay: runWay } : setting;\r\n        if (!_.isUndefined(option.runWay)) {\r\n            option.runWay = runWay;\r\n        }\r\n        option.contextFactory = factory || ((cfg, parent?) => {\r\n            let ctx = new Context(cfg, parent);\r\n            if (parent && parent['add']) {\r\n                (<IContext>parent).add(ctx);\r\n            }\r\n            return ctx;\r\n        })\r\n\r\n        let devtool = new Development(dirname, option);\r\n        option.setupTask = option.setupTask || 'build';\r\n        gulp.task(option.setupTask, (callback: TaskCallback) => {\r\n            var options: IEnvOption = minimist(process.argv.slice(2), {\r\n                string: 'env',\r\n                default: { env: process.env.NODE_ENV || 'development' }\r\n            });\r\n            return devtool.run(gulp, options);\r\n        });\r\n\r\n        option.startTask = option.startTask || 'start';\r\n        gulp.task(option.startTask, (callback: TaskCallback) => {\r\n            var options: IEnvOption = minimist(process.argv.slice(2), {\r\n                string: 'env',\r\n                default: { env: process.env.NODE_ENV || 'development' }\r\n            });\r\n            return devtool.startTask(gulp, options);\r\n        })\r\n\r\n        gulp.task('default', () => {\r\n            gulp.start(option.setupTask);\r\n        });\r\n        return devtool;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of Development.\r\n     * \r\n     * @param {string} dirname\r\n     * @param {DevelopConfig} config\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    private constructor(private dirname: string, protected config: DevelopConfig) {\r\n\r\n    }\r\n\r\n    /**\r\n     * run task.\r\n     * \r\n     * @param {Gulp} gulp\r\n     * @param {IEnvOption} env\r\n     * @returns {Promise<any>}\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    run(gulp: Gulp, env: IEnvOption): Promise<any> {\r\n        return this.setupTasks(gulp, env)\r\n            .then(tseq => {\r\n                // console.log(chalk.grey('run sequenec tasks:'), tseq);\r\n                let gbctx = this.getContext(env);\r\n                if (this.config.runWay === RunWay.parallel) {\r\n                    return runSequence(gulp, [flattenSequence(gulp, tseq, gbctx)]);\r\n                } else {\r\n                    return runSequence(gulp, tseq);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                process.exit(1);\r\n            });\r\n    }\r\n\r\n    startTask(gulp: Gulp, env: IEnvOption): Promise<any> {\r\n        return this.setupTasks(gulp, env)\r\n            .then((seq) => {\r\n                let tseq = env.task ? env.task.split(',') : seq;\r\n                 let gbctx = this.getContext(env);\r\n                if (this.config.runWay === RunWay.parallel) {\r\n                    return runSequence(gulp, [flattenSequence(gulp, tseq, gbctx)]);\r\n                } else {\r\n                    return runSequence(gulp, tseq);\r\n                }\r\n            });\r\n    }\r\n\r\n    setupTasks(gulp: Gulp, env: IEnvOption): Promise<Src[]> {\r\n        if (!env.root) {\r\n            env.root = this.dirname;\r\n        }\r\n\r\n        if (env.help) {\r\n            console.log(chalk.grey('... main help  ...'));\r\n            this.printHelp(env.help);\r\n        }\r\n\r\n        let gbctx = this.getContext(env);\r\n        return this.loadTasks(gulp, this.config.tasks, gbctx)\r\n            .catch(err => {\r\n                console.error(err);\r\n                process.exit(1);\r\n            });\r\n    }\r\n\r\n    private globalctx: IContext;\r\n    getContext(env) {\r\n        if (!this.globalctx || this.globalctx.env !== env) {\r\n            let option = this.config.option || {};\r\n            this.globalctx = <IContext>this.config.contextFactory({\r\n                env: env,\r\n                option: option\r\n            });\r\n        }\r\n\r\n        return this.globalctx;\r\n    }\r\n\r\n\r\n    protected loadTasks(gulp: Gulp, tasks: TaskOption, parent: IContext): Promise<Src[]> {\r\n        return Promise.all<Src[]>(\r\n            _.map(_.isArray(tasks) ? <ITaskOption[]>tasks : [<ITaskOption>tasks], optask => {\r\n                optask.dist = optask.dist || 'dist';\r\n                // console.log(chalk.grey('begin load task via loader:'), optask.loader);\r\n                let loader = this.createLoader(optask, parent);\r\n\r\n                return loader.loadContext(parent.env)\r\n                    .then(ctx => {\r\n                        console.log(chalk.green('task context loaded.'));\r\n                        if (ctx.env.help) {\r\n                            if (ctx.printHelp) {\r\n                                console.log(chalk.grey('...development default help...'));\r\n                                ctx.printHelp(_.isString(ctx.env.help) ? ctx.env.help : '');\r\n                            }\r\n                            return [];\r\n                        } else {\r\n                            return Promise.all([\r\n                                loader.load(ctx),\r\n                                this.loadAssertTasks(gulp, ctx),\r\n                                this.loadSubTask(gulp, ctx)\r\n                            ])\r\n                                .then(tks => {\r\n                                    console.log(chalk.green('tasks loaded.'));\r\n                                    return this.setup(gulp, ctx, tks[0], tks[1], tks[2]);\r\n                                });\r\n                        }\r\n                    });\r\n            })\r\n        )\r\n            .then(tsq => {\r\n                let rst: Src[] = [];\r\n                _.each(tsq, t => {\r\n                    let tk = zipSequence(gulp, t, parent);\r\n                    if (tk) {\r\n                        rst.push(tk);\r\n                    }\r\n                });\r\n                return rst;\r\n\r\n            });\r\n    }\r\n\r\n    protected setup(gulp: Gulp, ctx: ITaskContext, tasks: ITask[], assertsTask: ITaskInfo, subGroupTask: ITaskInfo): Promise<Src[]> {\r\n        return Promise.resolve(toSequence(gulp, tasks, ctx))\r\n            .then(tsqs => {\r\n                // if (_.isFunction(context.option['runTasks'])) {\r\n                //     return context.option['runTasks'](context.oper, tsqs, subGroupTask, assertsTask);\r\n                // } else if (_.isArray(context.option['runTasks'])) {\r\n                //     tsqs = context.option['runTasks'];\r\n                // } else \r\n                if (ctx.runTasks) {\r\n                    return ctx.runTasks(tsqs, assertsTask, subGroupTask);\r\n                }\r\n                // console.log(assertsTask);\r\n                ctx.addToSequence(tsqs, assertsTask);\r\n                ctx.addToSequence(tsqs, subGroupTask);\r\n\r\n                return tsqs;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * load sub tasks as group task.\r\n     * \r\n     * @protected\r\n     * @param {Gulp} gulp\r\n     * @param {IContext} ctx\r\n     * @returns {Promise<ITaskInfo>}\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    protected loadSubTask(gulp: Gulp, ctx: IContext): Promise<ITaskInfo> {\r\n        if (ctx.option['tasks']) {\r\n            let optask = <ITaskOption>ctx.option;\r\n            _.each(_.isArray(optask.tasks) ? optask.tasks : [optask.tasks], subopt => {\r\n                subopt.name = ctx.subTaskName(subopt.name);\r\n                subopt.src = subopt.src || optask.src;\r\n                subopt.dist = subopt.dist || optask.dist;\r\n            });\r\n            return this.loadTasks(gulp, optask.tasks, ctx)\r\n                .then(subseq => {\r\n                    let taskname;\r\n                    if (optask.subTaskRunWay === RunWay.parallel) {\r\n                        taskname = [flattenSequence(gulp, subseq, ctx, (name, runway) => ctx.subTaskName(name, (runway === RunWay.sequence ? '-subs' : '-subp')))]\r\n                    } else {\r\n                        taskname = zipSequence(gulp, subseq, ctx, (name, runway) => ctx.subTaskName(name, (runway === RunWay.sequence ? '-subs' : '-subp')));\r\n                    }\r\n                    if (taskname) {\r\n                        return <ITaskInfo>{\r\n                            order: optask.subTaskOrder,\r\n                            taskName: taskname\r\n                        };\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                });\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * load asserts tasks.\r\n     * \r\n     * @protected\r\n     * @param {Gulp} gulp\r\n     * @param {ITaskContext} ctx\r\n     * @returns {Promise<Src>}\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    protected loadAssertTasks(gulp: Gulp, ctx: IContext): Promise<ITaskInfo> {\r\n        let optask = <IAssertOption>ctx.option;\r\n        if (optask.asserts) {\r\n            let tasks: IAssertOption[] = [];\r\n            _.each(_.keys(optask.asserts), name => {\r\n                let op: IAssertOption;\r\n                let sr = optask.asserts[name];\r\n                if (_.isString(sr)) {\r\n                    op = <IAssertOption>{ src: sr, loader: [{ name: name, pipes: [], watch: true }] };\r\n                } else if (_.isNumber(sr)) {\r\n                    // watch with Operation.autoWatch.\r\n                    op = <IAssertOption>{ loader: [{ oper: sr, name: name, pipes: [] }] };\r\n                } else if (_.isFunction(sr)) {\r\n                    op = { loader: sr };\r\n                } else if (_.isArray(sr)) {\r\n                    if (sr.length > 0) {\r\n                        if (_.isString(_.first(<string[]>sr))) {\r\n                            op = <IAssertOption>{ src: <string[]>sr, loader: [{ name: name, pipes: [], watch: true }] };\r\n                        } else {\r\n                            op = <IAssertOption>{ loader: <IDynamicTaskOption[]>sr, watch: true };\r\n                        }\r\n                    }\r\n                } else {\r\n                    op = sr;\r\n                }\r\n\r\n                if (_.isNull(op) || _.isUndefined(op)) {\r\n                    return;\r\n                }\r\n                op.name = op.name || ctx.subTaskName(name);\r\n                op.src = op.src || (ctx.getSrc({ oper: Operation.build }) + '/**/*.' + name);\r\n                op.dist = op.dist || ctx.getDist({ oper: Operation.build });\r\n                tasks.push(op);\r\n            });\r\n\r\n            return Promise.all(_.map(tasks, task => {\r\n                return this.loadTasks(gulp, <ITaskOption>task, ctx)\r\n                    .then(sq => {\r\n                        return {\r\n                            task: task,\r\n                            sq: sq\r\n                        }\r\n                    });\r\n            }))\r\n                .then(tseq => {\r\n                    // asserts tasks run mutil.\r\n                    let assertSeq = _.map(tseq, t => {\r\n                        return zipSequence(gulp, t.sq, ctx, (name, runway) => ctx.subTaskName(t.task.name, runway === RunWay.sequence ? '-asserts' : '-assertp')); // ctx.subTaskName(name + (runway === RunWay.sequence ? '-assert-seq' : '-assert-par')));\r\n                    });\r\n\r\n                    let taskname;\r\n                    if (optask.assertsRunWay === RunWay.sequence) {\r\n                        taskname = assertSeq;\r\n                    } else {\r\n                        taskname = zipSequence(gulp, [assertSeq], ctx, (name, runway) => name + (runway === RunWay.sequence ? '-asserts' : '-assertp'));\r\n                    }\r\n\r\n                    return <ITaskInfo>{\r\n                        order: optask.assertsOrder,\r\n                        taskName: taskname\r\n                    }\r\n                });\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    protected createLoader(option: TaskOption, parent: IContext): ITaskLoader {\r\n        if (!_.isFunction(this.config.loaderFactory)) {\r\n            let factory = new LoaderFactory();\r\n            return factory.create(option, parent.env, (cfg, p) => {\r\n                return this.config.contextFactory(cfg, p || parent);\r\n            });\r\n        } else {\r\n            return this.config.loaderFactory(option, parent.env);\r\n        }\r\n    }\r\n\r\n\r\n    protected printHelp(help: boolean | string) {\r\n        if (help === 'en') {\r\n\r\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--context name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env  development or production;\r\n                 *  --context app setting\r\n                 *  --root path, set relative path of the development tool root.\r\n                 *  --watch  watch src file change or not. if changed will auto update to node service. \r\n                 *  --release release web app or not. if [--env production], default to release. \r\n                 *  --test  need auto load test file to node service.\r\n                 *  --deploy run deploy tasks to deploy project.  \r\n                 *  --serve start node web service or not.\r\n                 *  --task taskname  spruce task taskname\r\n                 **/`);\r\n\r\n        } else {\r\n\r\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--context name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env 发布环境 默认开发环境development;\r\n                 *  --context 设置配置文件;\r\n                 *  --root path, 设置编译环境相对路径\r\n                 *  --watch  是否需要动态监听文件变化\r\n                 *  --release 是否release编译, [--env production] 默认release \r\n                 *  --test  启动自动化测试\r\n                 *  --deploy 运行加载deploy tasks, 编译发布项目。  \r\n                 *  --serve  是否在开发模式下 开启node web服务\r\n                 *  --task taskname  运行单独任务taskname\r\n                 **/`);\r\n\r\n        }\r\n    }\r\n}\r\n"]}