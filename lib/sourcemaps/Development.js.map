{"version":3,"sources":["Development.js","Development.ts"],"names":["_","require","minimist","LoaderFactory_1","development_core_1","Context_1","chalk","events_1","Development","dirname","config","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","evnets","each","keys","key","on","gulp","env","_this2","setupTasks","then","seq","tseq","task","split","gbctx","getContext","emit","runWay","RunWay","parallel","runSequence","flattenSequence","catch","err","console","error","process","exit","_this3","root","help","log","grey","printHelp","loadTasks","tasks","tsq","_this4","setupTask","callback","options","argv","slice","string","default","NODE_ENV","run","startTask","Promise","reject","start","globalctx","option","contextFactory","parent","_this5","all","map","isArray","optask","dist","loader","createLoader","loadContext","ctx","green","isString","load","loadAssertTasks","loadSubTask","tks","rst","t","tk","zipSequence","push","assertsTask","subGroupTask","resolve","toSequence","tsqs","runTasks","addToSequence","_this6","_ret","subopt","name","subTaskName","src","v","subseq","taskname","subTaskRunWay","runway","sequence","order","subTaskOrder","taskName","_typeof","_this7","asserts","_ret2","op","sr","pipes","watch","isNumber","oper","isFunction","length","first","isNull","isUndefined","getSrc","Operation","build","getDist","sq","assertSeq","assertsRunWay","assertsOrder","_this8","loaderFactory","factory","LoaderFactory","create","cfg","p","setting","arguments","undefined","Context","add","devtool","setup","EventEmitter","exports"],"mappings":"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","file":"../Development.js","sourcesContent":["\"use strict\";\nconst _ = require('lodash');\nconst minimist = require('minimist');\nconst LoaderFactory_1 = require('./LoaderFactory');\nconst development_core_1 = require('development-core');\nconst Context_1 = require('./Context');\nconst chalk = require('chalk');\nconst events_1 = require('events');\nclass Development extends events_1.EventEmitter {\n    /**\n     * Creates an instance of Development.\n     *\n     * @param {string} dirname\n     * @param {DevelopConfig} config\n     *\n     * @memberOf Development\n     */\n    constructor(dirname, config) {\n        super();\n        this.dirname = dirname;\n        this.config = config;\n        if (config.evnets) {\n            _.each(_.keys(config.evnets), key => {\n                this.on(key, config.evnets[key]);\n            });\n        }\n    }\n    /**\n     * create development tool.\n     *\n     * @static\n     * @param {Gulp} gulp\n     * @param {string} dirname\n     * @param {(DevelopConfig | Array<ITaskOption | IAssertOption | IDynamicTaskOption>)} setting\n     * @param {any} [runWay=RunWay.sequence]\n     * @returns {Development}\n     *\n     * @memberOf Development\n     */\n    static create(gulp, dirname, setting, runWay = development_core_1.RunWay.sequence, factory) {\n        let option = _.isArray(setting) ? { tasks: setting, runWay: runWay } : setting;\n        if (!_.isUndefined(option.runWay)) {\n            option.runWay = runWay;\n        }\n        option.contextFactory = factory || ((cfg, parent) => {\n            let ctx = new Context_1.Context(cfg, parent);\n            if (parent && parent['add']) {\n                parent.add(ctx);\n            }\n            return ctx;\n        });\n        let devtool = new Development(dirname, option);\n        devtool.setup(gulp);\n        return devtool;\n    }\n    /**\n     * run task.\n     *\n     * @param {Gulp} gulp\n     * @param {IEnvOption} env\n     * @returns {Promise<any>}\n     *\n     * @memberOf Development\n     */\n    run(gulp, env) {\n        return this.setupTasks(gulp, env)\n            .then(seq => {\n            let tseq = env.task ? env.task.split(',') : seq;\n            let gbctx = this.getContext(env);\n            this.emit('beforRun', tseq, gbctx);\n            if (this.config.runWay === development_core_1.RunWay.parallel) {\n                return development_core_1.runSequence(gulp, [development_core_1.flattenSequence(gulp, tseq, gbctx)]);\n            }\n            else {\n                return development_core_1.runSequence(gulp, tseq);\n            }\n        })\n            .then(() => {\n            let gbctx = this.getContext(env);\n            this.emit('afterRun', gbctx);\n        })\n            .catch(err => {\n            console.error(err);\n            process.exit(1);\n        });\n    }\n    setupTasks(gulp, env) {\n        if (!env.root) {\n            env.root = this.dirname;\n        }\n        if (env.help) {\n            console.log(chalk.grey('... main help  ...'));\n            this.printHelp(env.help);\n        }\n        let gbctx = this.getContext(env);\n        this.emit('beforSetup', gbctx);\n        return this.loadTasks(gulp, this.config.tasks, gbctx)\n            .then(tsq => {\n            this.emit('afterSetup', tsq, gbctx);\n            return tsq;\n        })\n            .catch(err => {\n            console.error(err);\n            process.exit(1);\n        });\n    }\n    setup(gulp) {\n        let config = this.config;\n        config.setupTask = config.setupTask || 'build';\n        gulp.task(config.setupTask, (callback) => {\n            var options = minimist(process.argv.slice(2), {\n                string: 'env',\n                default: { env: process.env.NODE_ENV || 'development' }\n            });\n            return this.run(gulp, options);\n        });\n        config.startTask = config.startTask || 'start';\n        gulp.task(config.startTask, (callback) => {\n            var options = minimist(process.argv.slice(2), {\n                string: 'env',\n                default: { env: process.env.NODE_ENV || 'development' }\n            });\n            if (!options.task) {\n                return Promise.reject('start task can not empty!');\n            }\n            return this.run(gulp, options);\n        });\n        gulp.task('default', () => {\n            gulp.start(config.setupTask);\n        });\n    }\n    getContext(env) {\n        if (!this.globalctx || this.globalctx.env !== env) {\n            let option = this.config.option || {};\n            this.globalctx = this.config.contextFactory({\n                env: env,\n                option: option\n            });\n        }\n        return this.globalctx;\n    }\n    loadTasks(gulp, tasks, parent) {\n        return Promise.all(_.map(_.isArray(tasks) ? tasks : [tasks], optask => {\n            optask.dist = optask.dist || 'dist';\n            // console.log(chalk.grey('begin load task via loader:'), optask.loader);\n            let loader = this.createLoader(optask, parent);\n            return loader.loadContext(parent.env)\n                .then(ctx => {\n                console.log(chalk.green('task context loaded.'));\n                if (ctx.env.help) {\n                    if (ctx.printHelp) {\n                        console.log(chalk.grey('...development default help...'));\n                        ctx.printHelp(_.isString(ctx.env.help) ? ctx.env.help : '');\n                    }\n                    return [];\n                }\n                else {\n                    return Promise.all([\n                        loader.load(ctx),\n                        this.loadAssertTasks(gulp, ctx),\n                        this.loadSubTask(gulp, ctx)\n                    ])\n                        .then(tks => {\n                        console.log(chalk.green('tasks loaded.'));\n                        return this.setupTask(gulp, ctx, tks[0], tks[1], tks[2]);\n                    });\n                }\n            });\n        }))\n            .then(tsq => {\n            let rst = [];\n            _.each(tsq, t => {\n                let tk = development_core_1.zipSequence(gulp, t, parent);\n                if (tk) {\n                    rst.push(tk);\n                }\n            });\n            return rst;\n        });\n    }\n    setupTask(gulp, ctx, tasks, assertsTask, subGroupTask) {\n        return Promise.resolve(development_core_1.toSequence(gulp, tasks, ctx))\n            .then(tsqs => {\n            if (ctx.runTasks) {\n                return ctx.runTasks(tsqs, assertsTask, subGroupTask);\n            }\n            // console.log(assertsTask);\n            ctx.addToSequence(tsqs, assertsTask);\n            ctx.addToSequence(tsqs, subGroupTask);\n            return tsqs;\n        });\n    }\n    /**\n     * load sub tasks as group task.\n     *\n     * @protected\n     * @param {Gulp} gulp\n     * @param {IContext} ctx\n     * @returns {Promise<ITaskInfo>}\n     *\n     * @memberOf Development\n     */\n    loadSubTask(gulp, ctx) {\n        if (ctx.option['tasks']) {\n            let optask = ctx.option;\n            _.each(_.isArray(optask.tasks) ? optask.tasks : [optask.tasks], subopt => {\n                subopt.name = ctx.subTaskName(subopt.name);\n                subopt.src = subopt.src || optask.src;\n                subopt.dist = subopt.dist || optask.dist;\n            });\n            return this.loadTasks(gulp, optask.tasks, ctx)\n                .then(subseq => {\n                let taskname;\n                if (optask.subTaskRunWay === development_core_1.RunWay.parallel) {\n                    taskname = [development_core_1.flattenSequence(gulp, subseq, ctx, (name, runway) => ctx.subTaskName(name, (runway === development_core_1.RunWay.sequence ? '-subs' : '-subp')))];\n                }\n                else {\n                    taskname = development_core_1.zipSequence(gulp, subseq, ctx, (name, runway) => ctx.subTaskName(name, (runway === development_core_1.RunWay.sequence ? '-subs' : '-subp')));\n                }\n                if (taskname) {\n                    return {\n                        order: optask.subTaskOrder,\n                        taskName: taskname\n                    };\n                }\n                else {\n                    return null;\n                }\n            });\n        }\n        else {\n            return Promise.resolve(null);\n        }\n    }\n    /**\n     * load asserts tasks.\n     *\n     * @protected\n     * @param {Gulp} gulp\n     * @param {ITaskContext} ctx\n     * @returns {Promise<Src>}\n     *\n     * @memberOf Development\n     */\n    loadAssertTasks(gulp, ctx) {\n        let optask = ctx.option;\n        if (optask.asserts) {\n            let tasks = [];\n            _.each(_.keys(optask.asserts), name => {\n                let op;\n                let sr = optask.asserts[name];\n                if (_.isString(sr)) {\n                    op = { src: sr, loader: [{ name: name, pipes: [], watch: true }] };\n                }\n                else if (_.isNumber(sr)) {\n                    // watch with Operation.autoWatch.\n                    op = { loader: [{ oper: sr, name: name, pipes: [] }] };\n                }\n                else if (_.isFunction(sr)) {\n                    op = { loader: sr };\n                }\n                else if (_.isArray(sr)) {\n                    if (sr.length > 0) {\n                        if (_.isString(_.first(sr))) {\n                            op = { src: sr, loader: [{ name: name, pipes: [], watch: true }] };\n                        }\n                        else {\n                            op = { loader: sr, watch: true };\n                        }\n                    }\n                }\n                else {\n                    op = sr;\n                }\n                if (_.isNull(op) || _.isUndefined(op)) {\n                    return;\n                }\n                op.name = op.name || ctx.subTaskName(name);\n                op.src = op.src || (ctx.getSrc({ oper: development_core_1.Operation.build }) + '/**/*.' + name);\n                op.dist = op.dist || ctx.getDist({ oper: development_core_1.Operation.build });\n                tasks.push(op);\n            });\n            return Promise.all(_.map(tasks, task => {\n                return this.loadTasks(gulp, task, ctx)\n                    .then(sq => {\n                    return {\n                        task: task,\n                        sq: sq\n                    };\n                });\n            }))\n                .then(tseq => {\n                // asserts tasks run mutil.\n                let assertSeq = _.map(tseq, t => {\n                    return development_core_1.zipSequence(gulp, t.sq, ctx, (name, runway) => ctx.subTaskName(t.task.name, runway === development_core_1.RunWay.sequence ? '-asserts' : '-assertp')); // ctx.subTaskName(name + (runway === RunWay.sequence ? '-assert-seq' : '-assert-par')));\n                });\n                let taskname;\n                if (optask.assertsRunWay === development_core_1.RunWay.sequence) {\n                    taskname = assertSeq;\n                }\n                else {\n                    taskname = development_core_1.zipSequence(gulp, [assertSeq], ctx, (name, runway) => name + (runway === development_core_1.RunWay.sequence ? '-asserts' : '-assertp'));\n                }\n                return {\n                    order: optask.assertsOrder,\n                    taskName: taskname\n                };\n            });\n        }\n        else {\n            return Promise.resolve(null);\n        }\n    }\n    createLoader(option, parent) {\n        if (!_.isFunction(this.config.loaderFactory)) {\n            let factory = new LoaderFactory_1.LoaderFactory();\n            return factory.create(option, parent.env, (cfg, p) => {\n                return this.config.contextFactory(cfg, p || parent);\n            });\n        }\n        else {\n            return this.config.loaderFactory(option, parent.env);\n        }\n    }\n    printHelp(help) {\n        if (help === 'en') {\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--context name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env  development or production;\r\n                 *  --context app setting\r\n                 *  --root path, set relative path of the development tool root.\r\n                 *  --watch  watch src file change or not. if changed will auto update to node service. \r\n                 *  --release release web app or not. if [--env production], default to release. \r\n                 *  --test  need auto load test file to node service.\r\n                 *  --deploy run deploy tasks to deploy project.  \r\n                 *  --serve start node web service or not.\r\n                 *  --task taskname  spruce task taskname\r\n                 **/`);\n        }\n        else {\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--context name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env 发布环境 默认开发环境development;\r\n                 *  --context 设置配置文件;\r\n                 *  --root path, 设置编译环境相对路径\r\n                 *  --watch  是否需要动态监听文件变化\r\n                 *  --release 是否release编译, [--env production] 默认release \r\n                 *  --test  启动自动化测试\r\n                 *  --deploy 运行加载deploy tasks, 编译发布项目。  \r\n                 *  --serve  是否在开发模式下 开启node web服务\r\n                 *  --task taskname  运行单独任务taskname\r\n                 **/`);\n        }\n    }\n}\nexports.Development = Development;\n","import * as _ from 'lodash';\r\nimport { Gulp, TaskCallback } from 'gulp';\r\n\r\nimport * as minimist from 'minimist';\r\nimport { ITaskLoader } from './ITaskLoader';\r\nimport { LoaderFactory } from './LoaderFactory';\r\nimport { Operation, ITaskConfig, Src, toSequence, runSequence, bindingConfig, zipSequence, flattenSequence, ITaskContext, ITaskInfo, ITask, IEnvOption, IDynamicTaskOption, RunWay } from 'development-core';\r\nimport { TaskOption, ITaskOption, IAssertOption } from './TaskOption';\r\nimport { IContext } from './IContext';\r\nimport { Context } from './Context';\r\nimport { DevelopConfig } from './DevelopConfig';\r\nimport * as chalk from 'chalk';\r\nimport { EventEmitter } from 'events';\r\n\r\nexport class Development extends EventEmitter {\r\n\r\n    /**\r\n     * create development tool.\r\n     * \r\n     * @static\r\n     * @param {Gulp} gulp\r\n     * @param {string} dirname\r\n     * @param {(DevelopConfig | Array<ITaskOption | IAssertOption | IDynamicTaskOption>)} setting\r\n     * @param {any} [runWay=RunWay.sequence]\r\n     * @returns {Development}\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    static create(gulp: Gulp, dirname: string, setting: DevelopConfig | Array<ITaskOption | IAssertOption | IDynamicTaskOption>, runWay = RunWay.sequence, factory?: (cfg: ITaskConfig, parent?: ITaskContext) => ITaskContext): Development {\r\n        let option = _.isArray(setting) ? { tasks: setting, runWay: runWay } : setting;\r\n        if (!_.isUndefined(option.runWay)) {\r\n            option.runWay = runWay;\r\n        }\r\n        option.contextFactory = factory || ((cfg, parent?) => {\r\n            let ctx = new Context(cfg, parent);\r\n            if (parent && parent['add']) {\r\n                (<IContext>parent).add(ctx);\r\n            }\r\n            return ctx;\r\n        })\r\n\r\n        let devtool = new Development(dirname, option);\r\n        devtool.setup(gulp);\r\n        return devtool;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of Development.\r\n     * \r\n     * @param {string} dirname\r\n     * @param {DevelopConfig} config\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    public constructor(private dirname: string, protected config: DevelopConfig) {\r\n        super();\r\n        if (config.evnets) {\r\n            _.each(_.keys(config.evnets), key => {\r\n                this.on(key, config.evnets[key]);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * run task.\r\n     * \r\n     * @param {Gulp} gulp\r\n     * @param {IEnvOption} env\r\n     * @returns {Promise<any>}\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    run(gulp: Gulp, env: IEnvOption): Promise<any> {\r\n        return this.setupTasks(gulp, env)\r\n            .then(seq => {\r\n                let tseq = env.task ? env.task.split(',') : seq;\r\n                let gbctx = this.getContext(env);\r\n                this.emit('beforRun', tseq, gbctx);\r\n                if (this.config.runWay === RunWay.parallel) {\r\n                    return runSequence(gulp, [flattenSequence(gulp, tseq, gbctx)]);\r\n                } else {\r\n                    return runSequence(gulp, tseq);\r\n                }\r\n            })\r\n            .then(() => {\r\n                let gbctx = this.getContext(env);\r\n                this.emit('afterRun', gbctx);\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                process.exit(1);\r\n            });\r\n    }\r\n\r\n    setupTasks(gulp: Gulp, env: IEnvOption): Promise<Src[]> {\r\n        if (!env.root) {\r\n            env.root = this.dirname;\r\n        }\r\n\r\n        if (env.help) {\r\n            console.log(chalk.grey('... main help  ...'));\r\n            this.printHelp(env.help);\r\n        }\r\n\r\n        let gbctx = this.getContext(env);\r\n        this.emit('beforSetup', gbctx);\r\n        return this.loadTasks(gulp, this.config.tasks, gbctx)\r\n            .then(tsq => {\r\n                this.emit('afterSetup', tsq, gbctx);\r\n                return tsq;\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                process.exit(1);\r\n            });\r\n    }\r\n\r\n    setup(gulp: Gulp) {\r\n        let config = this.config;\r\n        config.setupTask = config.setupTask || 'build';\r\n        gulp.task(config.setupTask, (callback: TaskCallback) => {\r\n            var options: IEnvOption = minimist(process.argv.slice(2), {\r\n                string: 'env',\r\n                default: { env: process.env.NODE_ENV || 'development' }\r\n            });\r\n            return this.run(gulp, options);\r\n        });\r\n\r\n        config.startTask = config.startTask || 'start';\r\n        gulp.task(config.startTask, (callback: TaskCallback) => {\r\n            var options: IEnvOption = minimist(process.argv.slice(2), {\r\n                string: 'env',\r\n                default: { env: process.env.NODE_ENV || 'development' }\r\n            });\r\n            if (!options.task) {\r\n                return Promise.reject('start task can not empty!');\r\n            }\r\n            return this.run(gulp, options);\r\n        })\r\n\r\n        gulp.task('default', () => {\r\n            gulp.start(config.setupTask);\r\n        });\r\n    }\r\n\r\n    private globalctx: IContext;\r\n    getContext(env) {\r\n        if (!this.globalctx || this.globalctx.env !== env) {\r\n            let option = this.config.option || {};\r\n            this.globalctx = <IContext>this.config.contextFactory({\r\n                env: env,\r\n                option: option\r\n            });\r\n        }\r\n\r\n        return this.globalctx;\r\n    }\r\n\r\n\r\n    protected loadTasks(gulp: Gulp, tasks: TaskOption, parent: IContext): Promise<Src[]> {\r\n        return Promise.all<Src[]>(\r\n            _.map(_.isArray(tasks) ? <ITaskOption[]>tasks : [<ITaskOption>tasks], optask => {\r\n                optask.dist = optask.dist || 'dist';\r\n                // console.log(chalk.grey('begin load task via loader:'), optask.loader);\r\n                let loader = this.createLoader(optask, parent);\r\n\r\n                return loader.loadContext(parent.env)\r\n                    .then(ctx => {\r\n                        console.log(chalk.green('task context loaded.'));\r\n                        if (ctx.env.help) {\r\n                            if (ctx.printHelp) {\r\n                                console.log(chalk.grey('...development default help...'));\r\n                                ctx.printHelp(_.isString(ctx.env.help) ? ctx.env.help : '');\r\n                            }\r\n                            return [];\r\n                        } else {\r\n                            return Promise.all([\r\n                                loader.load(ctx),\r\n                                this.loadAssertTasks(gulp, ctx),\r\n                                this.loadSubTask(gulp, ctx)\r\n                            ])\r\n                                .then(tks => {\r\n                                    console.log(chalk.green('tasks loaded.'));\r\n                                    return this.setupTask(gulp, ctx, tks[0], tks[1], tks[2]);\r\n                                });\r\n                        }\r\n                    });\r\n            })\r\n        )\r\n            .then(tsq => {\r\n                let rst: Src[] = [];\r\n                _.each(tsq, t => {\r\n                    let tk = zipSequence(gulp, t, parent);\r\n                    if (tk) {\r\n                        rst.push(tk);\r\n                    }\r\n                });\r\n                return rst;\r\n\r\n            });\r\n    }\r\n\r\n    protected setupTask(gulp: Gulp, ctx: ITaskContext, tasks: ITask[], assertsTask: ITaskInfo, subGroupTask: ITaskInfo): Promise<Src[]> {\r\n        return Promise.resolve(toSequence(gulp, tasks, ctx))\r\n            .then(tsqs => {\r\n                if (ctx.runTasks) {\r\n                    return ctx.runTasks(tsqs, assertsTask, subGroupTask);\r\n                }\r\n                // console.log(assertsTask);\r\n                ctx.addToSequence(tsqs, assertsTask);\r\n                ctx.addToSequence(tsqs, subGroupTask);\r\n\r\n                return tsqs;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * load sub tasks as group task.\r\n     * \r\n     * @protected\r\n     * @param {Gulp} gulp\r\n     * @param {IContext} ctx\r\n     * @returns {Promise<ITaskInfo>}\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    protected loadSubTask(gulp: Gulp, ctx: IContext): Promise<ITaskInfo> {\r\n        if (ctx.option['tasks']) {\r\n            let optask = <ITaskOption>ctx.option;\r\n            _.each(_.isArray(optask.tasks) ? optask.tasks : [optask.tasks], subopt => {\r\n                subopt.name = ctx.subTaskName(subopt.name);\r\n                subopt.src = subopt.src || optask.src;\r\n                subopt.dist = subopt.dist || optask.dist;\r\n            });\r\n            return this.loadTasks(gulp, optask.tasks, ctx)\r\n                .then(subseq => {\r\n                    let taskname;\r\n                    if (optask.subTaskRunWay === RunWay.parallel) {\r\n                        taskname = [flattenSequence(gulp, subseq, ctx, (name, runway) => ctx.subTaskName(name, (runway === RunWay.sequence ? '-subs' : '-subp')))]\r\n                    } else {\r\n                        taskname = zipSequence(gulp, subseq, ctx, (name, runway) => ctx.subTaskName(name, (runway === RunWay.sequence ? '-subs' : '-subp')));\r\n                    }\r\n                    if (taskname) {\r\n                        return <ITaskInfo>{\r\n                            order: optask.subTaskOrder,\r\n                            taskName: taskname\r\n                        };\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                });\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * load asserts tasks.\r\n     * \r\n     * @protected\r\n     * @param {Gulp} gulp\r\n     * @param {ITaskContext} ctx\r\n     * @returns {Promise<Src>}\r\n     * \r\n     * @memberOf Development\r\n     */\r\n    protected loadAssertTasks(gulp: Gulp, ctx: IContext): Promise<ITaskInfo> {\r\n        let optask = <IAssertOption>ctx.option;\r\n        if (optask.asserts) {\r\n            let tasks: IAssertOption[] = [];\r\n            _.each(_.keys(optask.asserts), name => {\r\n                let op: IAssertOption;\r\n                let sr = optask.asserts[name];\r\n                if (_.isString(sr)) {\r\n                    op = <IAssertOption>{ src: sr, loader: [{ name: name, pipes: [], watch: true }] };\r\n                } else if (_.isNumber(sr)) {\r\n                    // watch with Operation.autoWatch.\r\n                    op = <IAssertOption>{ loader: [{ oper: sr, name: name, pipes: [] }] };\r\n                } else if (_.isFunction(sr)) {\r\n                    op = { loader: sr };\r\n                } else if (_.isArray(sr)) {\r\n                    if (sr.length > 0) {\r\n                        if (_.isString(_.first(<string[]>sr))) {\r\n                            op = <IAssertOption>{ src: <string[]>sr, loader: [{ name: name, pipes: [], watch: true }] };\r\n                        } else {\r\n                            op = <IAssertOption>{ loader: <IDynamicTaskOption[]>sr, watch: true };\r\n                        }\r\n                    }\r\n                } else {\r\n                    op = sr;\r\n                }\r\n\r\n                if (_.isNull(op) || _.isUndefined(op)) {\r\n                    return;\r\n                }\r\n                op.name = op.name || ctx.subTaskName(name);\r\n                op.src = op.src || (ctx.getSrc({ oper: Operation.build }) + '/**/*.' + name);\r\n                op.dist = op.dist || ctx.getDist({ oper: Operation.build });\r\n                tasks.push(op);\r\n            });\r\n\r\n            return Promise.all(_.map(tasks, task => {\r\n                return this.loadTasks(gulp, <ITaskOption>task, ctx)\r\n                    .then(sq => {\r\n                        return {\r\n                            task: task,\r\n                            sq: sq\r\n                        }\r\n                    });\r\n            }))\r\n                .then(tseq => {\r\n                    // asserts tasks run mutil.\r\n                    let assertSeq = _.map(tseq, t => {\r\n                        return zipSequence(gulp, t.sq, ctx, (name, runway) => ctx.subTaskName(t.task.name, runway === RunWay.sequence ? '-asserts' : '-assertp')); // ctx.subTaskName(name + (runway === RunWay.sequence ? '-assert-seq' : '-assert-par')));\r\n                    });\r\n\r\n                    let taskname;\r\n                    if (optask.assertsRunWay === RunWay.sequence) {\r\n                        taskname = assertSeq;\r\n                    } else {\r\n                        taskname = zipSequence(gulp, [assertSeq], ctx, (name, runway) => name + (runway === RunWay.sequence ? '-asserts' : '-assertp'));\r\n                    }\r\n\r\n                    return <ITaskInfo>{\r\n                        order: optask.assertsOrder,\r\n                        taskName: taskname\r\n                    }\r\n                });\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    protected createLoader(option: TaskOption, parent: IContext): ITaskLoader {\r\n        if (!_.isFunction(this.config.loaderFactory)) {\r\n            let factory = new LoaderFactory();\r\n            return factory.create(option, parent.env, (cfg, p) => {\r\n                return this.config.contextFactory(cfg, p || parent);\r\n            });\r\n        } else {\r\n            return this.config.loaderFactory(option, parent.env);\r\n        }\r\n    }\r\n\r\n\r\n    protected printHelp(help: boolean | string) {\r\n        if (help === 'en') {\r\n\r\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--context name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env  development or production;\r\n                 *  --context app setting\r\n                 *  --root path, set relative path of the development tool root.\r\n                 *  --watch  watch src file change or not. if changed will auto update to node service. \r\n                 *  --release release web app or not. if [--env production], default to release. \r\n                 *  --test  need auto load test file to node service.\r\n                 *  --deploy run deploy tasks to deploy project.  \r\n                 *  --serve start node web service or not.\r\n                 *  --task taskname  spruce task taskname\r\n                 **/`);\r\n\r\n        } else {\r\n\r\n            console.log(`\r\n                /**\r\n                 * gulp [build] [--env production|development] [--context name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env 发布环境 默认开发环境development;\r\n                 *  --context 设置配置文件;\r\n                 *  --root path, 设置编译环境相对路径\r\n                 *  --watch  是否需要动态监听文件变化\r\n                 *  --release 是否release编译, [--env production] 默认release \r\n                 *  --test  启动自动化测试\r\n                 *  --deploy 运行加载deploy tasks, 编译发布项目。  \r\n                 *  --serve  是否在开发模式下 开启node web服务\r\n                 *  --task taskname  运行单独任务taskname\r\n                 **/`);\r\n\r\n        }\r\n    }\r\n}\r\n"]}