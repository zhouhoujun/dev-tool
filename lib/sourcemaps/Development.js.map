{"version":3,"sources":["Development.ts"],"names":[],"mappings":"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","file":"../Development.js","sourcesContent":["import * as _ from 'lodash';\r\nimport { Gulp, TaskCallback } from 'gulp';\r\nimport { ITaskOption } from './TaskOption';\r\nimport { IContext } from './IContext';\r\nimport { Context } from './Context';\r\nimport { Src, ITaskConfig, IAssertOption, IDynamicTaskOption, RunWay } from 'development-core';\r\n\r\n\r\nexport interface IDevelopment extends IContext {\r\n    /**\r\n     * start.\r\n     *\r\n     * @returns {Src}\r\n     * @memberof IDevelopment\r\n     */\r\n    start(): Src;\r\n}\r\n\r\n/**\r\n * Development.\r\n *\r\n * @export\r\n * @class Development\r\n * @extends {Context}\r\n */\r\nexport class Development extends Context implements IDevelopment {\r\n\r\n    /**\r\n     * create development tool.\r\n     *\r\n     * @static\r\n     * @param {Gulp} gulp\r\n     * @param {string} root  root path.\r\n     * @param {(ITaskConfig | Array<IAssertOption | ITaskOption | IDynamicTaskOption>)} setting\r\n     * @param {any} [runWay=RunWay.sequence]\r\n     * @returns {Development}\r\n     *\r\n     * @memberOf Development\r\n     */\r\n    static create(gulp: Gulp, root: string, setting: ITaskConfig | Array<IAssertOption | ITaskOption | IDynamicTaskOption>, name = '', runWay = RunWay.sequence): Development {\r\n        let config: ITaskConfig;\r\n        let option: ITaskOption;\r\n        if (_.isArray(setting)) {\r\n            config = { option: <ITaskOption>{ name: name, tasks: setting, runWay: runWay, loader: [] } };\r\n        } else {\r\n            config = setting;\r\n            option = config.option as ITaskOption;\r\n            option.name = option.name || name;\r\n            if (!_.isUndefined(option.runWay)) {\r\n                option.runWay = runWay;\r\n            }\r\n        }\r\n\r\n        let devtool = new Development(config, root);\r\n        devtool.gulp = gulp;\r\n        return devtool;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of Development.\r\n     * @param {ITaskConfig} config\r\n     * @param {string} root root path.\r\n     * @param {IContext} [parent]\r\n     * @memberof Development\r\n     */\r\n    public constructor(config: ITaskConfig, private root?: string) {\r\n        super(config);\r\n\r\n        this.setConfig({\r\n            env: { root: root },\r\n            printHelp: this.cfg.printHelp || this.printHelp\r\n        });\r\n    }\r\n\r\n    getRootPath() {\r\n        return this.root || super.getRootPath();\r\n    }\r\n\r\n    /**\r\n     * get all tasks sequence\r\n     */\r\n    allTasks() {\r\n        return this.map((t) => {\r\n            t.getRunSequence();\r\n        })\r\n    }\r\n\r\n    /**\r\n     * start task.\r\n     *\r\n     * @returns {Src}\r\n     * @memberof Development\r\n     */\r\n    start(): Src {\r\n        let gulp = this.gulp;\r\n        let isRoot = !this.parent;\r\n        let btsk = isRoot ? 'build' : `build-${this.taskName(this.option.name)}`;\r\n        gulp.task(btsk, (callback: TaskCallback) => {\r\n            return this.run();\r\n        });\r\n\r\n        gulp.task(isRoot ? 'start' : `start-${this.taskName(this.option.name)}`, (callback: TaskCallback) => {\r\n            let tasks = this.env.task ? this.env.task.split(',') : [];\r\n            let contextname: string = this.env['context'];\r\n            let runCtx = contextname ? this.find<Context>(ctx => ctx.toStr(ctx.option.name) === contextname) : this;\r\n\r\n            let tskprocess: Promise<any>;\r\n            if (tasks && tasks.length > 0) {\r\n                tskprocess = runCtx.setup()\r\n                    .then(() => {\r\n                        let excTasks = [];\r\n                        tasks.forEach(tk => {\r\n                            runCtx.each(c => {\r\n                                _.each(_.flatten(c.getRunSequence()), t => {\r\n                                    if (t.endsWith(tk) && excTasks.indexOf(t) < 0) {\r\n                                        excTasks.push(t)\r\n                                    }\r\n                                });\r\n                            })\r\n                        });\r\n                        this.runSequence(excTasks);\r\n                    });\r\n            } else {\r\n                tskprocess = runCtx.run();\r\n            }\r\n\r\n            return tskprocess\r\n                .catch(err => {\r\n                    process.exit(_.isNumber(err) ? err : 1);\r\n                })\r\n        });\r\n\r\n        if (!this.parent) {\r\n            gulp.task('default', () => {\r\n                gulp.start(btsk);\r\n            });\r\n        }\r\n\r\n        return btsk;\r\n    }\r\n\r\n    protected printHelp(help: string) {\r\n        if (help === 'en') {\r\n\r\n            console.log(`\r\n                /**\r\n                 * gulp [start] [--env production|development] [--context name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env  development or production;\r\n                 *  --context app setting\r\n                 *  --root path, set relative path of the development tool root.\r\n                 *  --watch  watch src file change or not. if changed will auto update to node service.\r\n                 *  --release release web app or not. if [--env production], default to release.\r\n                 *  --test  need auto load test file to node service.\r\n                 *  --deploy run deploy tasks to deploy project.\r\n                 *  --serve start node web service or not.\r\n                 *  --task taskname  spruce task taskname, etc: --task task1,task2\r\n                 **/`);\r\n\r\n        } else {\r\n\r\n            console.log(`\r\n                /**\r\n                 * gulp [start] [--env production|development] [--context name] [--root path] [--watch] [--test] [--serve] [--release] [--task taskname]\r\n                 * @params\r\n                 *  --env 发布环境 默认开发环境development;\r\n                 *  --context 设置配置文件;\r\n                 *  --root path, 设置编译环境相对路径\r\n                 *  --watch  是否需要动态监听文件变化\r\n                 *  --release 是否release编译, [--env production] 默认release\r\n                 *  --test  启动自动化测试\r\n                 *  --deploy 运行加载deploy tasks, 编译发布项目。\r\n                 *  --serve  是否在开发模式下 开启node web服务\r\n                 *  --task taskname  运行单独任务taskname, etc: --task task1,task2\r\n                 **/`);\r\n\r\n        }\r\n    }\r\n}\r\n"]}